Number of training graphs: 1479
Number of test graphs: 370
expected scalar type Long but found Float
Python 3.10.4 (main, Mar 31 2022, 08:41:55) [GCC 7.5.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.5.0 -- An enhanced Interactive Python. Type '?' for help.
RuntimeError('expected scalar type Long but found Float')
'torch.FloatTensor'
'torch.LongTensor'
'torch.LongTensor'
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:54, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 54 x = self.conv1(x, edge_index, edge_attr)
     56 x = F.relu(x)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    210 assert edge_attr is not None
--> 211 edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                           self.out_channels)
    213 key_j += edge_attr
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    114 r"""
    115 Args:
    116     x (Tensor): The features.
    117 """
--> 118 return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float
During handling of the above exception, another exception occurred:
RuntimeError                              Traceback (most recent call last)
Cell In [5], line 1
----> 1 x = self.conv1(x = x, edge_index = edge_index, edge_attr = edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    173 value = self.lin_value(x[0]).view(-1, H, C)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
    180 self._alpha = None
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    372     if res is not None:
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
    376     res = hook(self, (msg_kwargs, ), out)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    209 if self.lin_edge is not None:
    210     assert edge_attr is not None
--> 211     edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                               self.out_channels)
    213     key_j += edge_attr
    215 alpha = (query_i * key_j).sum(dim=-1) / math.sqrt(self.out_channels)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    113 def forward(self, x: Tensor) -> Tensor:
    114     r"""
    115     Args:
    116         x (Tensor): The features.
    117     """
--> 118     return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float
Logical_Fallacy_Dataset(1849)
13
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:54, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 54 x = self.conv1(x, edge_index, edge_attr)
     56 x = F.relu(x)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    210 assert edge_attr is not None
--> 211 edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                           self.out_channels)
    213 key_j += edge_attr
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    114 r"""
    115 Args:
    116     x (Tensor): The features.
    117 """
--> 118 return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float
During handling of the above exception, another exception occurred:
AttributeError                            Traceback (most recent call last)
Cell In [8], line 1
----> 1 dataset.num_relations
AttributeError: 'Logical_Fallacy_Dataset' object has no attribute 'num_relations'
Data(x=[11, 768], edge_index=[2, 20], edge_attr=[20, 1], y=[1])
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:54, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 54 x = self.conv1(x, edge_index, edge_attr)
     56 x = F.relu(x)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    210 assert edge_attr is not None
--> 211 edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                           self.out_channels)
    213 key_j += edge_attr
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    114 r"""
    115 Args:
    116     x (Tensor): The features.
    117 """
--> 118 return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float
During handling of the above exception, another exception occurred:
KeyError                                  Traceback (most recent call last)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/data/storage.py:61, in BaseStorage.__getattr__(self, key)
     60 try:
---> 61     return self[key]
     62 except KeyError:
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/data/storage.py:81, in BaseStorage.__getitem__(self, key)
     80 def __getitem__(self, key: str) -> Any:
---> 81     return self._mapping[key]
KeyError: 'num_relations'
During handling of the above exception, another exception occurred:
AttributeError                            Traceback (most recent call last)
Cell In [10], line 1
----> 1 dataset[0].num_relations
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/data/data.py:428, in Data.__getattr__(self, key)
    422 if '_store' not in self.__dict__:
    423     raise RuntimeError(
    424         "The 'data' object was created by an older version of PyG. "
    425         "If this error occurred while loading an already existing "
    426         "dataset, remove the 'processed/' directory in the dataset's "
    427         "root folder and try again.")
--> 428 return getattr(self._store, key)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/data/storage.py:63, in BaseStorage.__getattr__(self, key)
     61     return self[key]
     62 except KeyError:
---> 63     raise AttributeError(
     64         f"'{self.__class__.__name__}' object has no attribute '{key}'")
AttributeError: 'GlobalStorage' object has no attribute 'num_relations'