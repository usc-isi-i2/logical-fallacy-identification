Number of training graphs: 1479
Number of test graphs: 370
module 'torch' has no attribute 'TensorLong'
Python 3.10.4 (main, Mar 31 2022, 08:41:55) [GCC 7.5.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.5.0 -- An enhanced Interactive Python. Type '?' for help.
AttributeError("module 'torch' has no attribute 'TensorLong'")
Traceback (most recent call last):
  File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53 in forward
    x = x.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
  Cell In [2], line 2
    edge_index = edge_index.type(torch.LongTensor)
    ^
IndentationError: unexpected indent
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
RuntimeError                              Traceback (most recent call last)
Cell In [6], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:171, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    168 if isinstance(x, Tensor):
    169     x: PairTensor = (x, x)
--> 171 query = self.lin_query(x[1]).view(-1, H, C)
    172 key = self.lin_key(x[0]).view(-1, H, C)
    173 value = self.lin_value(x[0]).view(-1, H, C)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    113 def forward(self, x: Tensor) -> Tensor:
    114     r"""
    115     Args:
    116         x (Tensor): The features.
    117     """
--> 118     return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Float but found Long
'torch.FloatTensor'
'torch.FloatTensor'
'torch.FloatTensor'
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
ValueError                                Traceback (most recent call last)
Cell In [13], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    173 value = self.lin_value(x[0]).view(-1, H, C)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
    180 self._alpha = None
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:328, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    325     if res is not None:
    326         edge_index, size, kwargs = res
--> 328 size = self.__check_input__(edge_index, size)
    330 # Run "fused" message and aggregation (if applicable).
    331 if (isinstance(edge_index, SparseTensor) and self.fuse
    332         and not self.explain):
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:187, in MessagePassing.__check_input__(self, edge_index, size)
    185 if isinstance(edge_index, Tensor):
    186     if not edge_index.dtype == torch.long:
--> 187         raise ValueError(f"Expected 'edge_index' to be of type "
    188                          f"'torch.long' (got '{edge_index.dtype}')")
    189     if edge_index.dim() != 2:
    190         raise ValueError(f"Expected 'edge_index' to be two-dimensional"
    191                          f" (got {edge_index.dim()} dimensions)")
ValueError: Expected 'edge_index' to be of type 'torch.long' (got 'torch.float32')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
ValueError                                Traceback (most recent call last)
Cell In [15], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    173 value = self.lin_value(x[0]).view(-1, H, C)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
    180 self._alpha = None
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:328, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    325     if res is not None:
    326         edge_index, size, kwargs = res
--> 328 size = self.__check_input__(edge_index, size)
    330 # Run "fused" message and aggregation (if applicable).
    331 if (isinstance(edge_index, SparseTensor) and self.fuse
    332         and not self.explain):
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:187, in MessagePassing.__check_input__(self, edge_index, size)
    185 if isinstance(edge_index, Tensor):
    186     if not edge_index.dtype == torch.long:
--> 187         raise ValueError(f"Expected 'edge_index' to be of type "
    188                          f"'torch.long' (got '{edge_index.dtype}')")
    189     if edge_index.dim() != 2:
    190         raise ValueError(f"Expected 'edge_index' to be two-dimensional"
    191                          f" (got {edge_index.dim()} dimensions)")
ValueError: Expected 'edge_index' to be of type 'torch.long' (got 'torch.float32')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
RuntimeError                              Traceback (most recent call last)
Cell In [19], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    173 value = self.lin_value(x[0]).view(-1, H, C)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
    180 self._alpha = None
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    372     if res is not None:
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
    376     res = hook(self, (msg_kwargs, ), out)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    209 if self.lin_edge is not None:
    210     assert edge_attr is not None
--> 211     edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                               self.out_channels)
    213     key_j += edge_attr
    215 alpha = (query_i * key_j).sum(dim=-1) / math.sqrt(self.out_channels)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    113 def forward(self, x: Tensor) -> Tensor:
    114     r"""
    115     Args:
    116         x (Tensor): The features.
    117     """
--> 118     return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
RuntimeError                              Traceback (most recent call last)
Cell In [21], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:171, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    168 if isinstance(x, Tensor):
    169     x: PairTensor = (x, x)
--> 171 query = self.lin_query(x[1]).view(-1, H, C)
    172 key = self.lin_key(x[0]).view(-1, H, C)
    173 value = self.lin_value(x[0]).view(-1, H, C)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    113 def forward(self, x: Tensor) -> Tensor:
    114     r"""
    115     Args:
    116         x (Tensor): The features.
    117     """
--> 118     return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Float but found Long
'torch.FloatTensor'
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/logical-fallacy-identification/AMR_parsers_and_graphs/gcn.py:53, in NormalNet.forward(self, data, batch)
     52 x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
---> 53 x = x.type(torch.TensorLong)
     54 edge_index = edge_index.type(torch.TensorLong)
AttributeError: module 'torch' has no attribute 'TensorLong'
During handling of the above exception, another exception occurred:
RuntimeError                              Traceback (most recent call last)
Cell In [24], line 1
----> 1 x = self.conv1(x, edge_index, edge_attr)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:176, in TransformerConv.forward(self, x, edge_index, edge_attr, return_attention_weights)
    173 value = self.lin_value(x[0]).view(-1, H, C)
    175 # propagate_type: (query: Tensor, key:Tensor, value: Tensor, edge_attr: OptTensor) # noqa
--> 176 out = self.propagate(edge_index, query=query, key=key, value=value,
    177                      edge_attr=edge_attr, size=None)
    179 alpha = self._alpha
    180 self._alpha = None
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/message_passing.py:374, in MessagePassing.propagate(self, edge_index, size, **kwargs)
    372     if res is not None:
    373         msg_kwargs = res[0] if isinstance(res, tuple) else res
--> 374 out = self.message(**msg_kwargs)
    375 for hook in self._message_forward_hooks.values():
    376     res = hook(self, (msg_kwargs, ), out)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/conv/transformer_conv.py:211, in TransformerConv.message(self, query_i, key_j, value_j, edge_attr, index, ptr, size_i)
    209 if self.lin_edge is not None:
    210     assert edge_attr is not None
--> 211     edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
    212                                               self.out_channels)
    213     key_j += edge_attr
    215 alpha = (query_i * key_j).sum(dim=-1) / math.sqrt(self.out_channels)
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch/nn/modules/module.py:1110, in Module._call_impl(self, *input, **kwargs)
   1106 # If we don't have any hooks, we want to skip the rest of the logic in
   1107 # this function, and just call forward.
   1108 if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks
   1109         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1110     return forward_call(*input, **kwargs)
   1111 # Do not call functions when jit is used
   1112 full_backward_hooks, non_full_backward_hooks = [], []
File ~/anaconda3/envs/general/lib/python3.10/site-packages/torch_geometric/nn/dense/linear.py:118, in Linear.forward(self, x)
    113 def forward(self, x: Tensor) -> Tensor:
    114     r"""
    115     Args:
    116         x (Tensor): The features.
    117     """
--> 118     return F.linear(x, self.weight, self.bias)
RuntimeError: expected scalar type Long but found Float