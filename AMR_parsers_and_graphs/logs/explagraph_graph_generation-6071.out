/cluster/raid/home/zhivar.sourati/logical-fallacy-identification/AMR_parsers_and_graphs/ExplaGraphs
Wed Sep 21 08:31:39 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  A100-PCIE-40GB      Off  | 00000000:27:00.0 Off |                    0 |
| N/A   28C    P0    33W / 250W |      0MiB / 40536MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
0
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
11
0
1
2
3
4
5
6
7
8
9
11
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/df7afd8bbf8446159a0adcee2a36ba86-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/df7afd8bbf8446159a0adcee2a36ba86-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 16.6153 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -16.5526 iterations 8
Cbc0038I Solution found of -13.9719
Cbc0038I Cleaned solution of -13.9719
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -13.9719 to -14.2855 (0.01 seconds)
Cbc0038I Round again with cutoff of -14.5185
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -16.5526 iterations 0
Cbc0038I Pass   3: suminf.    0.42445 (1) obj. -14.5185 iterations 5
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -14.8424 iterations 8
Cbc0038I Solution found of -14.5252
Cbc0038I Cleaned solution of -14.5252
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous of which 2 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 3 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -14.5252 to -14.5522 (0.01 seconds)
Cbc0038I Round again with cutoff of -14.9649
Cbc0038I Pass   5: suminf.    0.80000 (4) obj. -16.5526 iterations 0
Cbc0038I Pass   6: suminf.    0.46242 (2) obj. -14.9649 iterations 11
Cbc0038I Pass   7: suminf.    0.33788 (2) obj. -14.9649 iterations 2
Cbc0038I Pass   8: suminf.    0.20000 (1) obj. -15.219 iterations 8
Cbc0038I Pass   9: suminf.    0.46107 (1) obj. -14.9649 iterations 2
Cbc0038I Pass  10: suminf.    0.44845 (2) obj. -14.9649 iterations 3
Cbc0038I Pass  11: suminf.    0.32190 (2) obj. -14.9649 iterations 1
Cbc0038I Pass  12: suminf.    0.00000 (0) obj. -15.1981 iterations 7
Cbc0038I Solution found of -15.1981
Cbc0038I Cleaned solution of -15.1981
Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 12 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -15.6233
Cbc0038I Pass  13: suminf.    0.80000 (4) obj. -16.5526 iterations 0
Cbc0038I Pass  14: suminf.    0.64725 (3) obj. -15.6233 iterations 11
Cbc0038I Pass  15: suminf.    0.49079 (3) obj. -15.6233 iterations 5
Cbc0038I Pass  16: suminf.    0.79915 (2) obj. -15.6233 iterations 7
Cbc0038I Pass  17: suminf.    0.40000 (2) obj. -15.761 iterations 6
Cbc0038I Pass  18: suminf.    0.54564 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  19: suminf.    0.76141 (3) obj. -15.6233 iterations 3
Cbc0038I Pass  20: suminf.    0.34911 (2) obj. -15.6233 iterations 5
Cbc0038I Pass  21: suminf.    0.22505 (2) obj. -15.6233 iterations 2
Cbc0038I Pass  22: suminf.    0.62482 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  23: suminf.    0.91034 (3) obj. -15.6233 iterations 19
Cbc0038I Pass  24: suminf.    0.63945 (3) obj. -15.6233 iterations 9
Cbc0038I Pass  25: suminf.    0.95068 (3) obj. -15.6233 iterations 14
Cbc0038I Pass  26: suminf.    0.50814 (2) obj. -15.6233 iterations 1
Cbc0038I Pass  27: suminf.    0.32443 (2) obj. -15.6233 iterations 2
Cbc0038I Pass  28: suminf.    0.62482 (2) obj. -15.6233 iterations 8
Cbc0038I Pass  29: suminf.    0.22505 (2) obj. -15.6233 iterations 2
Cbc0038I Pass  30: suminf.    0.33184 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  31: suminf.    0.22505 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  32: suminf.    0.69224 (2) obj. -15.6233 iterations 4
Cbc0038I Pass  33: suminf.    0.40000 (2) obj. -15.761 iterations 5
Cbc0038I Pass  34: suminf.    0.54564 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  35: suminf.    0.67030 (2) obj. -15.6233 iterations 4
Cbc0038I Pass  36: suminf.    0.74019 (3) obj. -15.6233 iterations 12
Cbc0038I Pass  37: suminf.    0.60000 (3) obj. -15.6233 iterations 11
Cbc0038I Pass  38: suminf.    0.66130 (2) obj. -15.6233 iterations 5
Cbc0038I Pass  39: suminf.    0.40000 (2) obj. -15.7544 iterations 8
Cbc0038I Pass  40: suminf.    0.53869 (2) obj. -15.6233 iterations 3
Cbc0038I Pass  41: suminf.    0.63541 (2) obj. -15.6233 iterations 4
Cbc0038I Pass  42: suminf.    0.63541 (2) obj. -15.6233 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 19 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -15.1981 - took 0.01 seconds
Cbc0012I Integer solution of -15.198077 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 8 rows 10 columns
Cbc0031I 8 added rows had average density of 23.5
Cbc0013I At root node, 8 cuts changed objective from -16.615348 to -15.287656 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 31 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 802 row cuts average 32.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 6.2 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 10 row cuts average 17.7 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 14 row cuts average 2.3 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 42 row cuts average 21.3 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -15.198077 best solution, best possible -15.287656 (0.09 seconds)
Cbc0001I Search completed - best objective -15.19807711616153, took 1826 iterations and 12 nodes (0.12 seconds)
Cbc0032I Strong branching done 178 times (1119 iterations), fathomed 4 nodes and fixed 1 variables
Cbc0035I Maximum depth 5, 37 variables fixed on reduced cost
Cuts at root node changed objective from -16.6153 to -15.2877
Probing was tried 100 times and created 31 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 130 times and created 908 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
Knapsack was tried 130 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
FlowCover was tried 100 times and created 14 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 130 times and created 111 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                15.19807712
Enumerated nodes:               12
Total iterations:               1826
Time (CPU seconds):             0.10
Time (Wallclock seconds):       0.12

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.13

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/369e0527dd5e4ece99ae23439d456c14-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/369e0527dd5e4ece99ae23439d456c14-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 51 COLUMNS
At line 265 RHS
At line 312 BOUNDS
At line 354 ENDATA
Problem MODEL has 46 rows, 41 columns and 107 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 9.45373 - 0.00 seconds
Cgl0004I processed model has 16 rows, 24 columns (24 integer (12 of which binary)) and 60 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.75
Cbc0038I Pass   1: suminf.    0.75000 (3) obj. -9.33708 iterations 7
Cbc0038I Solution found of -7.52696
Cbc0038I Cleaned solution of -7.52696
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -7.52696 to -7.99353 (0.00 seconds)
Cbc0038I Round again with cutoff of -8.13956
Cbc0038I Pass   2: suminf.    0.75000 (3) obj. -9.33708 iterations 0
Cbc0038I Pass   3: suminf.    0.37070 (1) obj. -8.13956 iterations 4
Cbc0038I Pass   4: suminf.    0.25000 (1) obj. -8.37715 iterations 2
Cbc0038I Pass   5: suminf.    0.14373 (1) obj. -8.13956 iterations 3
Cbc0038I Pass   6: suminf.    0.25000 (1) obj. -8.68946 iterations 7
Cbc0038I Pass   7: suminf.    0.17140 (1) obj. -8.13956 iterations 2
Cbc0038I Pass   8: suminf.    0.29503 (2) obj. -8.13956 iterations 2
Cbc0038I Pass   9: suminf.    0.25000 (1) obj. -8.18258 iterations 1
Cbc0038I Pass  10: suminf.    0.29527 (1) obj. -8.13956 iterations 1
Cbc0038I Pass  11: suminf.    0.29503 (2) obj. -8.13956 iterations 1
Cbc0038I Pass  12: suminf.    0.30617 (2) obj. -8.13956 iterations 2
Cbc0038I Pass  13: suminf.    0.67441 (2) obj. -8.13956 iterations 3
Cbc0038I Pass  14: suminf.    0.55143 (2) obj. -8.13956 iterations 1
Cbc0038I Solution found of -8.44659
Cbc0038I Cleaned solution of -8.44659
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 9 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -8.64803
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  15: suminf.    0.75000 (3) obj. -9.33708 iterations 0
Cbc0038I Pass  16: suminf.    0.67511 (2) obj. -8.64803 iterations 3
Cbc0038I Pass  17: suminf.    0.54452 (2) obj. -8.64803 iterations 3
Cbc0038I Pass  18: suminf.    0.25000 (1) obj. -8.68946 iterations 8
Cbc0038I Pass  19: suminf.    0.29360 (1) obj. -8.64803 iterations 2
Cbc0038I Pass  20: suminf.    0.50000 (2) obj. -9.05925 iterations 5
Cbc0038I Pass  21: suminf.    0.29360 (1) obj. -8.64803 iterations 3
Cbc0038I Pass  22: suminf.    0.66774 (2) obj. -8.64803 iterations 2
Cbc0038I Pass  23: suminf.    1.47637 (5) obj. -8.64803 iterations 10
Cbc0038I Pass  24: suminf.    0.25000 (1) obj. -8.70292 iterations 3
Cbc0038I Pass  25: suminf.    0.30776 (1) obj. -8.64803 iterations 1
Cbc0038I Pass  26: suminf.    0.33798 (1) obj. -8.64803 iterations 8
Cbc0038I Pass  27: suminf.    0.25000 (1) obj. -8.7155 iterations 4
Cbc0038I Pass  28: suminf.    0.32099 (1) obj. -8.64803 iterations 1
Cbc0038I Pass  29: suminf.    0.41371 (1) obj. -8.64803 iterations 2
Cbc0038I Pass  30: suminf.    0.41371 (1) obj. -8.64803 iterations 0
Cbc0038I Pass  31: suminf.    0.41371 (1) obj. -8.64803 iterations 0
Cbc0038I Pass  32: suminf.    0.41371 (1) obj. -8.64803 iterations 0
Cbc0038I Pass  33: suminf.    0.41371 (1) obj. -8.64803 iterations 0
Cbc0038I Pass  34: suminf.    0.41371 (1) obj. -8.64803 iterations 0
Cbc0038I Pass  35: suminf.    0.87515 (2) obj. -8.64803 iterations 8
Cbc0038I Pass  36: suminf.    0.87515 (2) obj. -8.64803 iterations 1
Cbc0038I Pass  37: suminf.    0.75000 (2) obj. -8.87005 iterations 5
Cbc0038I Pass  38: suminf.    0.52062 (7) obj. -8.64803 iterations 4
Cbc0038I Pass  39: suminf.    1.23702 (4) obj. -8.64803 iterations 3
Cbc0038I Pass  40: suminf.    1.23702 (4) obj. -8.64803 iterations 0
Cbc0038I Pass  41: suminf.    1.23702 (4) obj. -8.64803 iterations 0
Cbc0038I Pass  42: suminf.    1.23702 (4) obj. -8.64803 iterations 1
Cbc0038I Pass  43: suminf.    1.06881 (6) obj. -8.64803 iterations 4
Cbc0038I Pass  44: suminf.    0.86031 (2) obj. -8.64803 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 13 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -8.44659 to -8.46005 (0.01 seconds)
Cbc0038I Round again with cutoff of -8.88974
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 4
Cbc0038I Pass  44: suminf.    0.75000 (3) obj. -9.33708 iterations 0
Cbc0038I Pass  45: suminf.    0.56207 (2) obj. -8.88974 iterations 3
Cbc0038I Pass  46: suminf.    0.50000 (2) obj. -9.05925 iterations 5
Cbc0038I Pass  47: suminf.    0.64235 (3) obj. -8.88974 iterations 5
Cbc0038I Pass  48: suminf.    0.40910 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  49: suminf.    0.63552 (2) obj. -8.88974 iterations 5
Cbc0038I Pass  50: suminf.    0.36817 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  51: suminf.    0.66147 (2) obj. -8.88974 iterations 5
Cbc0038I Pass  52: suminf.    0.43569 (2) obj. -8.88974 iterations 1
Cbc0038I Pass  53: suminf.    0.62562 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  54: suminf.    0.43569 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  55: suminf.    0.56207 (2) obj. -8.88974 iterations 7
Cbc0038I Pass  56: suminf.    0.50000 (2) obj. -9.05925 iterations 3
Cbc0038I Pass  57: suminf.    0.64235 (3) obj. -8.88974 iterations 4
Cbc0038I Pass  58: suminf.    0.40910 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  59: suminf.    0.63552 (2) obj. -8.88974 iterations 5
Cbc0038I Pass  60: suminf.    0.36817 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  61: suminf.    0.70730 (2) obj. -8.88974 iterations 3
Cbc0038I Pass  62: suminf.    0.50000 (2) obj. -9.07356 iterations 2
Cbc0038I Pass  63: suminf.    0.64672 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  64: suminf.    0.43569 (2) obj. -8.88974 iterations 1
Cbc0038I Pass  65: suminf.    0.40910 (2) obj. -8.88974 iterations 4
Cbc0038I Pass  66: suminf.    0.63552 (2) obj. -8.88974 iterations 5
Cbc0038I Pass  67: suminf.    0.36817 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  68: suminf.    0.36817 (2) obj. -8.88974 iterations 1
Cbc0038I Pass  69: suminf.    0.36817 (2) obj. -8.88974 iterations 1
Cbc0038I Pass  70: suminf.    0.36817 (2) obj. -8.88974 iterations 0
Cbc0038I Pass  71: suminf.    0.38164 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  72: suminf.    0.36817 (2) obj. -8.88974 iterations 2
Cbc0038I Pass  73: suminf.    0.36817 (2) obj. -8.88974 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 11 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -8.46005 - took 0.01 seconds
Cbc0012I Integer solution of -8.4600476 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 16 rows 24 columns, reduced to 4 rows 6 columns
Cbc0031I 6 added rows had average density of 14.5
Cbc0013I At root node, 6 cuts changed objective from -9.4537263 to -8.5768543 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7 row cuts average 4.9 elements, 7 column cuts (7 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 730 row cuts average 17.8 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 6 row cuts average 13.7 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 59 row cuts average 14.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 62 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -8.4600476 best solution, best possible -8.5768543 (0.06 seconds)
Cbc0001I Search completed - best objective -8.46004757657653, took 1251 iterations and 2 nodes (0.06 seconds)
Cbc0032I Strong branching done 24 times (89 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Cuts at root node changed objective from -9.45373 to -8.57685
Probing was tried 106 times and created 34 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Gomory was tried 105 times and created 762 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Knapsack was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 6 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 105 times and created 118 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 105 times and created 63 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)

Result - Optimal solution found

Objective value:                8.46004758
Enumerated nodes:               2
Total iterations:               1251
Time (CPU seconds):             0.05
Time (Wallclock seconds):       0.06

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.06

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/a2d6b4386ad04b6ca98ab9cf51591af6-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/a2d6b4386ad04b6ca98ab9cf51591af6-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 109 COLUMNS
At line 619 RHS
At line 724 BOUNDS
At line 822 ENDATA
Problem MODEL has 104 rows, 97 columns and 255 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 24.3753 - 0.00 seconds
Cgl0004I processed model has 36 rows, 60 columns (60 integer (30 of which binary)) and 150 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.833333
Cbc0038I Pass   1: suminf.    0.83333 (5) obj. -24.3505 iterations 9
Cbc0038I Solution found of -20.9797
Cbc0038I Cleaned solution of -20.9797
Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous of which 5 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -20.9797 to -21.1283 (0.00 seconds)
Cbc0038I Round again with cutoff of -21.453
Cbc0038I Pass   2: suminf.    0.83333 (5) obj. -24.3505 iterations 0
Cbc0038I Pass   3: suminf.    0.48539 (1) obj. -21.453 iterations 6
Cbc0038I Pass   4: suminf.    0.16667 (1) obj. -21.9061 iterations 8
Cbc0038I Solution found of -21.662
Cbc0038I Cleaned solution of -21.662
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -22.2046
Cbc0038I Pass   5: suminf.    0.83333 (5) obj. -24.3505 iterations 0
Cbc0038I Pass   6: suminf.    0.59715 (2) obj. -22.2046 iterations 11
Cbc0038I Pass   7: suminf.    0.47840 (2) obj. -22.2046 iterations 2
Cbc0038I Pass   8: suminf.    0.33333 (1) obj. -22.3092 iterations 11
Cbc0038I Pass   9: suminf.    0.44555 (1) obj. -22.2046 iterations 2
Cbc0038I Pass  10: suminf.    0.38915 (2) obj. -22.2046 iterations 5
Cbc0038I Pass  11: suminf.    0.38915 (2) obj. -22.2046 iterations 0
Cbc0038I Pass  12: suminf.    0.86888 (2) obj. -22.2046 iterations 13
Cbc0038I Pass  13: suminf.    0.50000 (2) obj. -22.5039 iterations 9
Cbc0038I Pass  14: suminf.    0.82126 (2) obj. -22.2046 iterations 3
Cbc0038I Pass  15: suminf.    0.99117 (3) obj. -22.2046 iterations 29
Cbc0038I Pass  16: suminf.    0.76103 (3) obj. -22.2046 iterations 3
Cbc0038I Pass  17: suminf.    0.50000 (2) obj. -22.8652 iterations 13
Cbc0038I Pass  18: suminf.    0.16667 (1) obj. -22.6175 iterations 3
Cbc0038I Pass  19: suminf.    0.39011 (1) obj. -22.2046 iterations 3
Cbc0038I Pass  20: suminf.    0.46351 (2) obj. -22.2046 iterations 10
Cbc0038I Pass  21: suminf.    0.46351 (2) obj. -22.2046 iterations 0
Cbc0038I Solution found of -22.321
Cbc0038I Cleaned solution of -22.321
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 23 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -22.9373
Cbc0038I Pass  22: suminf.    0.83333 (5) obj. -24.3505 iterations 0
Cbc0038I Pass  23: suminf.    0.80286 (3) obj. -22.9373 iterations 14
Cbc0038I Pass  24: suminf.    0.62655 (3) obj. -22.9373 iterations 5
Cbc0038I Pass  25: suminf.    0.90888 (3) obj. -22.9373 iterations 12
Cbc0038I Pass  26: suminf.    1.09073 (6) obj. -22.9373 iterations 8
Cbc0038I Pass  27: suminf.    0.95274 (2) obj. -22.9373 iterations 9
Cbc0038I Pass  28: suminf.    0.95274 (2) obj. -22.9373 iterations 0
Cbc0038I Pass  29: suminf.    0.66667 (2) obj. -23.0618 iterations 9
Cbc0038I Pass  30: suminf.    1.52309 (8) obj. -22.9373 iterations 2
Cbc0038I Pass  31: suminf.    0.86834 (3) obj. -22.9373 iterations 11
Cbc0038I Pass  32: suminf.    0.83333 (3) obj. -23.5844 iterations 11
Cbc0038I Pass  33: suminf.    0.33333 (2) obj. -23.0676 iterations 8
Cbc0038I Pass  34: suminf.    0.62497 (3) obj. -22.9373 iterations 7
Cbc0038I Pass  35: suminf.    1.52309 (8) obj. -22.9373 iterations 4
Cbc0038I Pass  36: suminf.    0.86834 (3) obj. -22.9373 iterations 10
Cbc0038I Pass  37: suminf.    0.83333 (3) obj. -23.5844 iterations 11
Cbc0038I Pass  38: suminf.    0.81747 (2) obj. -22.9373 iterations 8
Cbc0038I Pass  39: suminf.    0.66667 (2) obj. -23.0618 iterations 7
Cbc0038I Pass  40: suminf.    1.52309 (8) obj. -22.9373 iterations 3
Cbc0038I Pass  41: suminf.    0.86834 (3) obj. -22.9373 iterations 10
Cbc0038I Pass  42: suminf.    0.83333 (3) obj. -23.5844 iterations 11
Cbc0038I Pass  43: suminf.    0.81747 (2) obj. -22.9373 iterations 8
Cbc0038I Pass  44: suminf.    0.66667 (2) obj. -23.0618 iterations 7
Cbc0038I Pass  45: suminf.    1.52309 (8) obj. -22.9373 iterations 3
Cbc0038I Pass  46: suminf.    0.86834 (3) obj. -22.9373 iterations 10
Cbc0038I Pass  47: suminf.    0.83333 (3) obj. -23.5844 iterations 11
Cbc0038I Pass  48: suminf.    0.81747 (2) obj. -22.9373 iterations 8
Cbc0038I Pass  49: suminf.    0.66667 (2) obj. -23.0618 iterations 7
Cbc0038I Pass  50: suminf.    1.52309 (8) obj. -22.9373 iterations 3
Cbc0038I Pass  51: suminf.    0.86834 (3) obj. -22.9373 iterations 10
Cbc0038I Rounding solution of -22.3831 is better than previous of -22.321

Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 20 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -23.3687
Cbc0038I Pass  51: suminf.    0.83333 (5) obj. -24.3505 iterations 0
Cbc0038I Pass  52: suminf.    0.72264 (4) obj. -23.3687 iterations 14
Cbc0038I Pass  53: suminf.    0.51643 (4) obj. -23.3687 iterations 8
Cbc0038I Pass  54: suminf.    3.01110 (9) obj. -23.3687 iterations 11
Cbc0038I Pass  55: suminf.    0.97913 (3) obj. -23.3687 iterations 5
Cbc0038I Pass  56: suminf.    0.75629 (3) obj. -23.3687 iterations 15
Cbc0038I Pass  57: suminf.    0.69895 (3) obj. -23.3687 iterations 7
Cbc0038I Pass  58: suminf.    0.96511 (3) obj. -23.3687 iterations 9
Cbc0038I Pass  59: suminf.    1.25807 (8) obj. -23.3687 iterations 9
Cbc0038I Pass  60: suminf.    0.54905 (4) obj. -23.3687 iterations 18
Cbc0038I Pass  61: suminf.    0.48355 (3) obj. -23.3687 iterations 4
Cbc0038I Pass  62: suminf.    2.13138 (8) obj. -23.3687 iterations 4
Cbc0038I Pass  63: suminf.    2.01749 (7) obj. -23.3687 iterations 1
Cbc0038I Pass  64: suminf.    0.75629 (3) obj. -23.3687 iterations 4
Cbc0038I Pass  65: suminf.    0.69895 (3) obj. -23.3687 iterations 2
Cbc0038I Pass  66: suminf.    0.96511 (3) obj. -23.3687 iterations 7
Cbc0038I Pass  67: suminf.    1.25807 (8) obj. -23.3687 iterations 7
Cbc0038I Pass  68: suminf.    0.80709 (3) obj. -23.3687 iterations 4
Cbc0038I Pass  69: suminf.    1.06317 (6) obj. -23.3687 iterations 10
Cbc0038I Pass  70: suminf.    1.89080 (7) obj. -23.3687 iterations 8
Cbc0038I Pass  71: suminf.    0.69895 (3) obj. -23.3687 iterations 2
Cbc0038I Pass  72: suminf.    0.96511 (3) obj. -23.3687 iterations 7
Cbc0038I Pass  73: suminf.    1.25807 (8) obj. -23.3687 iterations 7
Cbc0038I Pass  74: suminf.    1.95957 (7) obj. -23.3687 iterations 12
Cbc0038I Pass  75: suminf.    1.19211 (4) obj. -23.3687 iterations 18
Cbc0038I Pass  76: suminf.    0.50000 (3) obj. -23.4036 iterations 13
Cbc0038I Pass  77: suminf.    0.99641 (4) obj. -23.3687 iterations 9
Cbc0038I Pass  78: suminf.    0.82380 (4) obj. -23.3687 iterations 5
Cbc0038I Pass  79: suminf.    0.75629 (3) obj. -23.3687 iterations 11
Cbc0038I Pass  80: suminf.    0.69895 (3) obj. -23.3687 iterations 2
Cbc0038I Rounding solution of -22.5228 is better than previous of -22.3831

Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 25 rows 37 columns
Cbc0038I Mini branch and bound improved solution from -22.5228 to -22.5886 (0.05 seconds)
Cbc0038I Round again with cutoff of -23.7714
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 6
Cbc0038I Pass  80: suminf.    0.83333 (5) obj. -24.3505 iterations 0
Cbc0038I Pass  81: suminf.    0.72616 (4) obj. -23.7714 iterations 12
Cbc0038I Pass  82: suminf.    0.66667 (4) obj. -23.8702 iterations 11
Cbc0038I Pass  83: suminf.    0.96421 (4) obj. -23.7714 iterations 11
Cbc0038I Pass  84: suminf.    1.82693 (8) obj. -23.7714 iterations 9
Cbc0038I Pass  85: suminf.    3.16439 (11) obj. -23.7714 iterations 9
Cbc0038I Pass  86: suminf.    1.31592 (7) obj. -23.7714 iterations 3
Cbc0038I Pass  87: suminf.    1.51818 (8) obj. -23.7714 iterations 6
Cbc0038I Pass  88: suminf.    1.18570 (4) obj. -23.7714 iterations 9
Cbc0038I Pass  89: suminf.    0.80248 (4) obj. -23.7714 iterations 8
Cbc0038I Pass  90: suminf.    1.23877 (4) obj. -23.7714 iterations 3
Cbc0038I Pass  91: suminf.    1.49272 (8) obj. -23.7714 iterations 13
Cbc0038I Pass  92: suminf.    1.33199 (4) obj. -23.7714 iterations 10
Cbc0038I Pass  93: suminf.    0.83333 (4) obj. -24.0546 iterations 12
Cbc0038I Pass  94: suminf.    1.05935 (4) obj. -23.7714 iterations 8
Cbc0038I Pass  95: suminf.    0.90761 (4) obj. -23.7714 iterations 11
Cbc0038I Pass  96: suminf.    0.99342 (4) obj. -23.7714 iterations 9
Cbc0038I Pass  97: suminf.    1.20501 (5) obj. -23.7714 iterations 17
Cbc0038I Pass  98: suminf.    2.11850 (9) obj. -23.7714 iterations 4
Cbc0038I Pass  99: suminf.    3.17823 (10) obj. -23.7714 iterations 12
Cbc0038I Pass 100: suminf.    0.77646 (5) obj. -23.7714 iterations 12
Cbc0038I Pass 101: suminf.    1.48841 (4) obj. -23.7714 iterations 14
Cbc0038I Pass 102: suminf.    0.80248 (4) obj. -23.7714 iterations 3
Cbc0038I Pass 103: suminf.    1.23877 (4) obj. -23.7714 iterations 3
Cbc0038I Pass 104: suminf.    0.98444 (4) obj. -23.7714 iterations 10
Cbc0038I Pass 105: suminf.    1.48262 (8) obj. -23.7714 iterations 10
Cbc0038I Pass 106: suminf.    1.51916 (8) obj. -23.7714 iterations 2
Cbc0038I Pass 107: suminf.    1.14493 (4) obj. -23.7714 iterations 9
Cbc0038I Pass 108: suminf.    1.48262 (8) obj. -23.7714 iterations 5
Cbc0038I Pass 109: suminf.    1.22344 (4) obj. -23.7714 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -22.5886 - took 0.05 seconds
Cbc0012I Integer solution of -22.588551 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 11 rows 14 columns
Cbc0031I 15 added rows had average density of 33.733333
Cbc0013I At root node, 15 cuts changed objective from -24.375328 to -23.664622 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 21 row cuts average 6.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1089 row cuts average 58.7 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 23 row cuts average 21.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 60 row cuts average 36.9 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 120 row cuts average 8.7 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -22.588551 best solution, best possible -23.664622 (0.19 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 18 rows 20 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 22 rows 27 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 15 rows 18 columns
Cbc0001I Search completed - best objective -22.58855139836654, took 8184 iterations and 268 nodes (0.51 seconds)
Cbc0032I Strong branching done 2832 times (19041 iterations), fathomed 82 nodes and fixed 170 variables
Cbc0035I Maximum depth 13, 683 variables fixed on reduced cost
Cuts at root node changed objective from -24.3753 to -23.6646
Probing was tried 100 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 406 times and created 1722 cuts of which 0 were active after adding rounds of cuts (0.040 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 23 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
TwoMirCuts was tried 100 times and created 60 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
ZeroHalf was tried 406 times and created 337 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)

Result - Optimal solution found

Objective value:                22.58855140
Enumerated nodes:               268
Total iterations:               8184
Time (CPU seconds):             0.48
Time (Wallclock seconds):       0.51

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.48   (Wallclock seconds):       0.51

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/3175208cb1b54660a814d57b3f8ad32f-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/3175208cb1b54660a814d57b3f8ad32f-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 109 COLUMNS
At line 619 RHS
At line 724 BOUNDS
At line 822 ENDATA
Problem MODEL has 104 rows, 97 columns and 255 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 25.5688 - 0.00 seconds
Cgl0004I processed model has 36 rows, 60 columns (60 integer (30 of which binary)) and 150 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.833333
Cbc0038I Pass   1: suminf.    0.83333 (5) obj. -25.5249 iterations 11
Cbc0038I Solution found of -22.237
Cbc0038I Cleaned solution of -22.237
Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous of which 5 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 3 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -22.237 to -22.5005 (0.00 seconds)
Cbc0038I Round again with cutoff of -22.8073
Cbc0038I Pass   2: suminf.    0.83333 (5) obj. -25.5249 iterations 0
Cbc0038I Pass   3: suminf.    0.41423 (1) obj. -22.8073 iterations 5
Cbc0038I Pass   4: suminf.    0.16667 (1) obj. -23.046 iterations 8
Cbc0038I Pass   5: suminf.    0.40810 (1) obj. -22.8073 iterations 2
Cbc0038I Pass   6: suminf.    2.34433 (6) obj. -22.8073 iterations 10
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. -22.8949 iterations 3
Cbc0038I Solution found of -22.8949
Cbc0038I Cleaned solution of -22.8949
Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous of which 1 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 9 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -22.8949 to -23.0233 (0.01 seconds)
Cbc0038I Round again with cutoff of -23.5324
Cbc0038I Pass   8: suminf.    0.83333 (5) obj. -25.5249 iterations 0
Cbc0038I Pass   9: suminf.    0.66120 (2) obj. -23.5324 iterations 10
Cbc0038I Pass  10: suminf.    0.56995 (2) obj. -23.5324 iterations 2
Cbc0038I Pass  11: suminf.    0.39536 (2) obj. -23.5324 iterations 7
Cbc0038I Pass  12: suminf.    0.16667 (1) obj. -23.6576 iterations 9
Cbc0038I Pass  13: suminf.    0.38110 (1) obj. -23.5324 iterations 5
Cbc0038I Pass  14: suminf.    0.60317 (5) obj. -23.5324 iterations 12
Cbc0038I Pass  15: suminf.    0.36254 (1) obj. -23.5324 iterations 5
Cbc0038I Pass  16: suminf.    0.56642 (3) obj. -23.5324 iterations 7
Cbc0038I Pass  17: suminf.    1.50259 (7) obj. -23.5324 iterations 12
Cbc0038I Pass  18: suminf.    0.51610 (2) obj. -23.5324 iterations 2
Cbc0038I Pass  19: suminf.    0.61893 (3) obj. -23.5324 iterations 13
Cbc0038I Pass  20: suminf.    0.50000 (2) obj. -23.6437 iterations 7
Cbc0038I Pass  21: suminf.    0.64736 (2) obj. -23.5324 iterations 10
Cbc0038I Pass  22: suminf.    0.40930 (3) obj. -23.5324 iterations 4
Cbc0038I Pass  23: suminf.    0.37997 (3) obj. -23.5324 iterations 3
Cbc0038I Pass  24: suminf.    0.43736 (3) obj. -23.5324 iterations 5
Cbc0038I Pass  25: suminf.    0.34220 (3) obj. -23.5324 iterations 1
Cbc0038I Pass  26: suminf.    0.72654 (2) obj. -23.5324 iterations 6
Cbc0038I Pass  27: suminf.    0.50000 (2) obj. -23.6437 iterations 13
Cbc0038I Pass  28: suminf.    0.64736 (2) obj. -23.5324 iterations 10
Cbc0038I Pass  29: suminf.    0.64202 (2) obj. -23.5324 iterations 12
Cbc0038I Pass  30: suminf.    0.62331 (2) obj. -23.5324 iterations 3
Cbc0038I Pass  31: suminf.    0.47191 (1) obj. -23.5324 iterations 11
Cbc0038I Pass  32: suminf.    0.33333 (1) obj. -23.5855 iterations 11
Cbc0038I Pass  33: suminf.    0.38675 (1) obj. -23.5324 iterations 6
Cbc0038I Pass  34: suminf.    0.64756 (3) obj. -23.5324 iterations 15
Cbc0038I Pass  35: suminf.    0.60457 (3) obj. -23.5324 iterations 8
Cbc0038I Pass  36: suminf.    0.59995 (3) obj. -23.5324 iterations 6
Cbc0038I Pass  37: suminf.    0.50480 (3) obj. -23.5324 iterations 1
Cbc0038I Rounding solution of -23.102 is better than previous of -23.0233

Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 21 rows 37 columns
Cbc0038I Mini branch and bound improved solution from -23.102 to -23.1483 (0.02 seconds)
Cbc0038I Round again with cutoff of -24.1433
Cbc0038I Pass  37: suminf.    0.83333 (5) obj. -25.5249 iterations 0
Cbc0038I Pass  38: suminf.    0.66316 (3) obj. -24.1433 iterations 12
Cbc0038I Pass  39: suminf.    0.61704 (3) obj. -24.1433 iterations 6
Cbc0038I Pass  40: suminf.    0.57675 (3) obj. -24.1433 iterations 8
Cbc0038I Pass  41: suminf.    0.48159 (3) obj. -24.1433 iterations 1
Cbc0038I Pass  42: suminf.    0.57619 (2) obj. -24.1433 iterations 6
Cbc0038I Pass  43: suminf.    0.79572 (6) obj. -24.1433 iterations 15
Cbc0038I Pass  44: suminf.    0.55778 (2) obj. -24.1433 iterations 6
Cbc0038I Pass  45: suminf.    1.19224 (4) obj. -24.1433 iterations 8
Cbc0038I Pass  46: suminf.    0.67933 (3) obj. -24.1433 iterations 7
Cbc0038I Pass  47: suminf.    0.57063 (2) obj. -24.1433 iterations 7
Cbc0038I Pass  48: suminf.    1.06583 (8) obj. -24.1433 iterations 9
Cbc0038I Pass  49: suminf.    0.39371 (3) obj. -24.1433 iterations 6
Cbc0038I Pass  50: suminf.    0.57619 (2) obj. -24.1433 iterations 7
Cbc0038I Pass  51: suminf.    0.79572 (6) obj. -24.1433 iterations 18
Cbc0038I Pass  52: suminf.    0.55778 (2) obj. -24.1433 iterations 7
Cbc0038I Pass  53: suminf.    1.52478 (6) obj. -24.1433 iterations 4
Cbc0038I Pass  54: suminf.    0.75956 (3) obj. -24.1433 iterations 3
Cbc0038I Pass  55: suminf.    0.50000 (2) obj. -24.2661 iterations 14
Cbc0038I Pass  56: suminf.    0.66248 (2) obj. -24.1433 iterations 10
Cbc0038I Pass  57: suminf.    0.33646 (2) obj. -24.1433 iterations 12
Cbc0038I Pass  58: suminf.    0.74251 (6) obj. -24.1433 iterations 9
Cbc0038I Pass  59: suminf.    0.34944 (2) obj. -24.1433 iterations 1
Cbc0038I Pass  60: suminf.    0.76266 (2) obj. -24.1433 iterations 4
Cbc0038I Pass  61: suminf.    1.21772 (8) obj. -24.1433 iterations 5
Cbc0038I Pass  62: suminf.    0.93042 (3) obj. -24.1433 iterations 13
Cbc0038I Pass  63: suminf.    0.64178 (3) obj. -24.1433 iterations 6
Cbc0038I Pass  64: suminf.    0.76266 (2) obj. -24.1433 iterations 10
Cbc0038I Pass  65: suminf.    0.50000 (2) obj. -24.2661 iterations 15
Cbc0038I Pass  66: suminf.    0.66248 (2) obj. -24.1433 iterations 10
Cbc0038I Rounding solution of -23.19 is better than previous of -23.1483

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 27 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -24.571
Cbc0038I Pass  66: suminf.    0.83333 (5) obj. -25.5249 iterations 0
Cbc0038I Pass  67: suminf.    0.50196 (4) obj. -24.571 iterations 11
Cbc0038I Pass  68: suminf.    0.50000 (3) obj. -24.5799 iterations 11
Cbc0038I Pass  69: suminf.    0.51189 (3) obj. -24.571 iterations 10
Cbc0038I Pass  70: suminf.    0.93117 (7) obj. -24.571 iterations 15
Cbc0038I Pass  71: suminf.    0.50000 (3) obj. -24.7049 iterations 9
Cbc0038I Pass  72: suminf.    0.67736 (3) obj. -24.571 iterations 9
Cbc0038I Pass  73: suminf.    0.63893 (3) obj. -24.571 iterations 8
Cbc0038I Pass  74: suminf.    0.76563 (4) obj. -24.571 iterations 4
Cbc0038I Pass  75: suminf.    0.72200 (3) obj. -24.571 iterations 7
Cbc0038I Pass  76: suminf.    0.74711 (3) obj. -24.571 iterations 5
Cbc0038I Pass  77: suminf.    0.89959 (4) obj. -24.571 iterations 15
Cbc0038I Pass  78: suminf.    0.83027 (3) obj. -24.571 iterations 5
Cbc0038I Pass  79: suminf.    0.98664 (4) obj. -24.571 iterations 8
Cbc0038I Pass  80: suminf.    0.96265 (4) obj. -24.571 iterations 1
Cbc0038I Pass  81: suminf.    1.29924 (4) obj. -24.571 iterations 4
Cbc0038I Pass  82: suminf.    0.70458 (4) obj. -24.571 iterations 1
Cbc0038I Pass  83: suminf.    0.87371 (3) obj. -24.571 iterations 7
Cbc0038I Pass  84: suminf.    0.66667 (3) obj. -24.6583 iterations 15
Cbc0038I Pass  85: suminf.    0.80703 (3) obj. -24.571 iterations 13
Cbc0038I Pass  86: suminf.    0.87153 (3) obj. -24.571 iterations 4
Cbc0038I Pass  87: suminf.    1.10341 (4) obj. -24.571 iterations 10
Cbc0038I Pass  88: suminf.    0.83333 (3) obj. -24.5741 iterations 16
Cbc0038I Pass  89: suminf.    0.83835 (3) obj. -24.571 iterations 9
Cbc0038I Pass  90: suminf.    0.88900 (3) obj. -24.571 iterations 5
Cbc0038I Pass  91: suminf.    1.12268 (4) obj. -24.571 iterations 6
Cbc0038I Pass  92: suminf.    2.08982 (7) obj. -24.571 iterations 5
Cbc0038I Pass  93: suminf.    1.33939 (5) obj. -24.571 iterations 13
Cbc0038I Pass  94: suminf.    0.95400 (5) obj. -24.571 iterations 11
Cbc0038I Pass  95: suminf.    0.95945 (3) obj. -24.571 iterations 13
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -23.19 - took 0.06 seconds
Cbc0012I Integer solution of -23.189991 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 9 rows 11 columns
Cbc0031I 14 added rows had average density of 45.428571
Cbc0013I At root node, 14 cuts changed objective from -25.568789 to -24.56383 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 18 row cuts average 6.8 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 949 row cuts average 58.7 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 14 row cuts average 17.6 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 55 row cuts average 39.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 83 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -23.189991 best solution, best possible -24.56383 (0.20 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 14 rows 19 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 21 rows 26 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 18 rows 23 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 19 rows 24 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 15 rows 19 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 17 rows 19 columns
Cbc0001I Search completed - best objective -23.18999118357903, took 15392 iterations and 894 nodes (0.83 seconds)
Cbc0032I Strong branching done 5852 times (35638 iterations), fathomed 214 nodes and fixed 342 variables
Cbc0041I Maximum depth 20, 1507 variables fixed on reduced cost (complete fathoming 24 times, 178 nodes taking 801 iterations)
Cuts at root node changed objective from -25.5688 to -24.5638
Probing was tried 100 times and created 18 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 620 times and created 2020 cuts of which 0 were active after adding rounds of cuts (0.060 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 14 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
TwoMirCuts was tried 100 times and created 55 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 620 times and created 489 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)

Result - Optimal solution found

Objective value:                23.18999118
Enumerated nodes:               894
Total iterations:               15392
Time (CPU seconds):             0.79
Time (Wallclock seconds):       0.83

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.79   (Wallclock seconds):       0.83

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/4dc880e8bec54f9eaf060c4fc910d9cc-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/4dc880e8bec54f9eaf060c4fc910d9cc-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 147 COLUMNS
At line 853 RHS
At line 996 BOUNDS
At line 1131 ENDATA
Problem MODEL has 142 rows, 134 columns and 353 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 36.0798 - 0.00 seconds
Cgl0004I processed model has 49 rows, 84 columns (84 integer (42 of which binary)) and 210 elements
Cbc0038I Initial state - 6 integers unsatisfied sum - 0.857143
Cbc0038I Pass   1: suminf.    0.85714 (6) obj. -36.0509 iterations 14
Cbc0038I Solution found of -31.927
Cbc0038I Cleaned solution of -31.927
Cbc0038I Before mini branch and bound, 76 integers at bound fixed and 0 continuous of which 6 were internal integer and 0 internal continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -31.927 to -32.1294 (0.00 seconds)
Cbc0038I Round again with cutoff of -32.5245
Cbc0038I Pass   2: suminf.    0.85714 (6) obj. -36.0509 iterations 0
Cbc0038I Pass   3: suminf.    0.33525 (1) obj. -32.5245 iterations 7
Cbc0038I Pass   4: suminf.    0.14286 (1) obj. -32.687 iterations 5
Cbc0038I Pass   5: suminf.    0.31023 (1) obj. -32.5245 iterations 2
Cbc0038I Pass   6: suminf.    0.32339 (2) obj. -32.5245 iterations 13
Cbc0038I Pass   7: suminf.    0.22305 (2) obj. -32.5245 iterations 1
Cbc0038I Solution found of -33.058
Cbc0038I Cleaned solution of -33.058
Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 15 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -33.058 to -33.175 (0.01 seconds)
Cbc0038I Round again with cutoff of -33.7559
Cbc0038I Pass   8: suminf.    0.85714 (6) obj. -36.0509 iterations 0
Cbc0038I Pass   9: suminf.    0.66095 (3) obj. -33.7559 iterations 11
Cbc0038I Pass  10: suminf.    0.54240 (3) obj. -33.7559 iterations 3
Cbc0038I Pass  11: suminf.    0.62639 (2) obj. -33.7559 iterations 12
Cbc0038I Pass  12: suminf.    0.28571 (2) obj. -33.9544 iterations 11
Cbc0038I Pass  13: suminf.    0.49253 (2) obj. -33.7559 iterations 5
Cbc0038I Pass  14: suminf.    0.56926 (2) obj. -33.7559 iterations 5
Cbc0038I Pass  15: suminf.    1.06402 (4) obj. -33.7559 iterations 27
Cbc0038I Pass  16: suminf.    0.94522 (4) obj. -33.7559 iterations 9
Cbc0038I Pass  17: suminf.    0.52006 (3) obj. -33.7559 iterations 11
Cbc0038I Pass  18: suminf.    0.28571 (2) obj. -33.837 iterations 8
Cbc0038I Pass  19: suminf.    0.37023 (2) obj. -33.7559 iterations 6
Cbc0038I Pass  20: suminf.    0.58361 (3) obj. -33.7559 iterations 10
Cbc0038I Pass  21: suminf.    2.38162 (7) obj. -33.7559 iterations 5
Cbc0038I Pass  22: suminf.    0.57826 (2) obj. -33.7559 iterations 5
Cbc0038I Pass  23: suminf.    0.45391 (2) obj. -33.7559 iterations 2
Cbc0038I Pass  24: suminf.    0.29242 (5) obj. -33.7559 iterations 16
Cbc0038I Pass  25: suminf.    0.28577 (1) obj. -33.7559 iterations 3
Cbc0038I Pass  26: suminf.    0.61655 (3) obj. -33.7559 iterations 26
Cbc0038I Pass  27: suminf.    0.47404 (3) obj. -33.7559 iterations 3
Cbc0038I Pass  28: suminf.    0.51357 (2) obj. -33.7559 iterations 5
Cbc0038I Pass  29: suminf.    0.71429 (2) obj. -34.1422 iterations 14
Cbc0038I Pass  30: suminf.    0.28571 (1) obj. -33.8126 iterations 3
Cbc0038I Pass  31: suminf.    0.34463 (1) obj. -33.7559 iterations 2
Cbc0038I Pass  32: suminf.    0.71365 (3) obj. -33.7559 iterations 8
Cbc0038I Pass  33: suminf.    0.60039 (3) obj. -33.7559 iterations 8
Cbc0038I Pass  34: suminf.    0.51357 (2) obj. -33.7559 iterations 4
Cbc0038I Pass  35: suminf.    0.71429 (2) obj. -34.1422 iterations 6
Cbc0038I Pass  36: suminf.    0.28571 (1) obj. -33.8126 iterations 3
Cbc0038I Pass  37: suminf.    0.34463 (1) obj. -33.7559 iterations 2
Cbc0038I Rounding solution of -33.4085 is better than previous of -33.175

Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 27 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -33.4085 to -33.4269 (0.02 seconds)
Cbc0038I Round again with cutoff of -34.4531
Cbc0038I Pass  37: suminf.    0.85714 (6) obj. -36.0509 iterations 0
Cbc0038I Pass  38: suminf.    0.80376 (4) obj. -34.4531 iterations 13
Cbc0038I Pass  39: suminf.    0.64022 (4) obj. -34.4531 iterations 6
Cbc0038I Pass  40: suminf.    0.88035 (4) obj. -34.4531 iterations 22
Cbc0038I Pass  41: suminf.    1.48899 (7) obj. -34.4531 iterations 2
Cbc0038I Pass  42: suminf.    1.11069 (4) obj. -34.4531 iterations 17
Cbc0038I Pass  43: suminf.    0.83936 (4) obj. -34.4531 iterations 11
Cbc0038I Pass  44: suminf.    1.10516 (3) obj. -34.4531 iterations 23
Cbc0038I Pass  45: suminf.    1.19358 (3) obj. -34.4531 iterations 20
Cbc0038I Pass  46: suminf.    1.19358 (3) obj. -34.4531 iterations 15
Cbc0038I Pass  47: suminf.    0.86920 (3) obj. -34.4531 iterations 22
Cbc0038I Pass  48: suminf.    0.51793 (3) obj. -34.4531 iterations 18
Cbc0038I Pass  49: suminf.    0.49292 (3) obj. -34.4531 iterations 1
Cbc0038I Pass  50: suminf.    0.65875 (3) obj. -34.4531 iterations 1
Cbc0038I Pass  51: suminf.    0.61702 (4) obj. -34.4531 iterations 3
Cbc0038I Pass  52: suminf.    1.07129 (4) obj. -34.4531 iterations 20
Cbc0038I Pass  53: suminf.    0.88095 (4) obj. -34.4531 iterations 3
Cbc0038I Pass  54: suminf.    0.86920 (3) obj. -34.4531 iterations 4
Cbc0038I Pass  55: suminf.    0.51793 (3) obj. -34.4531 iterations 17
Cbc0038I Pass  56: suminf.    0.49292 (3) obj. -34.4531 iterations 1
Cbc0038I Pass  57: suminf.    0.65875 (3) obj. -34.4531 iterations 1
Cbc0038I Pass  58: suminf.    0.90818 (3) obj. -34.4531 iterations 6
Cbc0038I Pass  59: suminf.    1.12456 (3) obj. -34.4531 iterations 13
Cbc0038I Pass  60: suminf.    1.18538 (4) obj. -34.4531 iterations 6
Cbc0038I Pass  61: suminf.    1.19358 (3) obj. -34.4531 iterations 8
Cbc0038I Pass  62: suminf.    1.19358 (3) obj. -34.4531 iterations 2
Cbc0038I Pass  63: suminf.    0.86920 (3) obj. -34.4531 iterations 15
Cbc0038I Pass  64: suminf.    0.51793 (3) obj. -34.4531 iterations 15
Cbc0038I Pass  65: suminf.    0.49292 (3) obj. -34.4531 iterations 1
Cbc0038I Pass  66: suminf.    0.65875 (3) obj. -34.4531 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 23 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -33.4269 - took 0.04 seconds
Cbc0012I Integer solution of -33.426928 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 12 rows 16 columns
Cbc0031I 12 added rows had average density of 52.5
Cbc0013I At root node, 12 cuts changed objective from -36.079828 to -34.314265 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 723 row cuts average 80.1 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 71 row cuts average 41.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -33.426928 best solution, best possible -34.314265 (0.18 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 16 rows 20 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 22 rows 28 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 18 rows 25 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 19 rows 24 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 22 rows 29 columns
Cbc0001I Search completed - best objective -33.42692843452076, took 14078 iterations and 768 nodes (0.82 seconds)
Cbc0032I Strong branching done 5766 times (37187 iterations), fathomed 215 nodes and fixed 410 variables
Cbc0041I Maximum depth 23, 2100 variables fixed on reduced cost (complete fathoming 10 times, 112 nodes taking 672 iterations)
Cuts at root node changed objective from -36.0798 to -34.3143
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Gomory was tried 428 times and created 1079 cuts of which 0 were active after adding rounds of cuts (0.050 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
TwoMirCuts was tried 428 times and created 246 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                33.42692843
Enumerated nodes:               768
Total iterations:               14078
Time (CPU seconds):             0.79
Time (Wallclock seconds):       0.82

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.79   (Wallclock seconds):       0.82

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/23429f7efdc346c184829f7a9a217ae8-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/23429f7efdc346c184829f7a9a217ae8-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 17.2328 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -16.9543 iterations 7
Cbc0038I Solution found of -14.4515
Cbc0038I Cleaned solution of -14.4515
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 3 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -14.4515 to -15.8443 (0.00 seconds)
Cbc0038I Round again with cutoff of -15.9831
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -16.9543 iterations 0
Cbc0038I Pass   3: suminf.    0.46282 (3) obj. -15.9831 iterations 10
Cbc0038I Pass   4: suminf.    1.51976 (6) obj. -15.9831 iterations 3
Cbc0038I Pass   5: suminf.    0.31317 (2) obj. -15.9831 iterations 5
Cbc0038I Pass   6: suminf.    0.23926 (2) obj. -15.9831 iterations 1
Cbc0038I Pass   7: suminf.    0.20000 (1) obj. -16.1501 iterations 6
Cbc0038I Pass   8: suminf.    0.38251 (1) obj. -15.9831 iterations 2
Cbc0038I Pass   9: suminf.    0.23279 (1) obj. -15.9831 iterations 3
Cbc0038I Pass  10: suminf.    0.23279 (1) obj. -15.9831 iterations 0
Cbc0038I Pass  11: suminf.    0.20000 (1) obj. -16.2579 iterations 4
Cbc0038I Pass  12: suminf.    0.49963 (1) obj. -15.9831 iterations 2
Cbc0038I Pass  13: suminf.    0.48794 (1) obj. -15.9831 iterations 1
Cbc0038I Pass  14: suminf.    0.48794 (1) obj. -15.9831 iterations 0
Cbc0038I Pass  15: suminf.    0.60157 (2) obj. -15.9831 iterations 10
Cbc0038I Pass  16: suminf.    0.60000 (2) obj. -16.0121 iterations 9
Cbc0038I Pass  17: suminf.    0.74416 (2) obj. -15.9831 iterations 4
Cbc0038I Pass  18: suminf.    0.55985 (2) obj. -15.9831 iterations 3
Cbc0038I Pass  19: suminf.    0.20000 (1) obj. -16.2579 iterations 5
Cbc0038I Pass  20: suminf.    0.49963 (1) obj. -15.9831 iterations 3
Cbc0038I Pass  21: suminf.    0.51492 (2) obj. -15.9831 iterations 10
Cbc0038I Pass  22: suminf.    0.40000 (2) obj. -16.1826 iterations 9
Cbc0038I Pass  23: suminf.    0.35223 (2) obj. -15.9831 iterations 6
Cbc0038I Pass  24: suminf.    0.25763 (2) obj. -15.9831 iterations 1
Cbc0038I Pass  25: suminf.    0.20000 (1) obj. -16.2579 iterations 7
Cbc0038I Pass  26: suminf.    0.49963 (1) obj. -15.9831 iterations 3
Cbc0038I Pass  27: suminf.    0.48064 (1) obj. -15.9831 iterations 2
Cbc0038I Pass  28: suminf.    0.49749 (2) obj. -15.9831 iterations 2
Cbc0038I Pass  29: suminf.    0.35503 (2) obj. -15.9831 iterations 3
Cbc0038I Pass  30: suminf.    0.20000 (1) obj. -16.0686 iterations 9
Cbc0038I Pass  31: suminf.    0.28709 (1) obj. -15.9831 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -15.8443 - took 0.00 seconds
Cbc0012I Integer solution of -15.844264 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 10 added rows had average density of 11.5
Cbc0013I At root node, 10 cuts changed objective from -17.232841 to -15.97921 in 20 passes
Cbc0014I Cut generator 0 (Probing) - 50 row cuts average 2.9 elements, 27 column cuts (27 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 142 row cuts average 29.7 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 54 row cuts average 26.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective -15.84426366537824, took 253 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 6 variables fixed on reduced cost
Cuts at root node changed objective from -17.2328 to -15.9792
Probing was tried 20 times and created 77 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 19 times and created 142 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Knapsack was tried 19 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 19 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
FlowCover was tried 19 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 19 times and created 54 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                15.84426367
Enumerated nodes:               0
Total iterations:               253
Time (CPU seconds):             0.02
Time (Wallclock seconds):       0.02

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/a33598ba83c4462dadcd58c9871ef83d-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/a33598ba83c4462dadcd58c9871ef83d-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 109 COLUMNS
At line 619 RHS
At line 724 BOUNDS
At line 822 ENDATA
Problem MODEL has 104 rows, 97 columns and 255 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 26.3308 - 0.00 seconds
Cgl0004I processed model has 36 rows, 60 columns (60 integer (30 of which binary)) and 150 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.833333
Cbc0038I Pass   1: suminf.    0.83333 (5) obj. -26.3257 iterations 9
Cbc0038I Solution found of -22.8942
Cbc0038I Cleaned solution of -22.8942
Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous of which 5 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -22.8942 to -22.9245 (0.00 seconds)
Cbc0038I Round again with cutoff of -23.2652
Cbc0038I Pass   2: suminf.    0.83333 (5) obj. -26.3257 iterations 0
Cbc0038I Pass   3: suminf.    0.39913 (1) obj. -23.2652 iterations 6
Cbc0038I Pass   4: suminf.    0.16667 (1) obj. -23.6604 iterations 7
Cbc0038I Pass   5: suminf.    0.42972 (1) obj. -23.2652 iterations 1
Cbc0038I Pass   6: suminf.    0.67348 (3) obj. -23.2652 iterations 13
Cbc0038I Pass   7: suminf.    0.33333 (2) obj. -23.5734 iterations 5
Cbc0038I Pass   8: suminf.    0.65590 (2) obj. -23.2652 iterations 3
Cbc0038I Pass   9: suminf.    0.61845 (2) obj. -23.2652 iterations 1
Cbc0038I Pass  10: suminf.    0.52008 (5) obj. -23.2652 iterations 7
Cbc0038I Pass  11: suminf.    0.12097 (1) obj. -23.2652 iterations 3
Cbc0038I Pass  12: suminf.    0.50000 (1) obj. -23.5374 iterations 7
Cbc0038I Pass  13: suminf.    0.22206 (1) obj. -23.2652 iterations 2
Cbc0038I Pass  14: suminf.    0.95938 (3) obj. -23.2652 iterations 7
Cbc0038I Pass  15: suminf.    0.50000 (2) obj. -23.6392 iterations 10
Cbc0038I Pass  16: suminf.    0.74914 (2) obj. -23.2652 iterations 5
Cbc0038I Pass  17: suminf.    0.69462 (2) obj. -23.2652 iterations 2
Cbc0038I Pass  18: suminf.    0.96124 (2) obj. -23.2652 iterations 3
Cbc0038I Pass  19: suminf.    0.27926 (2) obj. -23.2652 iterations 4
Cbc0038I Pass  20: suminf.    0.27926 (2) obj. -23.2652 iterations 0
Cbc0038I Pass  21: suminf.    0.29245 (2) obj. -23.2652 iterations 7
Cbc0038I Pass  22: suminf.    0.24261 (2) obj. -23.2652 iterations 4
Cbc0038I Pass  23: suminf.    0.92481 (2) obj. -23.2652 iterations 3
Cbc0038I Pass  24: suminf.    0.99568 (3) obj. -23.2652 iterations 4
Cbc0038I Pass  25: suminf.    0.36905 (2) obj. -23.2652 iterations 3
Cbc0038I Pass  26: suminf.    0.58641 (2) obj. -23.2652 iterations 9
Cbc0038I Pass  27: suminf.    0.58641 (2) obj. -23.2652 iterations 1
Cbc0038I Pass  28: suminf.    0.22945 (1) obj. -23.2652 iterations 2
Cbc0038I Pass  29: suminf.    0.16667 (1) obj. -23.7575 iterations 3
Cbc0038I Pass  30: suminf.    0.28373 (1) obj. -23.2652 iterations 2
Cbc0038I Pass  31: suminf.    0.33166 (1) obj. -23.2652 iterations 7
Cbc0038I Rounding solution of -23.2551 is better than previous of -22.9245

Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 19 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -23.8783
Cbc0038I Pass  31: suminf.    0.83333 (5) obj. -26.3257 iterations 0
Cbc0038I Pass  32: suminf.    0.40059 (2) obj. -23.8783 iterations 9
Cbc0038I Pass  33: suminf.    0.37241 (2) obj. -23.8783 iterations 2
Cbc0038I Pass  34: suminf.    0.24895 (2) obj. -23.8783 iterations 11
Cbc0038I Pass  35: suminf.    0.80311 (2) obj. -23.8783 iterations 2
Cbc0038I Pass  36: suminf.    0.21521 (1) obj. -23.8783 iterations 1
Cbc0038I Pass  37: suminf.    0.16667 (1) obj. -23.9082 iterations 2
Cbc0038I Pass  38: suminf.    0.20005 (1) obj. -23.8783 iterations 1
Cbc0038I Pass  39: suminf.    0.22798 (2) obj. -23.8783 iterations 5
Cbc0038I Pass  40: suminf.    0.16667 (1) obj. -23.9385 iterations 5
Cbc0038I Pass  41: suminf.    0.23391 (1) obj. -23.8783 iterations 1
Cbc0038I Pass  42: suminf.    1.08460 (4) obj. -23.8783 iterations 15
Cbc0038I Pass  43: suminf.    0.65239 (4) obj. -23.8783 iterations 2
Cbc0038I Pass  44: suminf.    0.41188 (2) obj. -23.8783 iterations 5
Cbc0038I Pass  45: suminf.    0.81064 (2) obj. -23.8783 iterations 2
Cbc0038I Pass  46: suminf.    0.16667 (1) obj. -23.9385 iterations 5
Cbc0038I Pass  47: suminf.    0.23391 (1) obj. -23.8783 iterations 3
Cbc0038I Pass  48: suminf.    0.67011 (3) obj. -23.8783 iterations 24
Cbc0038I Pass  49: suminf.    0.65129 (3) obj. -23.8783 iterations 2
Cbc0038I Pass  50: suminf.    0.79311 (2) obj. -23.8783 iterations 13
Cbc0038I Pass  51: suminf.    0.24256 (1) obj. -23.8783 iterations 1
Cbc0038I Pass  52: suminf.    0.16667 (1) obj. -23.9385 iterations 5
Cbc0038I Pass  53: suminf.    0.23391 (1) obj. -23.8783 iterations 3
Cbc0038I Pass  54: suminf.    0.35362 (2) obj. -23.8783 iterations 11
Cbc0038I Pass  55: suminf.    0.79311 (2) obj. -23.8783 iterations 4
Cbc0038I Pass  56: suminf.    1.28407 (7) obj. -23.8783 iterations 9
Cbc0038I Pass  57: suminf.    0.90464 (2) obj. -23.8783 iterations 6
Cbc0038I Pass  58: suminf.    0.19177 (2) obj. -23.8783 iterations 6
Cbc0038I Pass  59: suminf.    0.17153 (2) obj. -23.8783 iterations 2
Cbc0038I Pass  60: suminf.    0.16667 (1) obj. -23.9385 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -23.2551 - took 0.04 seconds
Cbc0012I Integer solution of -23.255078 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 8 rows 10 columns
Cbc0031I 13 added rows had average density of 34.846154
Cbc0013I At root node, 13 cuts changed objective from -26.330787 to -24.805021 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 38 row cuts average 9.8 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 820 row cuts average 58.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 15 row cuts average 17.5 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 66 row cuts average 33.1 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 77 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -23.255078 best solution, best possible -24.805021 (0.18 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 14 rows 18 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 17 rows 24 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 14 rows 18 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 17 rows 22 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 21 rows 27 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 18 rows 22 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 17 rows 21 columns
Cbc0010I After 1000 nodes, 7 on tree, -23.255078 best solution, best possible -24.805021 (1.39 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 11 rows 16 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 19 rows 25 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 15 rows 21 columns
Cbc0001I Search completed - best objective -23.25507755763826, took 123905 iterations and 26918 nodes (1.81 seconds)
Cbc0032I Strong branching done 8932 times (51535 iterations), fathomed 257 nodes and fixed 458 variables
Cbc0041I Maximum depth 18, 2322 variables fixed on reduced cost (complete fathoming 309 times, 25376 nodes taking 105012 iterations)
Cuts at root node changed objective from -26.3308 to -24.805
Probing was tried 100 times and created 38 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 700 times and created 1952 cuts of which 0 were active after adding rounds of cuts (0.060 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
TwoMirCuts was tried 700 times and created 219 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
ZeroHalf was tried 701 times and created 245 cuts of which 0 were active after adding rounds of cuts (0.041 seconds)

Result - Optimal solution found

Objective value:                23.25507756
Enumerated nodes:               26918
Total iterations:               123905
Time (CPU seconds):             1.80
Time (Wallclock seconds):       1.82

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.80   (Wallclock seconds):       1.82

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/e6c24631ed6d4f08a569ad057dc19e81-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/e6c24631ed6d4f08a569ad057dc19e81-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 191 COLUMNS
At line 1125 RHS
At line 1312 BOUNDS
At line 1490 ENDATA
Problem MODEL has 186 rows, 177 columns and 467 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 47.6474 - 0.00 seconds
Cgl0004I processed model has 64 rows, 112 columns (112 integer (56 of which binary)) and 280 elements
Cbc0038I Initial state - 7 integers unsatisfied sum - 0.875
Cbc0038I Pass   1: suminf.    0.87500 (7) obj. -47.5989 iterations 20
Cbc0038I Solution found of -43.1918
Cbc0038I Cleaned solution of -43.1918
Cbc0038I Before mini branch and bound, 101 integers at bound fixed and 0 continuous of which 7 were internal integer and 0 internal continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 4 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -43.1918 to -43.5793 (0.00 seconds)
Cbc0038I Round again with cutoff of -43.9861
Cbc0038I Pass   2: suminf.    0.87500 (7) obj. -47.5989 iterations 0
Cbc0038I Pass   3: suminf.    0.13653 (2) obj. -43.9861 iterations 19
Cbc0038I Pass   4: suminf.    1.19927 (6) obj. -43.9861 iterations 3
Cbc0038I Pass   5: suminf.    0.45420 (1) obj. -43.9861 iterations 3
Cbc0038I Pass   6: suminf.    0.12500 (1) obj. -44.2668 iterations 12
Cbc0038I Pass   7: suminf.    0.43517 (1) obj. -43.9861 iterations 3
Cbc0038I Pass   8: suminf.    0.33112 (2) obj. -43.9861 iterations 7
Cbc0038I Pass   9: suminf.    0.30472 (2) obj. -43.9861 iterations 2
Cbc0038I Solution found of -44.0064
Cbc0038I Cleaned solution of -44.0064
Cbc0038I Before mini branch and bound, 86 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 14 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -44.7346
Cbc0038I Pass  10: suminf.    0.87500 (7) obj. -47.5989 iterations 0
Cbc0038I Pass  11: suminf.    0.25006 (2) obj. -44.7346 iterations 19
Cbc0038I Pass  12: suminf.    0.25000 (3) obj. -44.7346 iterations 13
Cbc0038I Pass  13: suminf.    0.33291 (2) obj. -44.7346 iterations 5
Cbc0038I Pass  14: suminf.    0.25000 (2) obj. -44.7981 iterations 10
Cbc0038I Pass  15: suminf.    0.32017 (2) obj. -44.7346 iterations 6
Cbc0038I Pass  16: suminf.    0.50698 (4) obj. -44.7346 iterations 17
Cbc0038I Pass  17: suminf.    0.37500 (3) obj. -44.8255 iterations 13
Cbc0038I Pass  18: suminf.    0.47985 (3) obj. -44.7346 iterations 6
Cbc0038I Pass  19: suminf.    0.42611 (4) obj. -44.7346 iterations 23
Cbc0038I Pass  20: suminf.    0.37500 (3) obj. -44.7544 iterations 9
Cbc0038I Pass  21: suminf.    0.39782 (3) obj. -44.7346 iterations 8
Cbc0038I Pass  22: suminf.    0.52464 (4) obj. -44.7346 iterations 39
Cbc0038I Pass  23: suminf.    0.37500 (3) obj. -44.8786 iterations 15
Cbc0038I Pass  24: suminf.    0.47085 (3) obj. -44.7346 iterations 12
Cbc0038I Pass  25: suminf.    0.36560 (3) obj. -44.7346 iterations 3
Cbc0038I Pass  26: suminf.    0.59829 (2) obj. -44.7346 iterations 8
Cbc0038I Pass  27: suminf.    0.91963 (2) obj. -44.7346 iterations 11
Cbc0038I Pass  28: suminf.    0.14616 (2) obj. -44.7346 iterations 5
Cbc0038I Pass  29: suminf.    1.76499 (7) obj. -44.7346 iterations 19
Cbc0038I Pass  30: suminf.    0.36553 (1) obj. -44.7346 iterations 8
Cbc0038I Pass  31: suminf.    0.12500 (1) obj. -44.8888 iterations 11
Cbc0038I Pass  32: suminf.    0.29304 (1) obj. -44.7346 iterations 7
Cbc0038I Pass  33: suminf.    0.63050 (3) obj. -44.7346 iterations 12
Cbc0038I Pass  34: suminf.    0.63050 (3) obj. -44.7346 iterations 0
Cbc0038I Pass  35: suminf.    0.36553 (1) obj. -44.7346 iterations 5
Cbc0038I Pass  36: suminf.    0.73669 (3) obj. -44.7346 iterations 24
Cbc0038I Pass  37: suminf.    0.65513 (3) obj. -44.7346 iterations 4
Cbc0038I Pass  38: suminf.    0.26909 (2) obj. -44.7346 iterations 11
Cbc0038I Pass  39: suminf.    1.34963 (6) obj. -44.7346 iterations 7
Cbc0038I Rounding solution of -44.2679 is better than previous of -44.0064

Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 38 rows 63 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -45.6085
Cbc0038I Pass  39: suminf.    0.87500 (7) obj. -47.5989 iterations 0
Cbc0038I Pass  40: suminf.    0.54454 (4) obj. -45.6085 iterations 26
Cbc0038I Pass  41: suminf.    0.43042 (4) obj. -45.6085 iterations 7
Cbc0038I Pass  42: suminf.    0.71565 (3) obj. -45.6085 iterations 14
Cbc0038I Pass  43: suminf.    0.70196 (3) obj. -45.6085 iterations 3
Cbc0038I Pass  44: suminf.    0.51923 (3) obj. -45.6085 iterations 12
Cbc0038I Pass  45: suminf.    0.51923 (3) obj. -45.6085 iterations 0
Cbc0038I Pass  46: suminf.    0.52737 (3) obj. -45.6085 iterations 8
Cbc0038I Pass  47: suminf.    0.52737 (3) obj. -45.6085 iterations 2
Cbc0038I Pass  48: suminf.    0.39998 (3) obj. -45.6085 iterations 6
Cbc0038I Pass  49: suminf.    0.39998 (3) obj. -45.6085 iterations 2
Cbc0038I Pass  50: suminf.    0.62442 (3) obj. -45.6085 iterations 17
Cbc0038I Pass  51: suminf.    0.55049 (3) obj. -45.6085 iterations 3
Cbc0038I Pass  52: suminf.    0.39998 (3) obj. -45.6085 iterations 8
Cbc0038I Pass  53: suminf.    1.38210 (4) obj. -45.6085 iterations 39
Cbc0038I Pass  54: suminf.    0.69165 (4) obj. -45.6085 iterations 20
Cbc0038I Pass  55: suminf.    0.51603 (3) obj. -45.6085 iterations 13
Cbc0038I Pass  56: suminf.    0.51923 (3) obj. -45.6085 iterations 3
Cbc0038I Pass  57: suminf.    0.52737 (3) obj. -45.6085 iterations 6
Cbc0038I Pass  58: suminf.    0.52737 (3) obj. -45.6085 iterations 2
Cbc0038I Pass  59: suminf.    0.39998 (3) obj. -45.6085 iterations 6
Cbc0038I Pass  60: suminf.    0.39998 (3) obj. -45.6085 iterations 2
Cbc0038I Pass  61: suminf.    0.83645 (4) obj. -45.6085 iterations 19
Cbc0038I Pass  62: suminf.    0.37500 (3) obj. -45.928 iterations 16
Cbc0038I Pass  63: suminf.    0.72848 (3) obj. -45.6085 iterations 9
Cbc0038I Pass  64: suminf.    0.99798 (5) obj. -45.6085 iterations 20
Cbc0038I Pass  65: suminf.    0.68168 (4) obj. -45.6085 iterations 9
Cbc0038I Pass  66: suminf.    0.68138 (3) obj. -45.6085 iterations 13
Cbc0038I Pass  67: suminf.    0.39998 (3) obj. -45.6085 iterations 11
Cbc0038I Pass  68: suminf.    0.52737 (3) obj. -45.6085 iterations 4
Cbc0038I Rounding solution of -44.285 is better than previous of -44.2679

Cbc0038I Before mini branch and bound, 67 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -46.2201
Cbc0038I Pass  68: suminf.    0.87500 (7) obj. -47.5989 iterations 0
Cbc0038I Pass  69: suminf.    0.59609 (5) obj. -46.2201 iterations 29
Cbc0038I Pass  70: suminf.    1.63474 (8) obj. -46.2201 iterations 8
Cbc0038I Pass  71: suminf.    0.85891 (4) obj. -46.2201 iterations 13
Cbc0038I Pass  72: suminf.    0.50000 (4) obj. -46.3669 iterations 8
Cbc0038I Pass  73: suminf.    0.66927 (4) obj. -46.2201 iterations 12
Cbc0038I Pass  74: suminf.    0.69877 (8) obj. -46.2201 iterations 21
Cbc0038I Pass  75: suminf.    0.50000 (4) obj. -46.2467 iterations 14
Cbc0038I Pass  76: suminf.    1.03398 (5) obj. -46.2201 iterations 16
Cbc0038I Pass  77: suminf.    0.83904 (4) obj. -46.2201 iterations 9
Cbc0038I Pass  78: suminf.    0.71769 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  79: suminf.    0.71769 (4) obj. -46.2201 iterations 0
Cbc0038I Pass  80: suminf.    0.72442 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  81: suminf.    0.72442 (4) obj. -46.2201 iterations 2
Cbc0038I Pass  82: suminf.    0.71769 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  83: suminf.    0.75745 (4) obj. -46.2201 iterations 13
Cbc0038I Pass  84: suminf.    0.79569 (4) obj. -46.2201 iterations 14
Cbc0038I Pass  85: suminf.    0.50000 (4) obj. -46.3854 iterations 16
Cbc0038I Pass  86: suminf.    0.69065 (4) obj. -46.2201 iterations 16
Cbc0038I Pass  87: suminf.    0.65787 (5) obj. -46.2201 iterations 11
Cbc0038I Pass  88: suminf.    0.50000 (4) obj. -46.2638 iterations 32
Cbc0038I Pass  89: suminf.    1.01845 (5) obj. -46.2201 iterations 20
Cbc0038I Pass  90: suminf.    0.82628 (4) obj. -46.2201 iterations 8
Cbc0038I Pass  91: suminf.    0.71769 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  92: suminf.    0.71769 (4) obj. -46.2201 iterations 0
Cbc0038I Pass  93: suminf.    0.72442 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  94: suminf.    0.72442 (4) obj. -46.2201 iterations 2
Cbc0038I Pass  95: suminf.    0.71769 (4) obj. -46.2201 iterations 6
Cbc0038I Pass  96: suminf.    0.92608 (4) obj. -46.2201 iterations 8
Cbc0038I Pass  97: suminf.    0.50000 (4) obj. -46.3854 iterations 22
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 32 rows 53 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -44.285 - took 0.08 seconds
Cbc0012I Integer solution of -44.284981 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 10 rows 13 columns
Cbc0031I 24 added rows had average density of 79
Cbc0013I At root node, 24 cuts changed objective from -47.64737 to -46.34854 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14 row cuts average 11.7 elements, 0 column cuts (7 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1969 row cuts average 109.6 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 60 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 92 row cuts average 53.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 57 row cuts average 9.5 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -44.284981 best solution, best possible -46.34854 (0.49 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 38 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 27 rows 36 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 32 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 19 rows 25 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 24 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 18 rows 24 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 31 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 20 rows 26 columns
Cbc0010I After 1000 nodes, 149 on tree, -44.284981 best solution, best possible -46.34854 (3.09 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 30 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 18 rows 24 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 21 rows 27 columns
Cbc0010I After 2000 nodes, 143 on tree, -44.284981 best solution, best possible -46.34854 (3.92 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 30 columns
Cbc0010I After 3000 nodes, 85 on tree, -44.284981 best solution, best possible -46.34854 (4.59 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 31 columns
Cbc0010I After 4000 nodes, 62 on tree, -44.284981 best solution, best possible -46.34854 (5.30 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 29 columns
Cbc0010I After 5000 nodes, 29 on tree, -44.284981 best solution, best possible -46.34854 (6.06 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 30 columns
Cbc0010I After 6000 nodes, 26 on tree, -44.284981 best solution, best possible -46.34854 (6.96 seconds)
Cbc0010I After 7000 nodes, 19 on tree, -44.284981 best solution, best possible -46.34854 (7.83 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 33 rows 43 columns
Cbc0010I After 8000 nodes, 17 on tree, -44.284981 best solution, best possible -46.34854 (8.81 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 34 columns
Cbc0010I After 9000 nodes, 16 on tree, -44.284981 best solution, best possible -46.34854 (9.63 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 31 columns
Cbc0010I After 10000 nodes, 30 on tree, -44.284981 best solution, best possible -46.34854 (10.51 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 29 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 32 columns
Cbc0010I After 11000 nodes, 14 on tree, -44.284981 best solution, best possible -46.34854 (11.35 seconds)
Cbc0010I After 12000 nodes, 499 on tree, -44.284981 best solution, best possible -44.938684 (12.75 seconds)
Cbc0010I After 13000 nodes, 924 on tree, -44.284981 best solution, best possible -44.788624 (13.57 seconds)
Cbc0010I After 14000 nodes, 812 on tree, -44.284981 best solution, best possible -44.788624 (14.08 seconds)
Cbc0010I After 15000 nodes, 1121 on tree, -44.284981 best solution, best possible -44.673461 (14.98 seconds)
Cbc0010I After 16000 nodes, 1314 on tree, -44.284981 best solution, best possible -44.592356 (15.70 seconds)
Cbc0010I After 17000 nodes, 1387 on tree, -44.284981 best solution, best possible -44.527203 (16.36 seconds)
Cbc0010I After 18000 nodes, 1090 on tree, -44.284981 best solution, best possible -44.527203 (16.77 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 32 columns
Cbc0010I After 19000 nodes, 946 on tree, -44.284981 best solution, best possible -44.448853 (17.52 seconds)
Cbc0010I After 20000 nodes, 674 on tree, -44.284981 best solution, best possible -44.381151 (18.07 seconds)
Cbc0010I After 21000 nodes, 256 on tree, -44.284981 best solution, best possible -44.320815 (18.41 seconds)
Cbc0001I Search completed - best objective -44.28498093411309, took 587601 iterations and 45780 nodes (18.51 seconds)
Cbc0032I Strong branching done 95076 times (842298 iterations), fathomed 4552 nodes and fixed 18272 variables
Cbc0041I Maximum depth 37, 63843 variables fixed on reduced cost (complete fathoming 177 times, 24248 nodes taking 253572 iterations)
Cuts at root node changed objective from -47.6474 to -46.3485
Probing was tried 100 times and created 14 cuts of which 7 were active after adding rounds of cuts (0.019 seconds)
Gomory was tried 6298 times and created 10769 cuts of which 0 were active after adding rounds of cuts (0.580 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 60 cuts of which 0 were active after adding rounds of cuts (0.042 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
TwoMirCuts was tried 100 times and created 92 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
ZeroHalf was tried 100 times and created 57 cuts of which 0 were active after adding rounds of cuts (0.021 seconds)

Result - Optimal solution found

Objective value:                44.28498093
Enumerated nodes:               45780
Total iterations:               587601
Time (CPU seconds):             17.18
Time (Wallclock seconds):       18.51

Option for printingOptions changed from normal to all
Total time (CPU seconds):       17.18   (Wallclock seconds):       18.52

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/403448c94a40465998ba752d8a152aff-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/403448c94a40465998ba752d8a152aff-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 31 COLUMNS
At line 145 RHS
At line 172 BOUNDS
At line 195 ENDATA
Problem MODEL has 26 rows, 22 columns and 57 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.31399 - 0.00 seconds
Cgl0004I processed model has 9 rows, 9 columns (9 integer (3 of which binary)) and 24 elements
Cbc0038I Initial state - 0 integers unsatisfied sum - 0
Cbc0038I Solution found of -3.31399
Cbc0038I Cleaned solution of -3.31399
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous of which 2 were internal integer and 0 internal continuous
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -3.31399 - took 0.00 seconds
Cbc0012I Integer solution of -3.3139907 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)
Cbc0001I Search completed - best objective -3.3139906525612, took 0 iterations and 0 nodes (0.00 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from -3.31399 to -3.31399
Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                3.31399065
Enumerated nodes:               0
Total iterations:               0
Time (CPU seconds):             0.00
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.00   (Wallclock seconds):       0.00

0
['big cars', 'hate', 'punished', 'hate environment', 'people drive']
Max score =  15.198077116161585
['(big cars; capable of; hate environment)', '(big cars; used for; people drive)', '(hate environment; synonym of; hate)', '(hate environment; not desires; punished)']
1
['white men', 'jump', 'men jump', 'jump really']
Max score =  8.460047576576471
['(white men; capable of; men jump)', '(men jump; not capable of; jump)', '(men jump; capable of; jump really)']
2
['people', 'stealing', 'logical fallacy', 'people stealing', 'lower year', 'example kind']
Max score =  22.58855139836669
['(people; capable of; people stealing)', '(people stealing; desires; stealing)', '(people stealing; is a; logical fallacy)', '(lower year; desires; stealing)', '(lower year; has context; example kind)']
3
['hitting your computer', 'wifi', 'hit my computer', 'wifi weak', 'hitting computer', 'weak hit']
Max score =  23.189991183578968
['(wifi; has property; wifi weak)', '(wifi weak; capable of; hitting computer)', '(hitting computer; has context; hitting your computer)', '(weak hit; synonym of; hitting your computer)', '(weak hit; has context; hit my computer)']
4
['all', 'students', 'good', 'clowns', 'bad', 'clowns bad', 'good clowns']
Max score =  33.42692843452096
['(all; used for; clowns bad)', '(students; part of; clowns bad)', '(bad; antonym of; good)', '(clowns bad; is not a; good)', '(clowns bad; synonym of; clowns)', '(clowns bad; has context; good clowns)']
5
['hate the poor', 'logical fallacy', 'people', 'proposed state minimum', 'increase hate']
Max score =  15.844263665378094
['(people; capable of; increase hate)', '(proposed state minimum; capable of; increase hate)', '(increase hate; used for; hate the poor)', '(increase hate; created by; logical fallacy)']
6

7
['paige', 'guitar solo', 'her father', 'horrible musician', 'paula good', 'father horrible']
Max score =  23.255077557638288
['(paige; part of; her father)', '(guitar solo; has context; father horrible)', '(her father; not capable of; horrible musician)', '(paula good; has context; her father)', '(father horrible; has context; horrible musician)']
8
['sister-in-law', 'a', 'teacher', 'school', 'send my children', 'not somewhere', 'send children', 'said school']
Max score =  44.284980934113264
['(sister-in-law; capable of; send children)', '(a; capable of; send children)', '(teacher; capable of; send children)', '(school; desires; said school)', '(send children; has context; not somewhere)', '(said school; synonym of; send my children)', '(said school; synonym of; not somewhere)']
9
['kills', 'deadly', 'kills deadly']
Max score =  3.3139906525611877
['(kills; synonym of; deadly)', '(kills; synonym of; kills deadly)', '(kills deadly; synonym of; deadly)']
