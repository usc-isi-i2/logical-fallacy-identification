/cluster/raid/home/zhivar.sourati/logical-fallacy-identification/AMR_parsers_and_graphs/ExplaGraphs
Tue Sep 20 22:44:45 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  A100-PCIE-40GB      Off  | 00000000:27:00.0 Off |                    0 |
| N/A   26C    P0    32W / 250W |      0MiB / 40536MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
0
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
16
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/e12c28b861ac4f1882fb3bb6e05e2847-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/e12c28b861ac4f1882fb3bb6e05e2847-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 147 COLUMNS
At line 853 RHS
At line 996 BOUNDS
At line 1131 ENDATA
Problem MODEL has 142 rows, 134 columns and 353 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 36.6325 - 0.00 seconds
Cgl0004I processed model has 49 rows, 84 columns (84 integer (42 of which binary)) and 210 elements
Cbc0038I Initial state - 6 integers unsatisfied sum - 0.857143
Cbc0038I Pass   1: suminf.    0.85714 (6) obj. -36.554 iterations 12
Cbc0038I Solution found of -32.1395
Cbc0038I Cleaned solution of -32.1395
Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous of which 6 were internal integer and 0 internal continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 4 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -32.1395 to -32.6892 (0.01 seconds)
Cbc0038I Round again with cutoff of -33.0835
Cbc0038I Pass   2: suminf.    0.85714 (6) obj. -36.554 iterations 0
Cbc0038I Pass   3: suminf.    0.24745 (2) obj. -33.0835 iterations 6
Cbc0038I Pass   4: suminf.    0.21689 (2) obj. -33.0835 iterations 2
Cbc0038I Pass   5: suminf.    0.29559 (2) obj. -33.0835 iterations 4
Cbc0038I Pass   6: suminf.    0.14286 (1) obj. -33.2627 iterations 13
Cbc0038I Pass   7: suminf.    0.34060 (1) obj. -33.0835 iterations 4
Cbc0038I Pass   8: suminf.    0.44389 (2) obj. -33.0835 iterations 8
Cbc0038I Pass   9: suminf.    0.42857 (2) obj. -33.1165 iterations 6
Cbc0038I Pass  10: suminf.    0.84424 (3) obj. -33.0835 iterations 11
Cbc0038I Pass  11: suminf.    0.42857 (2) obj. -33.1825 iterations 12
Cbc0038I Pass  12: suminf.    0.53860 (2) obj. -33.0835 iterations 8
Cbc0038I Pass  13: suminf.    0.62944 (4) obj. -33.0835 iterations 12
Cbc0038I Pass  14: suminf.    0.42857 (3) obj. -33.2341 iterations 9
Cbc0038I Pass  15: suminf.    0.59944 (3) obj. -33.0835 iterations 9
Cbc0038I Pass  16: suminf.    0.55702 (2) obj. -33.0835 iterations 22
Cbc0038I Pass  17: suminf.    0.54050 (2) obj. -33.0835 iterations 1
Cbc0038I Pass  18: suminf.    1.28438 (4) obj. -33.0835 iterations 3
Cbc0038I Pass  19: suminf.    0.87982 (2) obj. -33.0835 iterations 2
Cbc0038I Pass  20: suminf.    0.60244 (2) obj. -33.0835 iterations 1
Cbc0038I Pass  21: suminf.    0.95225 (3) obj. -33.0835 iterations 16
Cbc0038I Pass  22: suminf.    0.42857 (2) obj. -33.4972 iterations 13
Cbc0038I Pass  23: suminf.    0.68309 (2) obj. -33.0835 iterations 7
Cbc0038I Pass  24: suminf.    0.64314 (2) obj. -33.0835 iterations 2
Cbc0038I Pass  25: suminf.    0.87867 (2) obj. -33.0835 iterations 3
Cbc0038I Pass  26: suminf.    0.60133 (2) obj. -33.0835 iterations 1
Cbc0038I Pass  27: suminf.    0.44414 (3) obj. -33.0835 iterations 21
Cbc0038I Pass  28: suminf.    0.28571 (2) obj. -33.2091 iterations 7
Cbc0038I Pass  29: suminf.    0.47296 (2) obj. -33.0835 iterations 10
Cbc0038I Pass  30: suminf.    0.14286 (1) obj. -33.3671 iterations 9
Cbc0038I Pass  31: suminf.    0.46460 (1) obj. -33.0835 iterations 8
Cbc0038I Rounding solution of -32.9493 is better than previous of -32.6892

Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 28 rows 48 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -33.7933
Cbc0038I Pass  31: suminf.    0.85714 (6) obj. -36.554 iterations 0
Cbc0038I Pass  32: suminf.    0.30106 (2) obj. -33.7933 iterations 6
Cbc0038I Pass  33: suminf.    0.28571 (2) obj. -33.8434 iterations 4
Cbc0038I Pass  34: suminf.    0.42408 (2) obj. -33.7933 iterations 14
Cbc0038I Pass  35: suminf.    0.28571 (2) obj. -33.9147 iterations 6
Cbc0038I Pass  36: suminf.    0.42337 (2) obj. -33.7933 iterations 6
Cbc0038I Pass  37: suminf.    0.50636 (2) obj. -33.7933 iterations 26
Cbc0038I Pass  38: suminf.    0.28571 (2) obj. -33.9882 iterations 7
Cbc0038I Pass  39: suminf.    0.60387 (2) obj. -33.7933 iterations 6
Cbc0038I Pass  40: suminf.    0.28571 (2) obj. -34.044 iterations 13
Cbc0038I Pass  41: suminf.    0.58199 (2) obj. -33.7933 iterations 4
Cbc0038I Pass  42: suminf.    0.88697 (3) obj. -33.7933 iterations 11
Cbc0038I Pass  43: suminf.    0.88697 (3) obj. -33.7933 iterations 0
Cbc0038I Pass  44: suminf.    0.65605 (3) obj. -33.7933 iterations 13
Cbc0038I Pass  45: suminf.    0.59462 (2) obj. -33.7933 iterations 3
Cbc0038I Pass  46: suminf.    0.28571 (2) obj. -34.0361 iterations 10
Cbc0038I Pass  47: suminf.    0.57275 (2) obj. -33.7933 iterations 5
Cbc0038I Pass  48: suminf.    0.79561 (4) obj. -33.7933 iterations 12
Cbc0038I Pass  49: suminf.    0.78820 (4) obj. -33.7933 iterations 3
Cbc0038I Pass  50: suminf.    0.55537 (3) obj. -33.7933 iterations 1
Cbc0038I Pass  51: suminf.    0.53897 (3) obj. -33.7933 iterations 4
Cbc0038I Pass  52: suminf.    1.02649 (3) obj. -33.7933 iterations 3
Cbc0038I Pass  53: suminf.    0.42857 (3) obj. -34.2592 iterations 13
Cbc0038I Pass  54: suminf.    0.61437 (3) obj. -33.7933 iterations 8
Cbc0038I Pass  55: suminf.    0.57876 (3) obj. -33.7933 iterations 6
Cbc0038I Pass  56: suminf.    0.78390 (3) obj. -33.7933 iterations 7
Cbc0038I Pass  57: suminf.    0.78390 (3) obj. -33.7933 iterations 0
Cbc0038I Pass  58: suminf.    0.78530 (3) obj. -33.7933 iterations 10
Cbc0038I Pass  59: suminf.    0.77331 (3) obj. -33.7933 iterations 6
Cbc0038I Pass  60: suminf.    0.68634 (3) obj. -33.7933 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 38 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 84 columns, reduced to 29 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -32.9493 - took 0.05 seconds
Cbc0012I Integer solution of -32.949261 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 10 rows 13 columns
Cbc0031I 17 added rows had average density of 62.941176
Cbc0013I At root node, 17 cuts changed objective from -36.632508 to -34.670004 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 693 row cuts average 80.6 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 63 row cuts average 43.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -32.949261 best solution, best possible -34.670004 (0.22 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 15 rows 18 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 23 rows 28 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 14 rows 18 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 13 rows 15 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 21 rows 27 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 19 rows 24 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 23 rows 31 columns
Cbc0038I Full problem 49 rows 84 columns, reduced to 17 rows 23 columns
Cbc0010I After 1000 nodes, 14 on tree, -32.949261 best solution, best possible -34.670004 (3.82 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 12 rows 16 columns
Cbc0012I Integer solution of -32.981298 found by rounding after 14742 iterations and 1380 nodes (5.87 seconds)
Cbc0016I Integer solution of -32.988042 found by strong branching after 14969 iterations and 1401 nodes (5.89 seconds)
Cbc0012I Integer solution of -33.015986 found by rounding after 16320 iterations and 1597 nodes (6.13 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 24 rows 33 columns
Cbc0010I After 2000 nodes, 9 on tree, -33.015986 best solution, best possible -34.670004 (6.95 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 15 rows 18 columns
Cbc0010I After 3000 nodes, 5 on tree, -33.015986 best solution, best possible -34.670004 (8.27 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 16 rows 19 columns
Cbc0010I After 4000 nodes, 14 on tree, -33.015986 best solution, best possible -34.670004 (9.22 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 26 rows 32 columns
Cbc0010I After 5000 nodes, 5 on tree, -33.015986 best solution, best possible -34.227918 (10.05 seconds)
Cbc0010I After 6000 nodes, 4 on tree, -33.015986 best solution, best possible -33.389419 (11.03 seconds)
Cbc0038I Full problem 49 rows 84 columns, reduced to 14 rows 18 columns
Cbc0001I Search completed - best objective -33.01598576828836, took 1351028 iterations and 206947 nodes (11.04 seconds)
Cbc0032I Strong branching done 25972 times (178576 iterations), fathomed 712 nodes and fixed 2118 variables
Cbc0041I Maximum depth 27, 11536 variables fixed on reduced cost (complete fathoming 1671 times, 200933 nodes taking 1294240 iterations)
Cuts at root node changed objective from -36.6325 to -34.67
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
Gomory was tried 1652 times and created 2731 cuts of which 0 were active after adding rounds of cuts (0.128 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
TwoMirCuts was tried 100 times and created 63 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                33.01598577
Enumerated nodes:               206947
Total iterations:               1351028
Time (CPU seconds):             10.65
Time (Wallclock seconds):       11.04

Option for printingOptions changed from normal to all
Total time (CPU seconds):       10.65   (Wallclock seconds):       11.05

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/9d8f7eebd5634d509ffab0c2623bf285-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/9d8f7eebd5634d509ffab0c2623bf285-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 191 COLUMNS
At line 1125 RHS
At line 1312 BOUNDS
At line 1490 ENDATA
Problem MODEL has 186 rows, 177 columns and 467 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 47.5145 - 0.00 seconds
Cgl0004I processed model has 64 rows, 112 columns (112 integer (56 of which binary)) and 280 elements
Cbc0038I Initial state - 7 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    0.87500 (7) obj. -47.4391 iterations 19
Cbc0038I Solution found of -42.3891
Cbc0038I Cleaned solution of -42.3891
Cbc0038I Before mini branch and bound, 98 integers at bound fixed and 0 continuous of which 5 were internal integer and 0 internal continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 5 rows 9 columns
Cbc0038I Mini branch and bound improved solution from -42.3891 to -43.567 (0.00 seconds)
Cbc0038I Round again with cutoff of -43.9618
Cbc0038I Pass   2: suminf.    0.87500 (7) obj. -47.4391 iterations 0
Cbc0038I Pass   3: suminf.    0.35265 (2) obj. -43.9618 iterations 12
Cbc0038I Pass   4: suminf.    0.25000 (2) obj. -44.0796 iterations 6
Cbc0038I Pass   5: suminf.    0.44746 (2) obj. -43.9618 iterations 5
Cbc0038I Pass   6: suminf.    0.25000 (2) obj. -44.1088 iterations 10
Cbc0038I Pass   7: suminf.    0.41772 (2) obj. -43.9618 iterations 4
Cbc0038I Pass   8: suminf.    0.34515 (2) obj. -43.9618 iterations 28
Cbc0038I Pass   9: suminf.    0.30989 (2) obj. -43.9618 iterations 4
Cbc0038I Pass  10: suminf.    0.38113 (2) obj. -43.9618 iterations 4
Cbc0038I Pass  11: suminf.    0.50000 (1) obj. -44.1121 iterations 14
Cbc0038I Pass  12: suminf.    0.32345 (1) obj. -43.9618 iterations 8
Cbc0038I Pass  13: suminf.    0.25992 (2) obj. -43.9618 iterations 16
Cbc0038I Pass  14: suminf.    0.25516 (2) obj. -43.9618 iterations 4
Cbc0038I Pass  15: suminf.    0.07114 (1) obj. -43.9618 iterations 10
Cbc0038I Pass  16: suminf.    0.12500 (1) obj. -44.588 iterations 12
Cbc0038I Pass  17: suminf.    0.18035 (1) obj. -43.9618 iterations 8
Cbc0038I Pass  18: suminf.    0.65856 (3) obj. -43.9618 iterations 22
Cbc0038I Pass  19: suminf.    0.29397 (3) obj. -43.9618 iterations 5
Cbc0038I Pass  20: suminf.    0.46779 (2) obj. -43.9618 iterations 6
Cbc0038I Pass  21: suminf.    0.35351 (2) obj. -43.9618 iterations 3
Cbc0038I Pass  22: suminf.    0.16892 (1) obj. -43.9618 iterations 1
Cbc0038I Pass  23: suminf.    0.12500 (1) obj. -44.5102 iterations 9
Cbc0038I Pass  24: suminf.    0.26664 (1) obj. -43.9618 iterations 8
Cbc0038I Pass  25: suminf.    0.30041 (2) obj. -43.9618 iterations 38
Cbc0038I Pass  26: suminf.    0.12500 (1) obj. -44.0966 iterations 7
Cbc0038I Pass  27: suminf.    0.27880 (1) obj. -43.9618 iterations 8
Cbc0038I Pass  28: suminf.    0.29052 (2) obj. -43.9618 iterations 6
Cbc0038I Pass  29: suminf.    0.39484 (2) obj. -43.9618 iterations 16
Cbc0038I Pass  30: suminf.    0.12500 (1) obj. -44.1612 iterations 9
Cbc0038I Pass  31: suminf.    0.34622 (1) obj. -43.9618 iterations 8
Cbc0038I Rounding solution of -43.9052 is better than previous of -43.567

Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 35 rows 58 columns
Cbc0038I Mini branch and bound improved solution from -43.9052 to -43.993 (0.03 seconds)
Cbc0038I Round again with cutoff of -44.6973
Cbc0038I Pass  31: suminf.    0.87500 (7) obj. -47.4391 iterations 0
Cbc0038I Pass  32: suminf.    0.44654 (3) obj. -44.6973 iterations 15
Cbc0038I Pass  33: suminf.    0.37500 (3) obj. -44.766 iterations 9
Cbc0038I Pass  34: suminf.    0.53545 (3) obj. -44.6973 iterations 8
Cbc0038I Pass  35: suminf.    0.37500 (3) obj. -44.8197 iterations 10
Cbc0038I Pass  36: suminf.    0.51459 (3) obj. -44.6973 iterations 4
Cbc0038I Pass  37: suminf.    0.97843 (5) obj. -44.6973 iterations 21
Cbc0038I Pass  38: suminf.    0.97185 (5) obj. -44.6973 iterations 10
Cbc0038I Pass  39: suminf.    0.24009 (2) obj. -44.6973 iterations 6
Cbc0038I Pass  40: suminf.    0.24009 (2) obj. -44.6973 iterations 0
Cbc0038I Pass  41: suminf.    0.28462 (2) obj. -44.6973 iterations 2
Cbc0038I Pass  42: suminf.    0.50660 (3) obj. -44.6973 iterations 16
Cbc0038I Pass  43: suminf.    0.25000 (2) obj. -44.8975 iterations 11
Cbc0038I Pass  44: suminf.    0.47828 (2) obj. -44.6973 iterations 6
Cbc0038I Pass  45: suminf.    0.78502 (4) obj. -44.6973 iterations 10
Cbc0038I Pass  46: suminf.    0.37500 (3) obj. -45.1078 iterations 8
Cbc0038I Pass  47: suminf.    0.60196 (4) obj. -44.6973 iterations 15
Cbc0038I Pass  48: suminf.    0.37500 (3) obj. -44.7271 iterations 13
Cbc0038I Pass  49: suminf.    0.41221 (3) obj. -44.6973 iterations 7
Cbc0038I Pass  50: suminf.    0.52177 (4) obj. -44.6973 iterations 13
Cbc0038I Pass  51: suminf.    0.37500 (3) obj. -44.7882 iterations 7
Cbc0038I Pass  52: suminf.    0.48870 (3) obj. -44.6973 iterations 5
Cbc0038I Pass  53: suminf.    0.27865 (3) obj. -44.6973 iterations 9
Cbc0038I Pass  54: suminf.    1.67314 (6) obj. -44.6973 iterations 9
Cbc0038I Pass  55: suminf.    0.33260 (2) obj. -44.6973 iterations 8
Cbc0038I Pass  56: suminf.    0.30895 (2) obj. -44.6973 iterations 1
Cbc0038I Pass  57: suminf.    0.25392 (2) obj. -44.6973 iterations 5
Cbc0038I Pass  58: suminf.    0.29763 (2) obj. -44.6973 iterations 2
Cbc0038I Pass  59: suminf.    0.73396 (3) obj. -44.6973 iterations 13
Cbc0038I Pass  60: suminf.    0.25000 (2) obj. -45.0786 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 35 rows 62 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -43.993 - took 0.05 seconds
Cbc0012I Integer solution of -43.993007 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0012I Integer solution of -43.995282 found by DiveCoefficient after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 6 rows 9 columns
Cbc0031I 19 added rows had average density of 95.578947
Cbc0013I At root node, 19 cuts changed objective from -47.514539 to -46.136242 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 44 row cuts average 13.2 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1316 row cuts average 106.3 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 36 row cuts average 23.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 72 row cuts average 58.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 105 row cuts average 9.8 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -43.995282 best solution, best possible -46.136242 (0.37 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 31 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 32 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 26 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 36 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 29 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 31 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 20 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 17 rows 22 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 22 columns
Cbc0010I After 1000 nodes, 244 on tree, -43.995282 best solution, best possible -46.136242 (5.78 seconds)
Cbc0016I Integer solution of -44.007814 found by strong branching after 28287 iterations and 1795 nodes (10.86 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 31 columns
Cbc0016I Integer solution of -44.039837 found by strong branching after 28404 iterations and 1801 nodes (10.94 seconds)
Cbc0016I Integer solution of -44.06978 found by strong branching after 28467 iterations and 1805 nodes (10.98 seconds)
Cbc0016I Integer solution of -44.08481 found by strong branching after 28467 iterations and 1806 nodes (10.99 seconds)
Cbc0010I After 2000 nodes, 255 on tree, -44.08481 best solution, best possible -46.136242 (11.46 seconds)
Cbc0010I After 3000 nodes, 349 on tree, -44.08481 best solution, best possible -46.136242 (13.61 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 23 rows 30 columns
Cbc0010I After 4000 nodes, 390 on tree, -44.08481 best solution, best possible -46.136242 (14.75 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 21 rows 26 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 32 rows 39 columns
Cbc0010I After 5000 nodes, 455 on tree, -44.08481 best solution, best possible -46.136242 (15.73 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 27 rows 33 columns
Cbc0010I After 6000 nodes, 374 on tree, -44.08481 best solution, best possible -46.136242 (17.82 seconds)
Cbc0010I After 7000 nodes, 292 on tree, -44.08481 best solution, best possible -46.136242 (18.39 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 33 rows 41 columns
Cbc0010I After 8000 nodes, 210 on tree, -44.08481 best solution, best possible -46.136242 (19.05 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 21 rows 26 columns
Cbc0010I After 9000 nodes, 156 on tree, -44.08481 best solution, best possible -46.136242 (19.75 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 27 columns
Cbc0010I After 10000 nodes, 113 on tree, -44.08481 best solution, best possible -46.136242 (20.38 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 33 rows 43 columns
Cbc0010I After 11000 nodes, 44 on tree, -44.08481 best solution, best possible -46.136242 (21.09 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 35 columns
Cbc0010I After 12000 nodes, 540 on tree, -44.08481 best solution, best possible -45.108082 (23.00 seconds)
Cbc0010I After 13000 nodes, 1029 on tree, -44.08481 best solution, best possible -44.943895 (24.31 seconds)
Cbc0010I After 14000 nodes, 945 on tree, -44.08481 best solution, best possible -44.943895 (24.78 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 30 columns
Cbc0010I After 15000 nodes, 1427 on tree, -44.08481 best solution, best possible -44.851359 (25.96 seconds)
Cbc0010I After 16000 nodes, 1877 on tree, -44.08481 best solution, best possible -44.787279 (27.05 seconds)
Cbc0010I After 17000 nodes, 2309 on tree, -44.08481 best solution, best possible -44.741055 (27.97 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 29 rows 38 columns
Cbc0010I After 18000 nodes, 2202 on tree, -44.08481 best solution, best possible -44.741055 (28.33 seconds)
Cbc0010I After 19000 nodes, 2623 on tree, -44.08481 best solution, best possible -44.696773 (29.31 seconds)
Cbc0010I After 20000 nodes, 2984 on tree, -44.08481 best solution, best possible -44.657815 (30.23 seconds)
Cbc0010I After 21000 nodes, 3364 on tree, -44.08481 best solution, best possible -44.61794 (31.11 seconds)
Cbc0010I After 22000 nodes, 3225 on tree, -44.08481 best solution, best possible -44.61794 (31.48 seconds)
Cbc0010I After 23000 nodes, 3551 on tree, -44.08481 best solution, best possible -44.579406 (32.34 seconds)
Cbc0010I After 24000 nodes, 3829 on tree, -44.08481 best solution, best possible -44.543957 (33.12 seconds)
Cbc0010I After 25000 nodes, 4060 on tree, -44.08481 best solution, best possible -44.510748 (33.83 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 17 rows 20 columns
Cbc0010I After 26000 nodes, 3821 on tree, -44.08481 best solution, best possible -44.510748 (34.18 seconds)
Cbc0010I After 27000 nodes, 4028 on tree, -44.08481 best solution, best possible -44.479213 (34.93 seconds)
Cbc0010I After 28000 nodes, 4206 on tree, -44.08481 best solution, best possible -44.451756 (35.66 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 26 rows 32 columns
Cbc0010I After 29000 nodes, 4322 on tree, -44.08481 best solution, best possible -44.423654 (36.34 seconds)
Cbc0010I After 30000 nodes, 4060 on tree, -44.08481 best solution, best possible -44.423654 (36.71 seconds)
Cbc0010I After 31000 nodes, 4148 on tree, -44.08481 best solution, best possible -44.395268 (37.36 seconds)
Cbc0010I After 32000 nodes, 4186 on tree, -44.08481 best solution, best possible -44.369354 (37.98 seconds)
Cbc0010I After 33000 nodes, 4158 on tree, -44.08481 best solution, best possible -44.344798 (38.57 seconds)
Cbc0010I After 34000 nodes, 3844 on tree, -44.08481 best solution, best possible -44.344666 (38.90 seconds)
Cbc0016I Integer solution of -44.085032 found by strong branching after 488982 iterations and 34203 nodes (39.02 seconds)
Cbc0010I After 35000 nodes, 3734 on tree, -44.085032 best solution, best possible -44.3394 (39.38 seconds)
Cbc0010I After 36000 nodes, 3675 on tree, -44.085032 best solution, best possible -44.312025 (40.02 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 30 rows 36 columns
Cbc0010I After 37000 nodes, 3517 on tree, -44.085032 best solution, best possible -44.286482 (40.60 seconds)
Cbc0010I After 38000 nodes, 3144 on tree, -44.085032 best solution, best possible -44.286482 (40.90 seconds)
Cbc0010I After 39000 nodes, 2959 on tree, -44.085032 best solution, best possible -44.261333 (41.49 seconds)
Cbc0010I After 40000 nodes, 2747 on tree, -44.085032 best solution, best possible -44.237664 (42.04 seconds)
Cbc0010I After 41000 nodes, 2481 on tree, -44.085032 best solution, best possible -44.214038 (42.53 seconds)
Cbc0010I After 42000 nodes, 2088 on tree, -44.085032 best solution, best possible -44.214038 (42.78 seconds)
Cbc0010I After 43000 nodes, 1780 on tree, -44.085032 best solution, best possible -44.188813 (43.22 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 12 rows 15 columns
Cbc0010I After 44000 nodes, 1433 on tree, -44.085032 best solution, best possible -44.165849 (43.63 seconds)
Cbc0010I After 45000 nodes, 1047 on tree, -44.085032 best solution, best possible -44.142544 (43.95 seconds)
Cbc0010I After 46000 nodes, 591 on tree, -44.085032 best solution, best possible -44.142544 (44.16 seconds)
Cbc0010I After 47000 nodes, 165 on tree, -44.085032 best solution, best possible -44.101222 (44.41 seconds)
Cbc0001I Search completed - best objective -44.08503234013943, took 2772619 iterations and 353002 nodes (44.46 seconds)
Cbc0032I Strong branching done 210486 times (1719018 iterations), fathomed 10285 nodes and fixed 36108 variables
Cbc0041I Maximum depth 43, 117788 variables fixed on reduced cost (complete fathoming 1094 times, 305658 nodes taking 2167825 iterations)
Cuts at root node changed objective from -47.5145 to -46.1362
Probing was tried 100 times and created 44 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
Gomory was tried 15778 times and created 21944 cuts of which 0 were active after adding rounds of cuts (1.131 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 36 cuts of which 0 were active after adding rounds of cuts (0.030 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
TwoMirCuts was tried 100 times and created 72 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 15781 times and created 8500 cuts of which 0 were active after adding rounds of cuts (1.126 seconds)

Result - Optimal solution found

Objective value:                44.08503234
Enumerated nodes:               353002
Total iterations:               2772619
Time (CPU seconds):             44.19
Time (Wallclock seconds):       44.47

Option for printingOptions changed from normal to all
Total time (CPU seconds):       44.19   (Wallclock seconds):       44.47

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/e11706cc7f714f539dae89e53da34041-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/e11706cc7f714f539dae89e53da34041-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 17.4701 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -17.2646 iterations 9
Cbc0038I Solution found of -14.5511
Cbc0038I Cleaned solution of -14.5511
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 3 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -14.5511 to -15.5788 (0.00 seconds)
Cbc0038I Round again with cutoff of -15.7679
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -17.2646 iterations 0
Cbc0038I Pass   3: suminf.    0.64632 (2) obj. -15.7679 iterations 10
Cbc0038I Pass   4: suminf.    0.59673 (2) obj. -15.7679 iterations 1
Cbc0038I Pass   5: suminf.    0.28566 (2) obj. -15.7679 iterations 10
Cbc0038I Pass   6: suminf.    0.20000 (1) obj. -16.1436 iterations 9
Cbc0038I Pass   7: suminf.    0.40997 (1) obj. -15.7679 iterations 2
Cbc0038I Pass   8: suminf.    1.69138 (5) obj. -15.7679 iterations 9
Cbc0038I Pass   9: suminf.    0.20000 (1) obj. -15.8596 iterations 2
Cbc0038I Pass  10: suminf.    0.29515 (1) obj. -15.7679 iterations 1
Cbc0038I Pass  11: suminf.    1.74880 (5) obj. -15.7679 iterations 2
Cbc0038I Pass  12: suminf.    0.28122 (2) obj. -15.7679 iterations 9
Cbc0038I Pass  13: suminf.    0.28122 (2) obj. -15.7679 iterations 0
Cbc0038I Pass  14: suminf.    0.40848 (1) obj. -15.7679 iterations 7
Cbc0038I Pass  15: suminf.    0.40848 (1) obj. -15.7679 iterations 2
Cbc0038I Pass  16: suminf.    0.20000 (1) obj. -16.1313 iterations 4
Cbc0038I Pass  17: suminf.    0.40735 (1) obj. -15.7679 iterations 2
Cbc0038I Pass  18: suminf.    0.58625 (2) obj. -15.7679 iterations 3
Cbc0038I Pass  19: suminf.    0.58447 (2) obj. -15.7679 iterations 2
Cbc0038I Pass  20: suminf.    0.62133 (2) obj. -15.7679 iterations 2
Cbc0038I Pass  21: suminf.    1.25238 (3) obj. -15.7679 iterations 14
Cbc0038I Pass  22: suminf.    0.40000 (2) obj. -15.8251 iterations 9
Cbc0038I Pass  23: suminf.    0.45840 (2) obj. -15.7679 iterations 2
Cbc0038I Pass  24: suminf.    0.65964 (3) obj. -15.7679 iterations 11
Cbc0038I Pass  25: suminf.    2.41626 (7) obj. -15.7679 iterations 7
Cbc0038I Pass  26: suminf.    0.27157 (1) obj. -15.7679 iterations 5
Cbc0038I Pass  27: suminf.    0.20000 (1) obj. -15.8308 iterations 6
Cbc0038I Pass  28: suminf.    0.26527 (1) obj. -15.7679 iterations 3
Cbc0038I Pass  29: suminf.    0.85909 (3) obj. -15.7679 iterations 12
Cbc0038I Pass  30: suminf.    0.24635 (2) obj. -15.7679 iterations 4
Cbc0038I Pass  31: suminf.    0.40000 (1) obj. -15.9222 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 21 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -15.5788 - took 0.01 seconds
Cbc0012I Integer solution of -15.578753 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0031I 11 added rows had average density of 31.181818
Cbc0013I At root node, 11 cuts changed objective from -17.470101 to -16.070978 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 540 row cuts average 37.8 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 15.3 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 56 row cuts average 25.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -15.578753 best solution, best possible -16.070978 (0.09 seconds)
Cbc0001I Search completed - best objective -15.57875292561942, took 2777 iterations and 32 nodes (0.14 seconds)
Cbc0032I Strong branching done 404 times (2159 iterations), fathomed 6 nodes and fixed 10 variables
Cbc0035I Maximum depth 8, 85 variables fixed on reduced cost
Cuts at root node changed objective from -17.4701 to -16.071
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 202 times and created 925 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 202 times and created 101 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                15.57875293
Enumerated nodes:               32
Total iterations:               2777
Time (CPU seconds):             0.14
Time (Wallclock seconds):       0.14

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.14

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/4be7593718a847118a4548f32cff60f4-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/4be7593718a847118a4548f32cff60f4-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 241 COLUMNS
At line 1435 RHS
At line 1672 BOUNDS
At line 1899 ENDATA
Problem MODEL has 236 rows, 226 columns and 597 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 63.5382 - 0.00 seconds
Cgl0004I processed model has 81 rows, 144 columns (144 integer (72 of which binary)) and 360 elements
Cbc0038I Initial state - 8 integers unsatisfied sum - 0.888889
Cbc0038I Pass   1: suminf.    0.88889 (8) obj. -63.4334 iterations 25
Cbc0038I Solution found of -57.389
Cbc0038I Cleaned solution of -57.389
Cbc0038I Before mini branch and bound, 131 integers at bound fixed and 0 continuous of which 8 were internal integer and 0 internal continuous
Cbc0038I Full problem 81 rows 144 columns, reduced to 5 rows 10 columns
Cbc0038I Mini branch and bound improved solution from -57.389 to -58.332 (0.00 seconds)
Cbc0038I Round again with cutoff of -58.8526
Cbc0038I Pass   2: suminf.    0.88889 (8) obj. -63.4334 iterations 0
Cbc0038I Pass   3: suminf.    0.50103 (2) obj. -58.8526 iterations 20
Cbc0038I Pass   4: suminf.    0.22222 (2) obj. -59.1288 iterations 12
Cbc0038I Pass   5: suminf.    0.50937 (2) obj. -58.8526 iterations 3
Cbc0038I Pass   6: suminf.    0.48736 (2) obj. -58.8526 iterations 15
Cbc0038I Pass   7: suminf.    0.22222 (2) obj. -59.0533 iterations 14
Cbc0038I Pass   8: suminf.    0.43088 (2) obj. -58.8526 iterations 6
Cbc0038I Pass   9: suminf.    0.45601 (3) obj. -58.8526 iterations 26
Cbc0038I Pass  10: suminf.    0.43586 (3) obj. -58.8526 iterations 5
Cbc0038I Pass  11: suminf.    0.11259 (1) obj. -58.8526 iterations 15
Cbc0038I Pass  12: suminf.    0.38611 (7) obj. -58.8526 iterations 10
Cbc0038I Pass  13: suminf.    0.11259 (1) obj. -58.8526 iterations 2
Cbc0038I Pass  14: suminf.    0.14417 (2) obj. -58.8526 iterations 13
Cbc0038I Pass  15: suminf.    0.14471 (2) obj. -58.8526 iterations 1
Cbc0038I Pass  16: suminf.    0.21914 (2) obj. -58.8526 iterations 5
Cbc0038I Pass  17: suminf.    0.44829 (3) obj. -58.8526 iterations 5
Cbc0038I Pass  18: suminf.    0.40879 (3) obj. -58.8526 iterations 3
Cbc0038I Pass  19: suminf.    0.14471 (2) obj. -58.8526 iterations 6
Cbc0038I Pass  20: suminf.    0.25356 (2) obj. -58.8526 iterations 9
Cbc0038I Pass  21: suminf.    0.22222 (2) obj. -58.8689 iterations 12
Cbc0038I Pass  22: suminf.    0.24556 (2) obj. -58.8526 iterations 7
Cbc0038I Pass  23: suminf.    0.39621 (4) obj. -58.8526 iterations 11
Cbc0038I Pass  24: suminf.    0.33519 (4) obj. -58.8526 iterations 9
Cbc0038I Pass  25: suminf.    0.38043 (2) obj. -58.8526 iterations 3
Cbc0038I Pass  26: suminf.    0.22222 (2) obj. -58.9414 iterations 10
Cbc0038I Pass  27: suminf.    0.34927 (2) obj. -58.8526 iterations 8
Cbc0038I Pass  28: suminf.    0.23672 (2) obj. -58.8526 iterations 9
Cbc0038I Pass  29: suminf.    0.22222 (2) obj. -58.8647 iterations 12
Cbc0038I Pass  30: suminf.    0.23949 (2) obj. -58.8526 iterations 9
Cbc0038I Pass  31: suminf.    0.40978 (3) obj. -58.8526 iterations 14
Cbc0038I Rounding solution of -58.8482 is better than previous of -58.332

Cbc0038I Before mini branch and bound, 83 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 144 columns, reduced to 34 rows 58 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -59.7897
Cbc0038I Pass  31: suminf.    0.88889 (8) obj. -63.4334 iterations 0
Cbc0038I Pass  32: suminf.    0.54435 (3) obj. -59.7897 iterations 26
Cbc0038I Pass  33: suminf.    0.33333 (3) obj. -60.0295 iterations 8
Cbc0038I Pass  34: suminf.    0.65953 (3) obj. -59.7897 iterations 5
Cbc0038I Pass  35: suminf.    0.58161 (3) obj. -59.7897 iterations 6
Cbc0038I Pass  36: suminf.    0.33867 (2) obj. -59.7897 iterations 19
Cbc0038I Pass  37: suminf.    1.65930 (6) obj. -59.7897 iterations 12
Cbc0038I Pass  38: suminf.    0.58783 (2) obj. -59.7897 iterations 16
Cbc0038I Pass  39: suminf.    0.56634 (3) obj. -59.7897 iterations 18
Cbc0038I Pass  40: suminf.    0.55556 (2) obj. -59.8488 iterations 19
Cbc0038I Pass  41: suminf.    0.43916 (2) obj. -59.7897 iterations 10
Cbc0038I Pass  42: suminf.    0.63993 (2) obj. -59.7897 iterations 2
Cbc0038I Pass  43: suminf.    0.13594 (2) obj. -59.7897 iterations 2
Cbc0038I Pass  44: suminf.    0.21113 (2) obj. -59.7897 iterations 9
Cbc0038I Pass  45: suminf.    0.46427 (3) obj. -59.7897 iterations 6
Cbc0038I Pass  46: suminf.    0.39791 (7) obj. -59.7897 iterations 9
Cbc0038I Pass  47: suminf.    0.25029 (2) obj. -59.7897 iterations 5
Cbc0038I Pass  48: suminf.    0.25514 (3) obj. -59.7897 iterations 8
Cbc0038I Pass  49: suminf.    0.32431 (3) obj. -59.7897 iterations 21
Cbc0038I Pass  50: suminf.    0.27462 (3) obj. -59.7897 iterations 6
Cbc0038I Pass  51: suminf.    0.15625 (1) obj. -59.7897 iterations 5
Cbc0038I Pass  52: suminf.    0.11111 (1) obj. -59.8025 iterations 11
Cbc0038I Pass  53: suminf.    0.12439 (1) obj. -59.7897 iterations 9
Cbc0038I Pass  54: suminf.    0.50285 (3) obj. -59.7897 iterations 15
Cbc0038I Pass  55: suminf.    0.44266 (3) obj. -59.7897 iterations 3
Cbc0038I Pass  56: suminf.    0.17691 (1) obj. -59.7897 iterations 4
Cbc0038I Pass  57: suminf.    0.11111 (1) obj. -59.8183 iterations 14
Cbc0038I Pass  58: suminf.    0.14084 (1) obj. -59.7897 iterations 11
Cbc0038I Pass  59: suminf.    1.18499 (5) obj. -59.7897 iterations 5
Cbc0038I Pass  60: suminf.    0.78342 (5) obj. -59.7897 iterations 3
Cbc0038I Rounding solution of -59.1594 is better than previous of -58.8482

Cbc0038I Before mini branch and bound, 85 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 144 columns, reduced to 35 rows 58 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -60.9143
Cbc0038I Pass  60: suminf.    0.88889 (8) obj. -63.4334 iterations 0
Cbc0038I Pass  61: suminf.    0.61302 (5) obj. -60.9143 iterations 26
Cbc0038I Pass  62: suminf.    0.46021 (5) obj. -60.9143 iterations 10
Cbc0038I Pass  63: suminf.    0.57165 (4) obj. -60.9143 iterations 24
Cbc0038I Pass  64: suminf.    0.54531 (4) obj. -60.9143 iterations 8
Cbc0038I Pass  65: suminf.    0.92591 (4) obj. -60.9143 iterations 9
Cbc0038I Pass  66: suminf.    0.33333 (3) obj. -60.9912 iterations 13
Cbc0038I Pass  67: suminf.    0.44332 (3) obj. -60.9143 iterations 9
Cbc0038I Pass  68: suminf.    0.91449 (4) obj. -60.9143 iterations 24
Cbc0038I Pass  69: suminf.    3.46047 (11) obj. -60.9143 iterations 13
Cbc0038I Pass  70: suminf.    1.06710 (5) obj. -60.9143 iterations 21
Cbc0038I Pass  71: suminf.    2.28666 (11) obj. -60.9143 iterations 9
Cbc0038I Pass  72: suminf.    0.53452 (3) obj. -60.9143 iterations 21
Cbc0038I Pass  73: suminf.    0.33333 (3) obj. -60.9912 iterations 15
Cbc0038I Pass  74: suminf.    0.44332 (3) obj. -60.9143 iterations 10
Cbc0038I Pass  75: suminf.    0.40098 (4) obj. -60.9143 iterations 40
Cbc0038I Pass  76: suminf.    0.34108 (4) obj. -60.9143 iterations 11
Cbc0038I Pass  77: suminf.    0.42884 (3) obj. -60.9143 iterations 10
Cbc0038I Pass  78: suminf.    0.33333 (3) obj. -60.9269 iterations 15
Cbc0038I Pass  79: suminf.    0.35136 (3) obj. -60.9143 iterations 13
Cbc0038I Pass  80: suminf.    0.86508 (5) obj. -60.9143 iterations 30
Cbc0038I Pass  81: suminf.    0.53684 (5) obj. -60.9143 iterations 8
Cbc0038I Pass  82: suminf.    0.93865 (4) obj. -60.9143 iterations 12
Cbc0038I Pass  83: suminf.    0.33333 (3) obj. -60.9912 iterations 27
Cbc0038I Pass  84: suminf.    0.44332 (3) obj. -60.9143 iterations 12
Cbc0038I Pass  85: suminf.    0.40678 (4) obj. -60.9143 iterations 10
Cbc0038I Pass  86: suminf.    0.39398 (4) obj. -60.9143 iterations 4
Cbc0038I Pass  87: suminf.    0.39880 (4) obj. -60.9143 iterations 12
Cbc0038I Pass  88: suminf.    0.39880 (4) obj. -60.9143 iterations 2
Cbc0038I Pass  89: suminf.    0.47154 (3) obj. -60.9143 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 79 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 144 columns, reduced to 40 rows 65 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -59.1594 - took 0.09 seconds
Cbc0012I Integer solution of -59.159442 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 19 rows 25 columns
Cbc0031I 26 added rows had average density of 95.423077
Cbc0013I At root node, 26 cuts changed objective from -63.538212 to -61.112888 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (3 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1837 row cuts average 138.0 elements, 0 column cuts (0 active)  in 0.093 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 50 row cuts average 31.0 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 92 row cuts average 54.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -59.159442 best solution, best possible -61.112888 (0.60 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 24 rows 31 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 16 rows 19 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 21 rows 27 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 24 rows 30 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 26 rows 32 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 26 rows 34 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 25 rows 32 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 29 rows 37 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 17 rows 24 columns
Cbc0010I After 1000 nodes, 451 on tree, -59.159442 best solution, best possible -61.112888 (10.88 seconds)
Cbc0016I Integer solution of -59.162893 found by strong branching after 34167 iterations and 1555 nodes (17.25 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 16 rows 20 columns
Cbc0010I After 2000 nodes, 621 on tree, -59.162893 best solution, best possible -61.112888 (17.82 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 29 rows 35 columns
Cbc0010I After 3000 nodes, 1002 on tree, -59.162893 best solution, best possible -61.112888 (19.76 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 23 rows 26 columns
Cbc0010I After 4000 nodes, 1398 on tree, -59.162893 best solution, best possible -61.112888 (20.82 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 16 rows 19 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 26 rows 32 columns
Cbc0010I After 5000 nodes, 1762 on tree, -59.162893 best solution, best possible -61.112888 (21.72 seconds)
Cbc0010I After 6000 nodes, 1795 on tree, -59.162893 best solution, best possible -61.112888 (22.59 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 32 rows 39 columns
Cbc0038I Full problem 81 rows 144 columns, reduced to 36 rows 46 columns
Cbc0010I After 7000 nodes, 1781 on tree, -59.162893 best solution, best possible -61.112888 (23.42 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 34 rows 43 columns
Cbc0010I After 8000 nodes, 1796 on tree, -59.162893 best solution, best possible -61.112888 (24.22 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 33 rows 41 columns
Cbc0010I After 9000 nodes, 1777 on tree, -59.162893 best solution, best possible -61.112888 (25.02 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 30 rows 38 columns
Cbc0010I After 10000 nodes, 1789 on tree, -59.162893 best solution, best possible -61.112888 (25.67 seconds)
Cbc0010I After 11000 nodes, 1789 on tree, -59.162893 best solution, best possible -61.112888 (26.27 seconds)
Cbc0010I After 12000 nodes, 2282 on tree, -59.162893 best solution, best possible -60.397301 (28.39 seconds)
Cbc0010I After 13000 nodes, 2779 on tree, -59.162893 best solution, best possible -60.308455 (29.68 seconds)
Cbc0010I After 14000 nodes, 2708 on tree, -59.162893 best solution, best possible -60.308455 (30.08 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 31 rows 39 columns
Cbc0010I After 15000 nodes, 3208 on tree, -59.162893 best solution, best possible -60.253342 (31.16 seconds)
Cbc0010I After 16000 nodes, 3708 on tree, -59.162893 best solution, best possible -60.215833 (32.09 seconds)
Cbc0010I After 17000 nodes, 4208 on tree, -59.162893 best solution, best possible -60.185705 (32.92 seconds)
Cbc0010I After 18000 nodes, 4199 on tree, -59.162893 best solution, best possible -60.185705 (33.32 seconds)
Cbc0010I After 19000 nodes, 4698 on tree, -59.162893 best solution, best possible -60.160438 (34.09 seconds)
Cbc0010I After 20000 nodes, 5198 on tree, -59.162893 best solution, best possible -60.13906 (34.87 seconds)
Cbc0010I After 21000 nodes, 5697 on tree, -59.162893 best solution, best possible -60.119212 (35.64 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 24 rows 30 columns
Cbc0010I After 22000 nodes, 5691 on tree, -59.162893 best solution, best possible -60.119212 (35.99 seconds)
Cbc0010I After 23000 nodes, 6189 on tree, -59.162893 best solution, best possible -60.101462 (36.71 seconds)
Cbc0010I After 24000 nodes, 6689 on tree, -59.162893 best solution, best possible -60.085772 (37.40 seconds)
Cbc0010I After 25000 nodes, 7189 on tree, -59.162893 best solution, best possible -60.07276 (38.05 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 31 rows 37 columns
Cbc0010I After 26000 nodes, 7182 on tree, -59.162893 best solution, best possible -60.07276 (38.44 seconds)
Cbc0010I After 27000 nodes, 7681 on tree, -59.162893 best solution, best possible -60.058936 (39.11 seconds)
Cbc0010I After 28000 nodes, 8181 on tree, -59.162893 best solution, best possible -60.047335 (39.75 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 38 rows 51 columns
Cbc0010I After 29000 nodes, 8680 on tree, -59.162893 best solution, best possible -60.036066 (40.32 seconds)
Cbc0010I After 30000 nodes, 8672 on tree, -59.162893 best solution, best possible -60.036066 (40.66 seconds)
Cbc0010I After 31000 nodes, 9172 on tree, -59.162893 best solution, best possible -60.025735 (41.26 seconds)
Cbc0010I After 32000 nodes, 9670 on tree, -59.162893 best solution, best possible -60.016376 (41.80 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 35 rows 44 columns
Cbc0010I After 33000 nodes, 10170 on tree, -59.162893 best solution, best possible -60.008002 (42.33 seconds)
Cbc0010I After 34000 nodes, 10163 on tree, -59.162893 best solution, best possible -60.007956 (42.64 seconds)
Cbc0010I After 35000 nodes, 10661 on tree, -59.162893 best solution, best possible -60.007956 (43.09 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 30 rows 35 columns
Cbc0010I After 36000 nodes, 11150 on tree, -59.162893 best solution, best possible -60.007956 (43.50 seconds)
Cbc0010I After 37000 nodes, 11076 on tree, -59.162893 best solution, best possible -60.007956 (43.71 seconds)
Cbc0010I After 38000 nodes, 11060 on tree, -59.162893 best solution, best possible -60.007956 (44.10 seconds)
Cbc0010I After 39000 nodes, 11532 on tree, -59.162893 best solution, best possible -60.007956 (44.56 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 29 rows 35 columns
Cbc0010I After 40000 nodes, 11972 on tree, -59.162893 best solution, best possible -60.007956 (44.98 seconds)
Cbc0010I After 41000 nodes, 11876 on tree, -59.162893 best solution, best possible -60.007956 (45.20 seconds)
Cbc0010I After 42000 nodes, 11853 on tree, -59.162893 best solution, best possible -60.007935 (45.58 seconds)
Cbc0010I After 43000 nodes, 12270 on tree, -59.162893 best solution, best possible -60.007935 (46.06 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 27 rows 32 columns
Cbc0010I After 44000 nodes, 12680 on tree, -59.162893 best solution, best possible -60.007935 (46.51 seconds)
Cbc0010I After 45000 nodes, 12574 on tree, -59.162893 best solution, best possible -60.007935 (46.73 seconds)
Cbc0010I After 46000 nodes, 12542 on tree, -59.162893 best solution, best possible -60.007935 (47.12 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 31 rows 38 columns
Cbc0010I After 47000 nodes, 12937 on tree, -59.162893 best solution, best possible -60.007935 (47.64 seconds)
Cbc0010I After 48000 nodes, 13335 on tree, -59.162893 best solution, best possible -60.007935 (48.07 seconds)
Cbc0010I After 49000 nodes, 13220 on tree, -59.162893 best solution, best possible -60.007935 (48.33 seconds)
Cbc0010I After 50000 nodes, 13196 on tree, -59.162893 best solution, best possible -60.00793 (48.71 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 26 rows 33 columns
Cbc0010I After 51000 nodes, 13585 on tree, -59.162893 best solution, best possible -60.00793 (49.22 seconds)
Cbc0010I After 52000 nodes, 13967 on tree, -59.162893 best solution, best possible -60.00793 (49.65 seconds)
Cbc0010I After 53000 nodes, 13850 on tree, -59.162893 best solution, best possible -60.00793 (49.91 seconds)
Cbc0010I After 54000 nodes, 13837 on tree, -59.162893 best solution, best possible -60.00793 (50.26 seconds)
Cbc0010I After 55000 nodes, 14241 on tree, -59.162893 best solution, best possible -60.00793 (50.76 seconds)
Cbc0010I After 56000 nodes, 14634 on tree, -59.162893 best solution, best possible -60.00793 (51.17 seconds)
Cbc0010I After 57000 nodes, 14513 on tree, -59.162893 best solution, best possible -60.00793 (51.39 seconds)
Cbc0010I After 58000 nodes, 14484 on tree, -59.162893 best solution, best possible -60.007886 (51.80 seconds)
Cbc0010I After 59000 nodes, 14848 on tree, -59.162893 best solution, best possible -60.007886 (52.31 seconds)
Cbc0010I After 60000 nodes, 15214 on tree, -59.162893 best solution, best possible -60.007886 (52.74 seconds)
Cbc0010I After 61000 nodes, 15089 on tree, -59.162893 best solution, best possible -60.007886 (53.00 seconds)
Cbc0010I After 62000 nodes, 15051 on tree, -59.162893 best solution, best possible -60.007886 (53.43 seconds)
Cbc0010I After 63000 nodes, 15409 on tree, -59.162893 best solution, best possible -60.007886 (53.97 seconds)
Cbc0010I After 64000 nodes, 15761 on tree, -59.162893 best solution, best possible -60.007886 (54.37 seconds)
Cbc0010I After 65000 nodes, 15648 on tree, -59.162893 best solution, best possible -60.007886 (54.62 seconds)
Cbc0010I After 66000 nodes, 15625 on tree, -59.162893 best solution, best possible -60.007824 (55.06 seconds)
Cbc0010I After 67000 nodes, 15963 on tree, -59.162893 best solution, best possible -60.007824 (55.60 seconds)
Cbc0010I After 68000 nodes, 16320 on tree, -59.162893 best solution, best possible -60.007824 (56.06 seconds)
Cbc0010I After 69000 nodes, 16167 on tree, -59.162893 best solution, best possible -60.007824 (56.35 seconds)
Cbc0010I After 70000 nodes, 16122 on tree, -59.162893 best solution, best possible -60.007824 (56.80 seconds)
Cbc0010I After 71000 nodes, 16450 on tree, -59.162893 best solution, best possible -60.007824 (57.39 seconds)
Cbc0010I After 72000 nodes, 16799 on tree, -59.162893 best solution, best possible -60.007824 (57.88 seconds)
Cbc0010I After 73000 nodes, 16549 on tree, -59.162893 best solution, best possible -60.007824 (58.16 seconds)
Cbc0010I After 74000 nodes, 16511 on tree, -59.162893 best solution, best possible -60.007817 (58.67 seconds)
Cbc0010I After 75000 nodes, 16852 on tree, -59.162893 best solution, best possible -60.007817 (59.28 seconds)
Cbc0010I After 76000 nodes, 17190 on tree, -59.162893 best solution, best possible -60.007817 (59.80 seconds)
Cbc0010I After 77000 nodes, 17114 on tree, -59.162893 best solution, best possible -60.007817 (60.12 seconds)
Cbc0010I After 78000 nodes, 17068 on tree, -59.162893 best solution, best possible -60.007817 (60.61 seconds)
Cbc0010I After 79000 nodes, 17393 on tree, -59.162893 best solution, best possible -60.007817 (61.23 seconds)
Cbc0010I After 80000 nodes, 17725 on tree, -59.162893 best solution, best possible -60.007817 (61.80 seconds)
Cbc0010I After 81000 nodes, 17476 on tree, -59.162893 best solution, best possible -60.007817 (62.10 seconds)
Cbc0010I After 82000 nodes, 17410 on tree, -59.162893 best solution, best possible -60.007798 (62.63 seconds)
Cbc0010I After 83000 nodes, 17766 on tree, -59.162893 best solution, best possible -60.007798 (63.31 seconds)
Cbc0010I After 84000 nodes, 18084 on tree, -59.162893 best solution, best possible -60.007798 (63.84 seconds)
Cbc0010I After 85000 nodes, 17932 on tree, -59.162893 best solution, best possible -60.007798 (64.20 seconds)
Cbc0010I After 86000 nodes, 17814 on tree, -59.162893 best solution, best possible -60.007798 (64.80 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 23 rows 27 columns
Cbc0010I After 87000 nodes, 18119 on tree, -59.162893 best solution, best possible -60.007798 (65.60 seconds)
Cbc0010I After 88000 nodes, 18436 on tree, -59.162893 best solution, best possible -60.007798 (66.25 seconds)
Cbc0010I After 89000 nodes, 18207 on tree, -59.162893 best solution, best possible -60.007798 (66.60 seconds)
Cbc0010I After 90000 nodes, 18005 on tree, -59.162893 best solution, best possible -60.007736 (67.08 seconds)
Cbc0010I After 91000 nodes, 18282 on tree, -59.162893 best solution, best possible -60.007736 (67.87 seconds)
Cbc0010I After 92000 nodes, 18596 on tree, -59.162893 best solution, best possible -60.007736 (68.57 seconds)
Cbc0010I After 93000 nodes, 18388 on tree, -59.162893 best solution, best possible -60.007736 (68.95 seconds)
Cbc0010I After 94000 nodes, 18330 on tree, -59.162893 best solution, best possible -60.007736 (69.46 seconds)
Cbc0010I After 95000 nodes, 18645 on tree, -59.162893 best solution, best possible -60.007736 (70.20 seconds)
Cbc0010I After 96000 nodes, 18968 on tree, -59.162893 best solution, best possible -60.007736 (70.87 seconds)
Cbc0010I After 97000 nodes, 18758 on tree, -59.162893 best solution, best possible -60.007736 (71.28 seconds)
Cbc0010I After 98000 nodes, 18665 on tree, -59.162893 best solution, best possible -60.007728 (71.93 seconds)
Cbc0010I After 99000 nodes, 18979 on tree, -59.162893 best solution, best possible -60.007728 (72.79 seconds)
Cbc0010I After 100000 nodes, 19308 on tree, -59.162893 best solution, best possible -60.007728 (73.48 seconds)
Cbc0010I After 101000 nodes, 19091 on tree, -59.162893 best solution, best possible -60.007728 (73.91 seconds)
Cbc0010I After 102000 nodes, 19588 on tree, -59.162893 best solution, best possible -59.988783 (74.89 seconds)
Cbc0010I After 103000 nodes, 19974 on tree, -59.162893 best solution, best possible -59.988783 (75.38 seconds)
Cbc0010I After 104000 nodes, 20308 on tree, -59.162893 best solution, best possible -59.988783 (75.84 seconds)
Cbc0010I After 105000 nodes, 20147 on tree, -59.162893 best solution, best possible -59.988783 (76.15 seconds)
Cbc0010I After 106000 nodes, 20643 on tree, -59.162893 best solution, best possible -59.972081 (76.94 seconds)
Cbc0010I After 107000 nodes, 21018 on tree, -59.162893 best solution, best possible -59.972081 (77.44 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 27 rows 35 columns
Cbc0010I After 108000 nodes, 21313 on tree, -59.162893 best solution, best possible -59.972081 (77.85 seconds)
Cbc0010I After 109000 nodes, 21137 on tree, -59.162893 best solution, best possible -59.972081 (78.10 seconds)
Cbc0010I After 110000 nodes, 21633 on tree, -59.162893 best solution, best possible -59.956942 (78.83 seconds)
Cbc0010I After 111000 nodes, 22012 on tree, -59.162893 best solution, best possible -59.956942 (79.24 seconds)
Cbc0010I After 112000 nodes, 22294 on tree, -59.162893 best solution, best possible -59.956942 (79.63 seconds)
Cbc0010I After 113000 nodes, 22121 on tree, -59.162893 best solution, best possible -59.956942 (79.89 seconds)
Cbc0010I After 114000 nodes, 22619 on tree, -59.162893 best solution, best possible -59.942781 (80.64 seconds)
Cbc0010I After 115000 nodes, 22984 on tree, -59.162893 best solution, best possible -59.942781 (81.04 seconds)
Cbc0010I After 116000 nodes, 23269 on tree, -59.162893 best solution, best possible -59.942781 (81.46 seconds)
Cbc0010I After 117000 nodes, 23106 on tree, -59.162893 best solution, best possible -59.942781 (81.71 seconds)
Cbc0010I After 118000 nodes, 23601 on tree, -59.162893 best solution, best possible -59.931163 (82.47 seconds)
Cbc0010I After 119000 nodes, 23963 on tree, -59.162893 best solution, best possible -59.931163 (82.91 seconds)
Cbc0010I After 120000 nodes, 24269 on tree, -59.162893 best solution, best possible -59.931163 (83.34 seconds)
Cbc0010I After 121000 nodes, 24144 on tree, -59.162893 best solution, best possible -59.931163 (83.61 seconds)
Cbc0010I After 122000 nodes, 24639 on tree, -59.162893 best solution, best possible -59.919102 (84.37 seconds)
Cbc0010I After 123000 nodes, 25026 on tree, -59.162893 best solution, best possible -59.919102 (84.80 seconds)
Cbc0010I After 124000 nodes, 25320 on tree, -59.162893 best solution, best possible -59.919102 (85.23 seconds)
Cbc0010I After 125000 nodes, 25146 on tree, -59.162893 best solution, best possible -59.919102 (85.49 seconds)
Cbc0010I After 126000 nodes, 25641 on tree, -59.162893 best solution, best possible -59.908544 (86.21 seconds)
Cbc0010I After 127000 nodes, 25967 on tree, -59.162893 best solution, best possible -59.908544 (86.62 seconds)
Cbc0010I After 128000 nodes, 26266 on tree, -59.162893 best solution, best possible -59.908544 (87.00 seconds)
Cbc0010I After 129000 nodes, 26167 on tree, -59.162893 best solution, best possible -59.908544 (87.27 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 32 rows 39 columns
Cbc0010I After 130000 nodes, 26664 on tree, -59.162893 best solution, best possible -59.89872 (87.92 seconds)
Cbc0010I After 131000 nodes, 27010 on tree, -59.162893 best solution, best possible -59.89872 (88.30 seconds)
Cbc0010I After 132000 nodes, 27301 on tree, -59.162893 best solution, best possible -59.89872 (88.66 seconds)
Cbc0010I After 133000 nodes, 27117 on tree, -59.162893 best solution, best possible -59.89872 (88.87 seconds)
Cbc0010I After 134000 nodes, 27612 on tree, -59.162893 best solution, best possible -59.890112 (89.48 seconds)
Cbc0010I After 135000 nodes, 27966 on tree, -59.162893 best solution, best possible -59.890112 (89.89 seconds)
Cbc0010I After 136000 nodes, 28216 on tree, -59.162893 best solution, best possible -59.890112 (90.28 seconds)
Cbc0010I After 137000 nodes, 28075 on tree, -59.162893 best solution, best possible -59.890112 (90.55 seconds)
Cbc0010I After 138000 nodes, 28568 on tree, -59.162893 best solution, best possible -59.881622 (91.26 seconds)
Cbc0010I After 139000 nodes, 28903 on tree, -59.162893 best solution, best possible -59.881622 (91.70 seconds)
Cbc0010I After 140000 nodes, 29174 on tree, -59.162893 best solution, best possible -59.881622 (92.09 seconds)
Cbc0010I After 141000 nodes, 28972 on tree, -59.162893 best solution, best possible -59.881622 (92.38 seconds)
Cbc0010I After 142000 nodes, 29459 on tree, -59.162893 best solution, best possible -59.873908 (93.09 seconds)
Cbc0010I After 143000 nodes, 29773 on tree, -59.162893 best solution, best possible -59.873908 (93.49 seconds)
Cbc0010I After 144000 nodes, 30015 on tree, -59.162893 best solution, best possible -59.873908 (93.84 seconds)
Cbc0010I After 145000 nodes, 29807 on tree, -59.162893 best solution, best possible -59.873908 (94.10 seconds)
Cbc0010I After 146000 nodes, 30293 on tree, -59.162893 best solution, best possible -59.866723 (94.84 seconds)
Cbc0010I After 147000 nodes, 30580 on tree, -59.162893 best solution, best possible -59.866723 (95.22 seconds)
Cbc0010I After 148000 nodes, 30854 on tree, -59.162893 best solution, best possible -59.866723 (95.61 seconds)
Cbc0010I After 149000 nodes, 30709 on tree, -59.162893 best solution, best possible -59.866723 (95.87 seconds)
Cbc0010I After 150000 nodes, 31192 on tree, -59.162893 best solution, best possible -59.859657 (96.60 seconds)
Cbc0010I After 151000 nodes, 31513 on tree, -59.162893 best solution, best possible -59.859657 (96.98 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 32 rows 38 columns
Cbc0010I After 152000 nodes, 31791 on tree, -59.162893 best solution, best possible -59.859657 (97.34 seconds)
Cbc0010I After 153000 nodes, 31647 on tree, -59.162893 best solution, best possible -59.859657 (97.59 seconds)
Cbc0010I After 154000 nodes, 32132 on tree, -59.162893 best solution, best possible -59.852349 (98.23 seconds)
Cbc0010I After 155000 nodes, 32450 on tree, -59.162893 best solution, best possible -59.852349 (98.57 seconds)
Cbc0010I After 156000 nodes, 32701 on tree, -59.162893 best solution, best possible -59.852349 (98.92 seconds)
Cbc0010I After 157000 nodes, 32495 on tree, -59.162893 best solution, best possible -59.852349 (99.15 seconds)
Cbc0010I After 158000 nodes, 32978 on tree, -59.162893 best solution, best possible -59.845187 (99.82 seconds)
Cbc0010I After 159000 nodes, 33240 on tree, -59.162893 best solution, best possible -59.845187 (100.20 seconds)
Cbc0010I After 160000 nodes, 33507 on tree, -59.162893 best solution, best possible -59.845187 (100.63 seconds)
Cbc0010I After 161000 nodes, 33384 on tree, -59.162893 best solution, best possible -59.845187 (100.93 seconds)
Cbc0010I After 162000 nodes, 33875 on tree, -59.162893 best solution, best possible -59.838275 (101.70 seconds)
Cbc0010I After 163000 nodes, 34177 on tree, -59.162893 best solution, best possible -59.838275 (102.12 seconds)
Cbc0010I After 164000 nodes, 34434 on tree, -59.162893 best solution, best possible -59.838275 (102.48 seconds)
Cbc0010I After 165000 nodes, 34216 on tree, -59.162893 best solution, best possible -59.838275 (102.73 seconds)
Cbc0010I After 166000 nodes, 34706 on tree, -59.162893 best solution, best possible -59.832113 (103.39 seconds)
Cbc0010I After 167000 nodes, 34986 on tree, -59.162893 best solution, best possible -59.832113 (103.81 seconds)
Cbc0010I After 168000 nodes, 35202 on tree, -59.162893 best solution, best possible -59.832113 (104.21 seconds)
Cbc0010I After 169000 nodes, 35035 on tree, -59.162893 best solution, best possible -59.832113 (104.55 seconds)
Cbc0010I After 170000 nodes, 35514 on tree, -59.162893 best solution, best possible -59.826191 (105.35 seconds)
Cbc0010I After 171000 nodes, 35824 on tree, -59.162893 best solution, best possible -59.826191 (105.76 seconds)
Cbc0010I After 172000 nodes, 36060 on tree, -59.162893 best solution, best possible -59.826191 (106.23 seconds)
Cbc0010I After 173000 nodes, 35794 on tree, -59.162893 best solution, best possible -59.826191 (106.49 seconds)
Cbc0010I After 174000 nodes, 36268 on tree, -59.162893 best solution, best possible -59.820393 (107.23 seconds)
Cbc0010I After 175000 nodes, 36528 on tree, -59.162893 best solution, best possible -59.820393 (107.60 seconds)
Cbc0010I After 176000 nodes, 36751 on tree, -59.162893 best solution, best possible -59.820393 (108.02 seconds)
Cbc0010I After 177000 nodes, 36619 on tree, -59.162893 best solution, best possible -59.820393 (108.34 seconds)
Cbc0010I After 178000 nodes, 37101 on tree, -59.162893 best solution, best possible -59.814833 (109.17 seconds)
Cbc0010I After 179000 nodes, 37362 on tree, -59.162893 best solution, best possible -59.814833 (109.61 seconds)
Cbc0010I After 180000 nodes, 37600 on tree, -59.162893 best solution, best possible -59.814833 (110.06 seconds)
Cbc0010I After 181000 nodes, 37335 on tree, -59.162893 best solution, best possible -59.814833 (110.31 seconds)
Cbc0010I After 182000 nodes, 37804 on tree, -59.162893 best solution, best possible -59.809383 (111.03 seconds)
Cbc0010I After 183000 nodes, 38100 on tree, -59.162893 best solution, best possible -59.809383 (111.40 seconds)
Cbc0010I After 184000 nodes, 38343 on tree, -59.162893 best solution, best possible -59.809383 (111.77 seconds)
Cbc0010I After 185000 nodes, 38172 on tree, -59.162893 best solution, best possible -59.809383 (112.08 seconds)
Cbc0010I After 186000 nodes, 38639 on tree, -59.162893 best solution, best possible -59.803781 (112.82 seconds)
Cbc0010I After 187000 nodes, 38893 on tree, -59.162893 best solution, best possible -59.803781 (113.18 seconds)
Cbc0010I After 188000 nodes, 39132 on tree, -59.162893 best solution, best possible -59.803781 (113.55 seconds)
Cbc0010I After 189000 nodes, 38926 on tree, -59.162893 best solution, best possible -59.803781 (113.83 seconds)
Cbc0010I After 190000 nodes, 39400 on tree, -59.162893 best solution, best possible -59.798762 (114.61 seconds)
Cbc0010I After 191000 nodes, 39679 on tree, -59.162893 best solution, best possible -59.798762 (115.01 seconds)
Cbc0010I After 192000 nodes, 39912 on tree, -59.162893 best solution, best possible -59.798762 (115.42 seconds)
Cbc0010I After 193000 nodes, 39725 on tree, -59.162893 best solution, best possible -59.798762 (115.72 seconds)
Cbc0010I After 194000 nodes, 40195 on tree, -59.162893 best solution, best possible -59.793467 (116.49 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 26 rows 33 columns
Cbc0010I After 195000 nodes, 40459 on tree, -59.162893 best solution, best possible -59.793467 (116.82 seconds)
Cbc0010I After 196000 nodes, 40704 on tree, -59.162893 best solution, best possible -59.793467 (117.19 seconds)
Cbc0010I After 197000 nodes, 40470 on tree, -59.162893 best solution, best possible -59.793467 (117.46 seconds)
Cbc0010I After 198000 nodes, 40937 on tree, -59.162893 best solution, best possible -59.788655 (118.17 seconds)
Cbc0010I After 199000 nodes, 41198 on tree, -59.162893 best solution, best possible -59.788655 (118.53 seconds)
Cbc0010I After 200000 nodes, 41415 on tree, -59.162893 best solution, best possible -59.788655 (118.91 seconds)
Cbc0010I After 201000 nodes, 41172 on tree, -59.162893 best solution, best possible -59.788655 (119.20 seconds)
Cbc0010I After 202000 nodes, 41624 on tree, -59.162893 best solution, best possible -59.783706 (119.94 seconds)
Cbc0010I After 203000 nodes, 41889 on tree, -59.162893 best solution, best possible -59.783706 (120.33 seconds)
Cbc0010I After 204000 nodes, 42135 on tree, -59.162893 best solution, best possible -59.783706 (120.76 seconds)
Cbc0010I After 205000 nodes, 41915 on tree, -59.162893 best solution, best possible -59.783706 (121.07 seconds)
Cbc0010I After 206000 nodes, 42387 on tree, -59.162893 best solution, best possible -59.778921 (121.82 seconds)
Cbc0010I After 207000 nodes, 42607 on tree, -59.162893 best solution, best possible -59.778921 (122.19 seconds)
Cbc0010I After 208000 nodes, 42819 on tree, -59.162893 best solution, best possible -59.778921 (122.61 seconds)
Cbc0010I After 209000 nodes, 42557 on tree, -59.162893 best solution, best possible -59.778921 (122.96 seconds)
Cbc0010I After 210000 nodes, 43006 on tree, -59.162893 best solution, best possible -59.773739 (123.78 seconds)
Cbc0010I After 211000 nodes, 43257 on tree, -59.162893 best solution, best possible -59.773739 (124.20 seconds)
Cbc0010I After 212000 nodes, 43470 on tree, -59.162893 best solution, best possible -59.773739 (124.61 seconds)
Cbc0010I After 213000 nodes, 43242 on tree, -59.162893 best solution, best possible -59.773739 (124.93 seconds)
Cbc0010I After 214000 nodes, 43703 on tree, -59.162893 best solution, best possible -59.769168 (125.77 seconds)
Cbc0010I After 215000 nodes, 43955 on tree, -59.162893 best solution, best possible -59.769168 (126.14 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 32 rows 40 columns
Cbc0010I After 216000 nodes, 44154 on tree, -59.162893 best solution, best possible -59.769168 (126.58 seconds)
Cbc0010I After 217000 nodes, 43917 on tree, -59.162893 best solution, best possible -59.769168 (126.88 seconds)
Cbc0010I After 218000 nodes, 44380 on tree, -59.162893 best solution, best possible -59.764406 (127.68 seconds)
Cbc0010I After 219000 nodes, 44611 on tree, -59.162893 best solution, best possible -59.764406 (128.04 seconds)
Cbc0010I After 220000 nodes, 44824 on tree, -59.162893 best solution, best possible -59.764406 (128.44 seconds)
Cbc0010I After 221000 nodes, 44568 on tree, -59.162893 best solution, best possible -59.764406 (128.74 seconds)
Cbc0010I After 222000 nodes, 45019 on tree, -59.162893 best solution, best possible -59.75973 (129.50 seconds)
Cbc0010I After 223000 nodes, 45271 on tree, -59.162893 best solution, best possible -59.759729 (129.87 seconds)
Cbc0010I After 224000 nodes, 45479 on tree, -59.162893 best solution, best possible -59.759729 (130.32 seconds)
Cbc0010I After 225000 nodes, 45242 on tree, -59.162893 best solution, best possible -59.759729 (130.63 seconds)
Cbc0010I After 226000 nodes, 45690 on tree, -59.162893 best solution, best possible -59.75563 (131.53 seconds)
Cbc0010I After 227000 nodes, 45917 on tree, -59.162893 best solution, best possible -59.75563 (131.91 seconds)
Cbc0010I After 228000 nodes, 46123 on tree, -59.162893 best solution, best possible -59.75563 (132.38 seconds)
Cbc0010I After 229000 nodes, 45858 on tree, -59.162893 best solution, best possible -59.75563 (132.70 seconds)
Cbc0010I After 230000 nodes, 46293 on tree, -59.162893 best solution, best possible -59.751379 (133.61 seconds)
Cbc0010I After 231000 nodes, 46538 on tree, -59.162893 best solution, best possible -59.751379 (134.04 seconds)
Cbc0010I After 232000 nodes, 46731 on tree, -59.162893 best solution, best possible -59.751379 (134.56 seconds)
Cbc0010I After 233000 nodes, 46468 on tree, -59.162893 best solution, best possible -59.751379 (134.91 seconds)
Cbc0010I After 234000 nodes, 46895 on tree, -59.162893 best solution, best possible -59.747568 (135.92 seconds)
Cbc0010I After 235000 nodes, 47107 on tree, -59.162893 best solution, best possible -59.747568 (136.34 seconds)
Cbc0010I After 236000 nodes, 47313 on tree, -59.162893 best solution, best possible -59.747568 (136.89 seconds)
Cbc0010I After 237000 nodes, 47125 on tree, -59.162893 best solution, best possible -59.747568 (137.28 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 29 rows 36 columns
Cbc0010I After 238000 nodes, 47552 on tree, -59.162893 best solution, best possible -59.743666 (138.21 seconds)
Cbc0010I After 239000 nodes, 47789 on tree, -59.162893 best solution, best possible -59.743666 (138.62 seconds)
Cbc0010I After 240000 nodes, 47982 on tree, -59.162893 best solution, best possible -59.743666 (139.03 seconds)
Cbc0010I After 241000 nodes, 47636 on tree, -59.162893 best solution, best possible -59.743666 (139.31 seconds)
Cbc0010I After 242000 nodes, 48069 on tree, -59.162893 best solution, best possible -59.73979 (140.16 seconds)
Cbc0010I After 243000 nodes, 48309 on tree, -59.162893 best solution, best possible -59.73979 (140.65 seconds)
Cbc0010I After 244000 nodes, 48498 on tree, -59.162893 best solution, best possible -59.73979 (141.17 seconds)
Cbc0010I After 245000 nodes, 48196 on tree, -59.162893 best solution, best possible -59.73979 (141.53 seconds)
Cbc0010I After 246000 nodes, 48605 on tree, -59.162893 best solution, best possible -59.736012 (142.56 seconds)
Cbc0010I After 247000 nodes, 48865 on tree, -59.162893 best solution, best possible -59.736012 (143.01 seconds)
Cbc0010I After 248000 nodes, 49050 on tree, -59.162893 best solution, best possible -59.736012 (143.50 seconds)
Cbc0010I After 249000 nodes, 48848 on tree, -59.162893 best solution, best possible -59.736012 (143.89 seconds)
Cbc0010I After 250000 nodes, 49277 on tree, -59.162893 best solution, best possible -59.732616 (144.88 seconds)
Cbc0010I After 251000 nodes, 49518 on tree, -59.162893 best solution, best possible -59.732616 (145.34 seconds)
Cbc0010I After 252000 nodes, 49704 on tree, -59.162893 best solution, best possible -59.732616 (145.80 seconds)
Cbc0010I After 253000 nodes, 49386 on tree, -59.162893 best solution, best possible -59.732616 (146.13 seconds)
Cbc0010I After 254000 nodes, 49827 on tree, -59.162893 best solution, best possible -59.729144 (147.12 seconds)
Cbc0010I After 255000 nodes, 50035 on tree, -59.162893 best solution, best possible -59.729144 (147.62 seconds)
Cbc0010I After 256000 nodes, 50216 on tree, -59.162893 best solution, best possible -59.729144 (148.23 seconds)
Cbc0010I After 257000 nodes, 49899 on tree, -59.162893 best solution, best possible -59.729144 (148.59 seconds)
Cbc0010I After 258000 nodes, 50318 on tree, -59.162893 best solution, best possible -59.725648 (149.57 seconds)
Cbc0010I After 259000 nodes, 50549 on tree, -59.162893 best solution, best possible -59.725648 (150.04 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 30 rows 40 columns
Cbc0010I After 260000 nodes, 50713 on tree, -59.162893 best solution, best possible -59.725648 (150.54 seconds)
Cbc0010I After 261000 nodes, 50459 on tree, -59.162893 best solution, best possible -59.725648 (150.88 seconds)
Cbc0010I After 262000 nodes, 50873 on tree, -59.162893 best solution, best possible -59.72215 (151.79 seconds)
Cbc0010I After 263000 nodes, 51071 on tree, -59.162893 best solution, best possible -59.72215 (152.24 seconds)
Cbc0010I After 264000 nodes, 51216 on tree, -59.162893 best solution, best possible -59.72215 (152.72 seconds)
Cbc0010I After 265000 nodes, 50953 on tree, -59.162893 best solution, best possible -59.72215 (153.07 seconds)
Cbc0010I After 266000 nodes, 51371 on tree, -59.162893 best solution, best possible -59.718379 (154.00 seconds)
Cbc0010I After 267000 nodes, 51596 on tree, -59.162893 best solution, best possible -59.718379 (154.52 seconds)
Cbc0010I After 268000 nodes, 51746 on tree, -59.162893 best solution, best possible -59.718379 (155.06 seconds)
Cbc0010I After 269000 nodes, 51449 on tree, -59.162893 best solution, best possible -59.718379 (155.44 seconds)
Cbc0010I After 270000 nodes, 51847 on tree, -59.162893 best solution, best possible -59.714551 (156.54 seconds)
Cbc0010I After 271000 nodes, 52059 on tree, -59.162893 best solution, best possible -59.714551 (157.11 seconds)
Cbc0010I After 272000 nodes, 52228 on tree, -59.162893 best solution, best possible -59.714551 (157.69 seconds)
Cbc0010I After 273000 nodes, 51866 on tree, -59.162893 best solution, best possible -59.714551 (158.01 seconds)
Cbc0010I After 274000 nodes, 52266 on tree, -59.162893 best solution, best possible -59.711021 (159.07 seconds)
Cbc0010I After 275000 nodes, 52477 on tree, -59.162893 best solution, best possible -59.711021 (159.64 seconds)
Cbc0010I After 276000 nodes, 52640 on tree, -59.162893 best solution, best possible -59.711021 (160.20 seconds)
Cbc0010I After 277000 nodes, 52303 on tree, -59.162893 best solution, best possible -59.711021 (160.56 seconds)
Cbc0010I After 278000 nodes, 52707 on tree, -59.162893 best solution, best possible -59.707493 (161.60 seconds)
Cbc0010I After 279000 nodes, 52928 on tree, -59.162893 best solution, best possible -59.707493 (162.18 seconds)
Cbc0010I After 280000 nodes, 53061 on tree, -59.162893 best solution, best possible -59.707493 (162.84 seconds)
Cbc0010I After 281000 nodes, 52753 on tree, -59.162893 best solution, best possible -59.707493 (163.18 seconds)
Cbc0010I After 282000 nodes, 53147 on tree, -59.162893 best solution, best possible -59.704022 (164.30 seconds)
Cbc0010I After 283000 nodes, 53349 on tree, -59.162893 best solution, best possible -59.704022 (164.87 seconds)
Cbc0010I After 284000 nodes, 53514 on tree, -59.162893 best solution, best possible -59.704022 (165.48 seconds)
Cbc0010I After 285000 nodes, 53244 on tree, -59.162893 best solution, best possible -59.704022 (165.91 seconds)
Cbc0010I After 286000 nodes, 53629 on tree, -59.162893 best solution, best possible -59.700488 (167.07 seconds)
Cbc0010I After 287000 nodes, 53804 on tree, -59.162893 best solution, best possible -59.700488 (167.62 seconds)
Cbc0010I After 288000 nodes, 53944 on tree, -59.162893 best solution, best possible -59.700488 (168.27 seconds)
Cbc0010I After 289000 nodes, 53604 on tree, -59.162893 best solution, best possible -59.700488 (168.69 seconds)
Cbc0010I After 290000 nodes, 53974 on tree, -59.162893 best solution, best possible -59.696584 (169.88 seconds)
Cbc0010I After 291000 nodes, 54172 on tree, -59.162893 best solution, best possible -59.696584 (170.47 seconds)
Cbc0010I After 292000 nodes, 54319 on tree, -59.162893 best solution, best possible -59.696584 (171.12 seconds)
Cbc0010I After 293000 nodes, 54005 on tree, -59.162893 best solution, best possible -59.696584 (171.52 seconds)
Cbc0010I After 294000 nodes, 54404 on tree, -59.162893 best solution, best possible -59.693146 (172.67 seconds)
Cbc0010I After 295000 nodes, 54600 on tree, -59.162893 best solution, best possible -59.693146 (173.22 seconds)
Cbc0010I After 296000 nodes, 54729 on tree, -59.162893 best solution, best possible -59.693146 (173.95 seconds)
Cbc0010I After 297000 nodes, 54391 on tree, -59.162893 best solution, best possible -59.693146 (174.33 seconds)
Cbc0010I After 298000 nodes, 54755 on tree, -59.162893 best solution, best possible -59.689948 (175.57 seconds)
Cbc0010I After 299000 nodes, 54951 on tree, -59.162893 best solution, best possible -59.689948 (176.19 seconds)
Cbc0010I After 300000 nodes, 55082 on tree, -59.162893 best solution, best possible -59.689948 (176.87 seconds)
Cbc0010I After 301000 nodes, 54753 on tree, -59.162893 best solution, best possible -59.689948 (177.23 seconds)
Cbc0010I After 302000 nodes, 55158 on tree, -59.162893 best solution, best possible -59.686449 (178.45 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 29 rows 36 columns
Cbc0010I After 303000 nodes, 55362 on tree, -59.162893 best solution, best possible -59.686449 (178.99 seconds)
Cbc0010I After 304000 nodes, 55505 on tree, -59.162893 best solution, best possible -59.686449 (179.59 seconds)
Cbc0010I After 305000 nodes, 55140 on tree, -59.162893 best solution, best possible -59.686449 (179.91 seconds)
Cbc0010I After 306000 nodes, 55515 on tree, -59.162893 best solution, best possible -59.682967 (180.96 seconds)
Cbc0010I After 307000 nodes, 55678 on tree, -59.162893 best solution, best possible -59.682967 (181.55 seconds)
Cbc0010I After 308000 nodes, 55776 on tree, -59.162893 best solution, best possible -59.682967 (182.16 seconds)
Cbc0010I After 309000 nodes, 55435 on tree, -59.162893 best solution, best possible -59.682967 (182.52 seconds)
Cbc0010I After 310000 nodes, 55810 on tree, -59.162893 best solution, best possible -59.679576 (183.64 seconds)
Cbc0010I After 311000 nodes, 55976 on tree, -59.162893 best solution, best possible -59.679576 (184.27 seconds)
Cbc0010I After 312000 nodes, 56116 on tree, -59.162893 best solution, best possible -59.679576 (184.93 seconds)
Cbc0010I After 313000 nodes, 55739 on tree, -59.162893 best solution, best possible -59.679576 (185.31 seconds)
Cbc0010I After 314000 nodes, 56103 on tree, -59.162893 best solution, best possible -59.676005 (186.60 seconds)
Cbc0010I After 315000 nodes, 56260 on tree, -59.162893 best solution, best possible -59.676005 (187.24 seconds)
Cbc0010I After 316000 nodes, 56399 on tree, -59.162893 best solution, best possible -59.676005 (188.01 seconds)
Cbc0010I After 317000 nodes, 56033 on tree, -59.162893 best solution, best possible -59.676005 (188.41 seconds)
Cbc0010I After 318000 nodes, 56393 on tree, -59.162893 best solution, best possible -59.672675 (189.64 seconds)
Cbc0010I After 319000 nodes, 56547 on tree, -59.162893 best solution, best possible -59.672675 (190.31 seconds)
Cbc0010I After 320000 nodes, 56648 on tree, -59.162893 best solution, best possible -59.672675 (191.10 seconds)
Cbc0010I After 321000 nodes, 56271 on tree, -59.162893 best solution, best possible -59.672675 (191.52 seconds)
Cbc0010I After 322000 nodes, 56608 on tree, -59.162893 best solution, best possible -59.669004 (192.82 seconds)
Cbc0010I After 323000 nodes, 56772 on tree, -59.162893 best solution, best possible -59.669004 (193.50 seconds)
Cbc0010I After 324000 nodes, 56867 on tree, -59.162893 best solution, best possible -59.669004 (194.28 seconds)
Cbc0010I After 325000 nodes, 56516 on tree, -59.162893 best solution, best possible -59.669004 (194.70 seconds)
Cbc0010I After 326000 nodes, 56845 on tree, -59.162893 best solution, best possible -59.665589 (196.05 seconds)
Cbc0010I After 327000 nodes, 56999 on tree, -59.162893 best solution, best possible -59.665589 (196.78 seconds)
Cbc0010I After 328000 nodes, 57107 on tree, -59.162893 best solution, best possible -59.665589 (197.49 seconds)
Cbc0010I After 329000 nodes, 56681 on tree, -59.162893 best solution, best possible -59.665589 (197.84 seconds)
Cbc0010I After 330000 nodes, 57023 on tree, -59.162893 best solution, best possible -59.662241 (199.08 seconds)
Cbc0010I After 331000 nodes, 57157 on tree, -59.162893 best solution, best possible -59.662241 (199.85 seconds)
Cbc0010I After 332000 nodes, 57240 on tree, -59.162893 best solution, best possible -59.662241 (200.70 seconds)
Cbc0010I After 333000 nodes, 56879 on tree, -59.162893 best solution, best possible -59.662241 (201.13 seconds)
Cbc0010I After 334000 nodes, 57200 on tree, -59.162893 best solution, best possible -59.658769 (202.42 seconds)
Cbc0010I After 335000 nodes, 57331 on tree, -59.162893 best solution, best possible -59.658769 (203.17 seconds)
Cbc0010I After 336000 nodes, 57416 on tree, -59.162893 best solution, best possible -59.658769 (204.01 seconds)
Cbc0010I After 337000 nodes, 57034 on tree, -59.162893 best solution, best possible -59.658769 (204.42 seconds)
Cbc0010I After 338000 nodes, 57340 on tree, -59.162893 best solution, best possible -59.655607 (205.81 seconds)
Cbc0010I After 339000 nodes, 57423 on tree, -59.162893 best solution, best possible -59.655607 (206.67 seconds)
Cbc0010I After 340000 nodes, 57479 on tree, -59.162893 best solution, best possible -59.655607 (207.48 seconds)
Cbc0010I After 341000 nodes, 57150 on tree, -59.162893 best solution, best possible -59.655607 (207.91 seconds)
Cbc0010I After 342000 nodes, 57472 on tree, -59.162893 best solution, best possible -59.652377 (209.29 seconds)
Cbc0010I After 343000 nodes, 57549 on tree, -59.162893 best solution, best possible -59.652377 (210.06 seconds)
Cbc0010I After 344000 nodes, 57594 on tree, -59.162893 best solution, best possible -59.652377 (210.93 seconds)
Cbc0010I After 345000 nodes, 57245 on tree, -59.162893 best solution, best possible -59.652377 (211.39 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 23 rows 29 columns
Cbc0010I After 346000 nodes, 57569 on tree, -59.162893 best solution, best possible -59.649122 (212.69 seconds)
Cbc0010I After 347000 nodes, 57649 on tree, -59.162893 best solution, best possible -59.649122 (213.45 seconds)
Cbc0010I After 348000 nodes, 57693 on tree, -59.162893 best solution, best possible -59.649122 (214.20 seconds)
Cbc0010I After 349000 nodes, 57312 on tree, -59.162893 best solution, best possible -59.649122 (214.62 seconds)
Cbc0010I After 350000 nodes, 57612 on tree, -59.162893 best solution, best possible -59.645837 (215.78 seconds)
Cbc0010I After 351000 nodes, 57720 on tree, -59.162893 best solution, best possible -59.645837 (216.54 seconds)
Cbc0010I After 352000 nodes, 57766 on tree, -59.162893 best solution, best possible -59.645837 (217.27 seconds)
Cbc0010I After 353000 nodes, 57384 on tree, -59.162893 best solution, best possible -59.645837 (217.67 seconds)
Cbc0010I After 354000 nodes, 57692 on tree, -59.162893 best solution, best possible -59.642132 (218.83 seconds)
Cbc0010I After 355000 nodes, 57739 on tree, -59.162893 best solution, best possible -59.642132 (219.61 seconds)
Cbc0010I After 356000 nodes, 57758 on tree, -59.162893 best solution, best possible -59.642132 (220.46 seconds)
Cbc0010I After 357000 nodes, 57401 on tree, -59.162893 best solution, best possible -59.642132 (220.90 seconds)
Cbc0010I After 358000 nodes, 57709 on tree, -59.162893 best solution, best possible -59.638797 (222.19 seconds)
Cbc0010I After 359000 nodes, 57763 on tree, -59.162893 best solution, best possible -59.638797 (223.02 seconds)
Cbc0010I After 360000 nodes, 57783 on tree, -59.162893 best solution, best possible -59.638797 (223.92 seconds)
Cbc0010I After 361000 nodes, 57401 on tree, -59.162893 best solution, best possible -59.638797 (224.33 seconds)
Cbc0010I After 362000 nodes, 57693 on tree, -59.162893 best solution, best possible -59.635293 (225.73 seconds)
Cbc0010I After 363000 nodes, 57768 on tree, -59.162893 best solution, best possible -59.635293 (226.64 seconds)
Cbc0010I After 364000 nodes, 57791 on tree, -59.162893 best solution, best possible -59.635293 (227.44 seconds)
Cbc0010I After 365000 nodes, 57400 on tree, -59.162893 best solution, best possible -59.635293 (227.81 seconds)
Cbc0010I After 366000 nodes, 57683 on tree, -59.162893 best solution, best possible -59.631942 (228.97 seconds)
Cbc0010I After 367000 nodes, 57742 on tree, -59.162893 best solution, best possible -59.631942 (229.74 seconds)
Cbc0010I After 368000 nodes, 57775 on tree, -59.162893 best solution, best possible -59.631942 (230.50 seconds)
Cbc0010I After 369000 nodes, 57466 on tree, -59.162893 best solution, best possible -59.631942 (230.90 seconds)
Cbc0010I After 370000 nodes, 57757 on tree, -59.162893 best solution, best possible -59.628504 (232.06 seconds)
Cbc0010I After 371000 nodes, 57785 on tree, -59.162893 best solution, best possible -59.628504 (232.84 seconds)
Cbc0010I After 372000 nodes, 57800 on tree, -59.162893 best solution, best possible -59.628504 (233.67 seconds)
Cbc0010I After 373000 nodes, 57369 on tree, -59.162893 best solution, best possible -59.628504 (234.03 seconds)
Cbc0010I After 374000 nodes, 57657 on tree, -59.162893 best solution, best possible -59.625318 (235.34 seconds)
Cbc0010I After 375000 nodes, 57677 on tree, -59.162893 best solution, best possible -59.625318 (236.16 seconds)
Cbc0010I After 376000 nodes, 57702 on tree, -59.162893 best solution, best possible -59.625318 (237.04 seconds)
Cbc0010I After 377000 nodes, 57363 on tree, -59.162893 best solution, best possible -59.625318 (237.50 seconds)
Cbc0010I After 378000 nodes, 57639 on tree, -59.162893 best solution, best possible -59.621686 (238.88 seconds)
Cbc0010I After 379000 nodes, 57652 on tree, -59.162893 best solution, best possible -59.621686 (239.84 seconds)
Cbc0010I After 380000 nodes, 57634 on tree, -59.162893 best solution, best possible -59.621686 (240.84 seconds)
Cbc0010I After 381000 nodes, 57205 on tree, -59.162893 best solution, best possible -59.621686 (241.29 seconds)
Cbc0010I After 382000 nodes, 57462 on tree, -59.162893 best solution, best possible -59.61842 (242.71 seconds)
Cbc0010I After 383000 nodes, 57470 on tree, -59.162893 best solution, best possible -59.61842 (243.65 seconds)
Cbc0010I After 384000 nodes, 57422 on tree, -59.162893 best solution, best possible -59.61842 (244.55 seconds)
Cbc0010I After 385000 nodes, 57122 on tree, -59.162893 best solution, best possible -59.61842 (245.06 seconds)
Cbc0010I After 386000 nodes, 57382 on tree, -59.162893 best solution, best possible -59.615065 (246.44 seconds)
Cbc0010I After 387000 nodes, 57367 on tree, -59.162893 best solution, best possible -59.615065 (247.38 seconds)
Cbc0010I After 388000 nodes, 57324 on tree, -59.162893 best solution, best possible -59.615065 (248.36 seconds)
Cbc0010I After 389000 nodes, 56904 on tree, -59.162893 best solution, best possible -59.615065 (248.81 seconds)
Cbc0010I After 390000 nodes, 57141 on tree, -59.162893 best solution, best possible -59.612032 (250.16 seconds)
Cbc0010I After 391000 nodes, 57110 on tree, -59.162893 best solution, best possible -59.612032 (251.03 seconds)
Cbc0010I After 392000 nodes, 57094 on tree, -59.162893 best solution, best possible -59.612032 (251.90 seconds)
Cbc0010I After 393000 nodes, 56733 on tree, -59.162893 best solution, best possible -59.612032 (252.35 seconds)
Cbc0010I After 394000 nodes, 56986 on tree, -59.162893 best solution, best possible -59.608615 (253.66 seconds)
Cbc0010I After 395000 nodes, 56992 on tree, -59.162893 best solution, best possible -59.608615 (254.59 seconds)
Cbc0010I After 396000 nodes, 56934 on tree, -59.162893 best solution, best possible -59.608615 (255.56 seconds)
Cbc0010I After 397000 nodes, 56507 on tree, -59.162893 best solution, best possible -59.608615 (256.07 seconds)
Cbc0010I After 398000 nodes, 56754 on tree, -59.162893 best solution, best possible -59.60545 (257.45 seconds)
Cbc0010I After 399000 nodes, 56734 on tree, -59.162893 best solution, best possible -59.60545 (258.40 seconds)
Cbc0010I After 400000 nodes, 56729 on tree, -59.162893 best solution, best possible -59.60545 (259.25 seconds)
Cbc0010I After 401000 nodes, 56413 on tree, -59.162893 best solution, best possible -59.60545 (259.74 seconds)
Cbc0010I After 402000 nodes, 56637 on tree, -59.162893 best solution, best possible -59.602285 (260.98 seconds)
Cbc0010I After 403000 nodes, 56636 on tree, -59.162893 best solution, best possible -59.602285 (261.87 seconds)
Cbc0010I After 404000 nodes, 56631 on tree, -59.162893 best solution, best possible -59.602285 (262.76 seconds)
Cbc0010I After 405000 nodes, 56239 on tree, -59.162893 best solution, best possible -59.602285 (263.23 seconds)
Cbc0010I After 406000 nodes, 56473 on tree, -59.162893 best solution, best possible -59.59925 (264.61 seconds)
Cbc0010I After 407000 nodes, 56476 on tree, -59.162893 best solution, best possible -59.59925 (265.58 seconds)
Cbc0010I After 408000 nodes, 56420 on tree, -59.162893 best solution, best possible -59.59925 (266.52 seconds)
Cbc0010I After 409000 nodes, 56062 on tree, -59.162893 best solution, best possible -59.59925 (266.94 seconds)
Cbc0010I After 410000 nodes, 56262 on tree, -59.162893 best solution, best possible -59.595813 (268.30 seconds)
Cbc0010I After 411000 nodes, 56241 on tree, -59.162893 best solution, best possible -59.595813 (269.22 seconds)
Cbc0010I After 412000 nodes, 56201 on tree, -59.162893 best solution, best possible -59.595813 (270.09 seconds)
Cbc0010I After 413000 nodes, 55799 on tree, -59.162893 best solution, best possible -59.595813 (270.50 seconds)
Cbc0010I After 414000 nodes, 56043 on tree, -59.162893 best solution, best possible -59.5924 (271.90 seconds)
Cbc0010I After 415000 nodes, 56002 on tree, -59.162893 best solution, best possible -59.5924 (272.83 seconds)
Cbc0010I After 416000 nodes, 55967 on tree, -59.162893 best solution, best possible -59.5924 (273.72 seconds)
Cbc0010I After 417000 nodes, 55671 on tree, -59.162893 best solution, best possible -59.5924 (274.23 seconds)
Cbc0010I After 418000 nodes, 55889 on tree, -59.162893 best solution, best possible -59.589298 (275.58 seconds)
Cbc0010I After 419000 nodes, 55864 on tree, -59.162893 best solution, best possible -59.589298 (276.50 seconds)
Cbc0010I After 420000 nodes, 55808 on tree, -59.162893 best solution, best possible -59.589298 (277.41 seconds)
Cbc0010I After 421000 nodes, 55380 on tree, -59.162893 best solution, best possible -59.589298 (277.81 seconds)
Cbc0010I After 422000 nodes, 55607 on tree, -59.162893 best solution, best possible -59.585847 (279.21 seconds)
Cbc0010I After 423000 nodes, 55585 on tree, -59.162893 best solution, best possible -59.585847 (280.14 seconds)
Cbc0010I After 424000 nodes, 55528 on tree, -59.162893 best solution, best possible -59.585847 (281.06 seconds)
Cbc0010I After 425000 nodes, 55159 on tree, -59.162893 best solution, best possible -59.585847 (281.53 seconds)
Cbc0010I After 426000 nodes, 55407 on tree, -59.162893 best solution, best possible -59.582507 (282.92 seconds)
Cbc0010I After 427000 nodes, 55353 on tree, -59.162893 best solution, best possible -59.582507 (283.77 seconds)
Cbc0010I After 428000 nodes, 55293 on tree, -59.162893 best solution, best possible -59.582507 (284.65 seconds)
Cbc0010I After 429000 nodes, 54904 on tree, -59.162893 best solution, best possible -59.582507 (285.09 seconds)
Cbc0010I After 430000 nodes, 55127 on tree, -59.162893 best solution, best possible -59.57919 (286.36 seconds)
Cbc0010I After 431000 nodes, 55081 on tree, -59.162893 best solution, best possible -59.57919 (287.17 seconds)
Cbc0010I After 432000 nodes, 55025 on tree, -59.162893 best solution, best possible -59.57919 (287.98 seconds)
Cbc0010I After 433000 nodes, 54695 on tree, -59.162893 best solution, best possible -59.57919 (288.44 seconds)
Cbc0010I After 434000 nodes, 54896 on tree, -59.162893 best solution, best possible -59.575944 (289.66 seconds)
Cbc0010I After 435000 nodes, 54830 on tree, -59.162893 best solution, best possible -59.575944 (290.51 seconds)
Cbc0010I After 436000 nodes, 54784 on tree, -59.162893 best solution, best possible -59.575944 (291.38 seconds)
Cbc0010I After 437000 nodes, 54450 on tree, -59.162893 best solution, best possible -59.575944 (291.81 seconds)
Cbc0010I After 438000 nodes, 54644 on tree, -59.162893 best solution, best possible -59.572671 (293.06 seconds)
Cbc0010I After 439000 nodes, 54610 on tree, -59.162893 best solution, best possible -59.572671 (293.90 seconds)
Cbc0010I After 440000 nodes, 54551 on tree, -59.162893 best solution, best possible -59.572671 (294.80 seconds)
Cbc0010I After 441000 nodes, 54065 on tree, -59.162893 best solution, best possible -59.572671 (295.27 seconds)
Cbc0010I After 442000 nodes, 54257 on tree, -59.162893 best solution, best possible -59.569565 (296.64 seconds)
Cbc0010I After 443000 nodes, 54220 on tree, -59.162893 best solution, best possible -59.569565 (297.58 seconds)
Cbc0010I After 444000 nodes, 54127 on tree, -59.162893 best solution, best possible -59.569565 (298.51 seconds)
Cbc0010I After 445000 nodes, 53801 on tree, -59.162893 best solution, best possible -59.569565 (299.04 seconds)
Cbc0010I After 446000 nodes, 54012 on tree, -59.162893 best solution, best possible -59.566359 (300.44 seconds)
Cbc0010I After 447000 nodes, 53938 on tree, -59.162893 best solution, best possible -59.566359 (301.34 seconds)
Cbc0010I After 448000 nodes, 53863 on tree, -59.162893 best solution, best possible -59.566359 (302.26 seconds)
Cbc0010I After 449000 nodes, 53490 on tree, -59.162893 best solution, best possible -59.566359 (302.80 seconds)
Cbc0010I After 450000 nodes, 53691 on tree, -59.162893 best solution, best possible -59.563174 (304.14 seconds)
Cbc0010I After 451000 nodes, 53625 on tree, -59.162893 best solution, best possible -59.563174 (305.06 seconds)
Cbc0010I After 452000 nodes, 53533 on tree, -59.162893 best solution, best possible -59.563174 (305.99 seconds)
Cbc0010I After 453000 nodes, 53221 on tree, -59.162893 best solution, best possible -59.563174 (306.51 seconds)
Cbc0010I After 454000 nodes, 53422 on tree, -59.162893 best solution, best possible -59.560116 (307.85 seconds)
Cbc0010I After 455000 nodes, 53352 on tree, -59.162893 best solution, best possible -59.560116 (308.77 seconds)
Cbc0010I After 456000 nodes, 53261 on tree, -59.162893 best solution, best possible -59.560116 (309.66 seconds)
Cbc0010I After 457000 nodes, 52914 on tree, -59.162893 best solution, best possible -59.560116 (310.17 seconds)
Cbc0010I After 458000 nodes, 53095 on tree, -59.162893 best solution, best possible -59.556775 (311.52 seconds)
Cbc0010I After 459000 nodes, 52992 on tree, -59.162893 best solution, best possible -59.556775 (312.45 seconds)
Cbc0010I After 460000 nodes, 52907 on tree, -59.162893 best solution, best possible -59.556775 (313.37 seconds)
Cbc0010I After 461000 nodes, 52509 on tree, -59.162893 best solution, best possible -59.556775 (313.91 seconds)
Cbc0010I After 462000 nodes, 52688 on tree, -59.162893 best solution, best possible -59.553318 (315.27 seconds)
Cbc0010I After 463000 nodes, 52607 on tree, -59.162893 best solution, best possible -59.553318 (316.24 seconds)
Cbc0010I After 464000 nodes, 52517 on tree, -59.162893 best solution, best possible -59.553318 (317.19 seconds)
Cbc0010I After 465000 nodes, 52102 on tree, -59.162893 best solution, best possible -59.553318 (317.70 seconds)
Cbc0010I After 466000 nodes, 52262 on tree, -59.162893 best solution, best possible -59.550093 (319.07 seconds)
Cbc0010I After 467000 nodes, 52163 on tree, -59.162893 best solution, best possible -59.550093 (319.94 seconds)
Cbc0010I After 468000 nodes, 52072 on tree, -59.162893 best solution, best possible -59.550093 (320.86 seconds)
Cbc0010I After 469000 nodes, 51683 on tree, -59.162893 best solution, best possible -59.550093 (321.30 seconds)
Cbc0010I After 470000 nodes, 51883 on tree, -59.162893 best solution, best possible -59.546799 (322.67 seconds)
Cbc0010I After 471000 nodes, 51767 on tree, -59.162893 best solution, best possible -59.546799 (323.59 seconds)
Cbc0010I After 472000 nodes, 51675 on tree, -59.162893 best solution, best possible -59.546799 (324.57 seconds)
Cbc0010I After 473000 nodes, 51297 on tree, -59.162893 best solution, best possible -59.546799 (325.02 seconds)
Cbc0010I After 474000 nodes, 51455 on tree, -59.162893 best solution, best possible -59.543747 (326.36 seconds)
Cbc0010I After 475000 nodes, 51400 on tree, -59.162893 best solution, best possible -59.543747 (327.30 seconds)
Cbc0010I After 476000 nodes, 51291 on tree, -59.162893 best solution, best possible -59.543747 (328.18 seconds)
Cbc0010I After 477000 nodes, 50920 on tree, -59.162893 best solution, best possible -59.543747 (328.68 seconds)
Cbc0010I After 478000 nodes, 51076 on tree, -59.162893 best solution, best possible -59.540716 (330.00 seconds)
Cbc0010I After 479000 nodes, 50978 on tree, -59.162893 best solution, best possible -59.540716 (330.92 seconds)
Cbc0010I After 480000 nodes, 50876 on tree, -59.162893 best solution, best possible -59.540716 (331.82 seconds)
Cbc0010I After 481000 nodes, 50501 on tree, -59.162893 best solution, best possible -59.540716 (332.28 seconds)
Cbc0010I After 482000 nodes, 50690 on tree, -59.162893 best solution, best possible -59.537106 (333.60 seconds)
Cbc0010I After 483000 nodes, 50602 on tree, -59.162893 best solution, best possible -59.537106 (334.47 seconds)
Cbc0010I After 484000 nodes, 50484 on tree, -59.162893 best solution, best possible -59.537106 (335.34 seconds)
Cbc0010I After 485000 nodes, 50009 on tree, -59.162893 best solution, best possible -59.537106 (335.77 seconds)
Cbc0010I After 486000 nodes, 50167 on tree, -59.162893 best solution, best possible -59.533942 (337.08 seconds)
Cbc0010I After 487000 nodes, 50063 on tree, -59.162893 best solution, best possible -59.533942 (337.94 seconds)
Cbc0010I After 488000 nodes, 49936 on tree, -59.162893 best solution, best possible -59.533942 (338.82 seconds)
Cbc0010I After 489000 nodes, 49573 on tree, -59.162893 best solution, best possible -59.533942 (339.31 seconds)
Cbc0010I After 490000 nodes, 49712 on tree, -59.162893 best solution, best possible -59.530527 (340.61 seconds)
Cbc0010I After 491000 nodes, 49623 on tree, -59.162893 best solution, best possible -59.530527 (341.65 seconds)
Cbc0010I After 492000 nodes, 49493 on tree, -59.162893 best solution, best possible -59.530527 (342.56 seconds)
Cbc0010I After 493000 nodes, 49207 on tree, -59.162893 best solution, best possible -59.530527 (343.09 seconds)
Cbc0010I After 494000 nodes, 49351 on tree, -59.162893 best solution, best possible -59.527375 (344.42 seconds)
Cbc0010I After 495000 nodes, 49272 on tree, -59.162893 best solution, best possible -59.527375 (345.31 seconds)
Cbc0010I After 496000 nodes, 49160 on tree, -59.162893 best solution, best possible -59.527375 (346.20 seconds)
Cbc0010I After 497000 nodes, 48745 on tree, -59.162893 best solution, best possible -59.527375 (346.68 seconds)
Cbc0010I After 498000 nodes, 48886 on tree, -59.162893 best solution, best possible -59.524355 (347.98 seconds)
Cbc0010I After 499000 nodes, 48738 on tree, -59.162893 best solution, best possible -59.524355 (348.81 seconds)
Cbc0010I After 500000 nodes, 48607 on tree, -59.162893 best solution, best possible -59.524333 (349.71 seconds)
Cbc0010I After 501000 nodes, 48161 on tree, -59.162893 best solution, best possible -59.524333 (350.19 seconds)
Cbc0010I After 502000 nodes, 48299 on tree, -59.162893 best solution, best possible -59.52096 (351.47 seconds)
Cbc0010I After 503000 nodes, 48171 on tree, -59.162893 best solution, best possible -59.52096 (352.37 seconds)
Cbc0010I After 504000 nodes, 48059 on tree, -59.162893 best solution, best possible -59.52096 (353.32 seconds)
Cbc0010I After 505000 nodes, 47692 on tree, -59.162893 best solution, best possible -59.52096 (353.83 seconds)
Cbc0010I After 506000 nodes, 47828 on tree, -59.162893 best solution, best possible -59.517134 (355.11 seconds)
Cbc0010I After 507000 nodes, 47692 on tree, -59.162893 best solution, best possible -59.517134 (355.93 seconds)
Cbc0010I After 508000 nodes, 47578 on tree, -59.162893 best solution, best possible -59.517134 (356.80 seconds)
Cbc0010I After 509000 nodes, 47226 on tree, -59.162893 best solution, best possible -59.517134 (357.30 seconds)
Cbc0010I After 510000 nodes, 47345 on tree, -59.162893 best solution, best possible -59.513584 (358.60 seconds)
Cbc0010I After 511000 nodes, 47189 on tree, -59.162893 best solution, best possible -59.513584 (359.43 seconds)
Cbc0010I After 512000 nodes, 47066 on tree, -59.162893 best solution, best possible -59.51358 (360.32 seconds)
Cbc0010I After 513000 nodes, 46720 on tree, -59.162893 best solution, best possible -59.51358 (360.82 seconds)
Cbc0010I After 514000 nodes, 46842 on tree, -59.162893 best solution, best possible -59.510138 (362.13 seconds)
Cbc0010I After 515000 nodes, 46702 on tree, -59.162893 best solution, best possible -59.510126 (362.95 seconds)
Cbc0010I After 516000 nodes, 46573 on tree, -59.162893 best solution, best possible -59.510126 (363.84 seconds)
Cbc0010I After 517000 nodes, 46090 on tree, -59.162893 best solution, best possible -59.510126 (364.29 seconds)
Cbc0010I After 518000 nodes, 46201 on tree, -59.162893 best solution, best possible -59.506341 (365.56 seconds)
Cbc0010I After 519000 nodes, 46039 on tree, -59.162893 best solution, best possible -59.506341 (366.41 seconds)
Cbc0010I After 520000 nodes, 45894 on tree, -59.162893 best solution, best possible -59.506341 (367.28 seconds)
Cbc0010I After 521000 nodes, 45522 on tree, -59.162893 best solution, best possible -59.506341 (367.75 seconds)
Cbc0010I After 522000 nodes, 45638 on tree, -59.162893 best solution, best possible -59.502551 (369.02 seconds)
Cbc0010I After 523000 nodes, 45515 on tree, -59.162893 best solution, best possible -59.502551 (369.85 seconds)
Cbc0010I After 524000 nodes, 45397 on tree, -59.162893 best solution, best possible -59.502551 (370.71 seconds)
Cbc0010I After 525000 nodes, 45017 on tree, -59.162893 best solution, best possible -59.502551 (371.10 seconds)
Cbc0010I After 526000 nodes, 45133 on tree, -59.162893 best solution, best possible -59.49904 (372.37 seconds)
Cbc0010I After 527000 nodes, 45009 on tree, -59.162893 best solution, best possible -59.49904 (373.24 seconds)
Cbc0010I After 528000 nodes, 44855 on tree, -59.162893 best solution, best possible -59.49904 (374.12 seconds)
Cbc0010I After 529000 nodes, 44441 on tree, -59.162893 best solution, best possible -59.49904 (374.56 seconds)
Cbc0010I After 530000 nodes, 44535 on tree, -59.162893 best solution, best possible -59.495242 (375.86 seconds)
Cbc0010I After 531000 nodes, 44374 on tree, -59.162893 best solution, best possible -59.495242 (376.74 seconds)
Cbc0010I After 532000 nodes, 44257 on tree, -59.162893 best solution, best possible -59.495242 (377.64 seconds)
Cbc0010I After 533000 nodes, 43890 on tree, -59.162893 best solution, best possible -59.495242 (378.07 seconds)
Cbc0010I After 534000 nodes, 43985 on tree, -59.162893 best solution, best possible -59.49126 (379.35 seconds)
Cbc0010I After 535000 nodes, 43811 on tree, -59.162893 best solution, best possible -59.491254 (380.19 seconds)
Cbc0010I After 536000 nodes, 43662 on tree, -59.162893 best solution, best possible -59.491254 (381.07 seconds)
Cbc0010I After 537000 nodes, 43269 on tree, -59.162893 best solution, best possible -59.491254 (381.49 seconds)
Cbc0010I After 538000 nodes, 43352 on tree, -59.162893 best solution, best possible -59.487364 (382.79 seconds)
Cbc0010I After 539000 nodes, 43203 on tree, -59.162893 best solution, best possible -59.487364 (383.66 seconds)
Cbc0010I After 540000 nodes, 43056 on tree, -59.162893 best solution, best possible -59.487364 (384.54 seconds)
Cbc0010I After 541000 nodes, 42728 on tree, -59.162893 best solution, best possible -59.487364 (384.97 seconds)
Cbc0010I After 542000 nodes, 42787 on tree, -59.162893 best solution, best possible -59.483166 (386.25 seconds)
Cbc0010I After 543000 nodes, 42637 on tree, -59.162893 best solution, best possible -59.483166 (387.10 seconds)
Cbc0010I After 544000 nodes, 42499 on tree, -59.162893 best solution, best possible -59.483166 (388.01 seconds)
Cbc0010I After 545000 nodes, 41975 on tree, -59.162893 best solution, best possible -59.483166 (388.42 seconds)
Cbc0010I After 546000 nodes, 42077 on tree, -59.162893 best solution, best possible -59.479055 (389.69 seconds)
Cbc0010I After 547000 nodes, 41927 on tree, -59.162893 best solution, best possible -59.479041 (390.58 seconds)
Cbc0010I After 548000 nodes, 41789 on tree, -59.162893 best solution, best possible -59.479041 (391.50 seconds)
Cbc0010I After 549000 nodes, 41502 on tree, -59.162893 best solution, best possible -59.479041 (392.01 seconds)
Cbc0010I After 550000 nodes, 41561 on tree, -59.162893 best solution, best possible -59.474842 (393.28 seconds)
Cbc0010I After 551000 nodes, 41397 on tree, -59.162893 best solution, best possible -59.474842 (394.16 seconds)
Cbc0010I After 552000 nodes, 41244 on tree, -59.162893 best solution, best possible -59.474842 (395.08 seconds)
Cbc0010I After 553000 nodes, 40755 on tree, -59.162893 best solution, best possible -59.474842 (395.56 seconds)
Cbc0010I After 554000 nodes, 40807 on tree, -59.162893 best solution, best possible -59.470711 (396.87 seconds)
Cbc0010I After 555000 nodes, 40664 on tree, -59.162893 best solution, best possible -59.470711 (397.75 seconds)
Cbc0010I After 556000 nodes, 40511 on tree, -59.162893 best solution, best possible -59.470711 (398.62 seconds)
Cbc0010I After 557000 nodes, 40133 on tree, -59.162893 best solution, best possible -59.470711 (399.14 seconds)
Cbc0010I After 558000 nodes, 40169 on tree, -59.162893 best solution, best possible -59.466488 (400.41 seconds)
Cbc0010I After 559000 nodes, 39982 on tree, -59.162893 best solution, best possible -59.466488 (401.28 seconds)
Cbc0010I After 560000 nodes, 39809 on tree, -59.162893 best solution, best possible -59.466488 (402.20 seconds)
Cbc0010I After 561000 nodes, 39439 on tree, -59.162893 best solution, best possible -59.466488 (402.73 seconds)
Cbc0010I After 562000 nodes, 39470 on tree, -59.162893 best solution, best possible -59.462516 (404.00 seconds)
Cbc0010I After 563000 nodes, 39303 on tree, -59.162893 best solution, best possible -59.462516 (404.88 seconds)
Cbc0010I After 564000 nodes, 39117 on tree, -59.162893 best solution, best possible -59.462516 (405.77 seconds)
Cbc0010I After 565000 nodes, 38654 on tree, -59.162893 best solution, best possible -59.462516 (406.24 seconds)
Cbc0010I After 566000 nodes, 38668 on tree, -59.162893 best solution, best possible -59.458267 (407.46 seconds)
Cbc0010I After 567000 nodes, 38496 on tree, -59.162893 best solution, best possible -59.458267 (408.34 seconds)
Cbc0010I After 568000 nodes, 38273 on tree, -59.162893 best solution, best possible -59.458267 (409.24 seconds)
Cbc0010I After 569000 nodes, 37879 on tree, -59.162893 best solution, best possible -59.458267 (409.76 seconds)
Cbc0010I After 570000 nodes, 37897 on tree, -59.162893 best solution, best possible -59.453969 (411.02 seconds)
Cbc0010I After 571000 nodes, 37716 on tree, -59.162893 best solution, best possible -59.453969 (411.91 seconds)
Cbc0010I After 572000 nodes, 37540 on tree, -59.162893 best solution, best possible -59.453969 (412.79 seconds)
Cbc0010I After 573000 nodes, 37136 on tree, -59.162893 best solution, best possible -59.453969 (413.19 seconds)
Cbc0010I After 574000 nodes, 37186 on tree, -59.162893 best solution, best possible -59.449871 (414.50 seconds)
Cbc0010I After 575000 nodes, 36981 on tree, -59.162893 best solution, best possible -59.449871 (415.34 seconds)
Cbc0010I After 576000 nodes, 36801 on tree, -59.162893 best solution, best possible -59.449871 (416.24 seconds)
Cbc0010I After 577000 nodes, 36370 on tree, -59.162893 best solution, best possible -59.449871 (416.67 seconds)
Cbc0010I After 578000 nodes, 36369 on tree, -59.162893 best solution, best possible -59.445713 (417.91 seconds)
Cbc0010I After 579000 nodes, 36159 on tree, -59.162893 best solution, best possible -59.445713 (418.75 seconds)
Cbc0010I After 580000 nodes, 35964 on tree, -59.162893 best solution, best possible -59.445713 (419.64 seconds)
Cbc0010I After 581000 nodes, 35555 on tree, -59.162893 best solution, best possible -59.445713 (420.11 seconds)
Cbc0010I After 582000 nodes, 35549 on tree, -59.162893 best solution, best possible -59.441464 (421.35 seconds)
Cbc0010I After 583000 nodes, 35346 on tree, -59.162893 best solution, best possible -59.441464 (422.23 seconds)
Cbc0010I After 584000 nodes, 35141 on tree, -59.162893 best solution, best possible -59.441464 (423.12 seconds)
Cbc0010I After 585000 nodes, 34741 on tree, -59.162893 best solution, best possible -59.441464 (423.59 seconds)
Cbc0010I After 586000 nodes, 34718 on tree, -59.162893 best solution, best possible -59.43728 (424.83 seconds)
Cbc0010I After 587000 nodes, 34517 on tree, -59.162893 best solution, best possible -59.43728 (425.68 seconds)
Cbc0010I After 588000 nodes, 34325 on tree, -59.162893 best solution, best possible -59.43728 (426.54 seconds)
Cbc0010I After 589000 nodes, 33924 on tree, -59.162893 best solution, best possible -59.43728 (426.99 seconds)
Cbc0010I After 590000 nodes, 33895 on tree, -59.162893 best solution, best possible -59.432942 (428.22 seconds)
Cbc0010I After 591000 nodes, 33685 on tree, -59.162893 best solution, best possible -59.432942 (429.05 seconds)
Cbc0010I After 592000 nodes, 33479 on tree, -59.162893 best solution, best possible -59.432942 (429.92 seconds)
Cbc0010I After 593000 nodes, 33124 on tree, -59.162893 best solution, best possible -59.432942 (430.40 seconds)
Cbc0010I After 594000 nodes, 33107 on tree, -59.162893 best solution, best possible -59.428646 (431.64 seconds)
Cbc0010I After 595000 nodes, 32887 on tree, -59.162893 best solution, best possible -59.428646 (432.49 seconds)
Cbc0010I After 596000 nodes, 32694 on tree, -59.162893 best solution, best possible -59.428646 (433.37 seconds)
Cbc0010I After 597000 nodes, 32220 on tree, -59.162893 best solution, best possible -59.428646 (433.81 seconds)
Cbc0010I After 598000 nodes, 32183 on tree, -59.162893 best solution, best possible -59.424254 (435.00 seconds)
Cbc0010I After 599000 nodes, 31949 on tree, -59.162893 best solution, best possible -59.424254 (435.84 seconds)
Cbc0010I After 600000 nodes, 31740 on tree, -59.162893 best solution, best possible -59.424254 (436.69 seconds)
Cbc0010I After 601000 nodes, 31365 on tree, -59.162893 best solution, best possible -59.424254 (437.17 seconds)
Cbc0010I After 602000 nodes, 31333 on tree, -59.162893 best solution, best possible -59.419743 (438.41 seconds)
Cbc0010I After 603000 nodes, 31092 on tree, -59.162893 best solution, best possible -59.419743 (439.21 seconds)
Cbc0010I After 604000 nodes, 30850 on tree, -59.162893 best solution, best possible -59.419743 (440.06 seconds)
Cbc0038I Full problem 81 rows 144 columns, reduced to 22 rows 27 columns
Cbc0010I After 605000 nodes, 30437 on tree, -59.162893 best solution, best possible -59.419743 (440.54 seconds)
Cbc0010I After 606000 nodes, 30382 on tree, -59.162893 best solution, best possible -59.415349 (441.70 seconds)
Cbc0010I After 607000 nodes, 30142 on tree, -59.162893 best solution, best possible -59.415343 (442.50 seconds)
Cbc0010I After 608000 nodes, 29911 on tree, -59.162893 best solution, best possible -59.415343 (443.34 seconds)
Cbc0010I After 609000 nodes, 29446 on tree, -59.162893 best solution, best possible -59.415343 (443.81 seconds)
Cbc0010I After 610000 nodes, 29395 on tree, -59.162893 best solution, best possible -59.411499 (444.99 seconds)
Cbc0010I After 611000 nodes, 29156 on tree, -59.162893 best solution, best possible -59.411499 (445.82 seconds)
Cbc0010I After 612000 nodes, 28915 on tree, -59.162893 best solution, best possible -59.411499 (446.64 seconds)
Cbc0010I After 613000 nodes, 28490 on tree, -59.162893 best solution, best possible -59.411499 (447.06 seconds)
Cbc0010I After 614000 nodes, 28435 on tree, -59.162893 best solution, best possible -59.407219 (448.23 seconds)
Cbc0010I After 615000 nodes, 28177 on tree, -59.162893 best solution, best possible -59.407219 (449.05 seconds)
Cbc0010I After 616000 nodes, 27916 on tree, -59.162893 best solution, best possible -59.407219 (449.88 seconds)
Cbc0010I After 617000 nodes, 27540 on tree, -59.162893 best solution, best possible -59.407219 (450.31 seconds)
Cbc0010I After 618000 nodes, 27458 on tree, -59.162893 best solution, best possible -59.402929 (451.44 seconds)
Cbc0010I After 619000 nodes, 27189 on tree, -59.162893 best solution, best possible -59.402929 (452.25 seconds)
Cbc0010I After 620000 nodes, 26941 on tree, -59.162893 best solution, best possible -59.402929 (453.09 seconds)
Cbc0010I After 621000 nodes, 26482 on tree, -59.162893 best solution, best possible -59.402929 (453.49 seconds)
Cbc0010I After 622000 nodes, 26381 on tree, -59.162893 best solution, best possible -59.398511 (454.62 seconds)
Cbc0010I After 623000 nodes, 26106 on tree, -59.162893 best solution, best possible -59.398511 (455.40 seconds)
Cbc0010I After 624000 nodes, 25835 on tree, -59.162893 best solution, best possible -59.398511 (456.23 seconds)
Cbc0010I After 625000 nodes, 25441 on tree, -59.162893 best solution, best possible -59.398511 (456.66 seconds)
Cbc0010I After 626000 nodes, 25324 on tree, -59.162893 best solution, best possible -59.39427 (457.80 seconds)
Cbc0010I After 627000 nodes, 25054 on tree, -59.162893 best solution, best possible -59.39427 (458.58 seconds)
Cbc0010I After 628000 nodes, 24792 on tree, -59.162893 best solution, best possible -59.39427 (459.38 seconds)
Cbc0010I After 629000 nodes, 24374 on tree, -59.162893 best solution, best possible -59.39427 (459.82 seconds)
Cbc0010I After 630000 nodes, 24287 on tree, -59.162893 best solution, best possible -59.389568 (460.98 seconds)
Cbc0010I After 631000 nodes, 24017 on tree, -59.162893 best solution, best possible -59.389568 (461.75 seconds)
Cbc0010I After 632000 nodes, 23732 on tree, -59.162893 best solution, best possible -59.389568 (462.56 seconds)
Cbc0010I After 633000 nodes, 23285 on tree, -59.162893 best solution, best possible -59.389568 (463.00 seconds)
Cbc0010I After 634000 nodes, 23171 on tree, -59.162893 best solution, best possible -59.385533 (464.10 seconds)
Cbc0010I After 635000 nodes, 22848 on tree, -59.162893 best solution, best possible -59.385533 (464.86 seconds)
Cbc0010I After 636000 nodes, 22578 on tree, -59.162893 best solution, best possible -59.385522 (465.68 seconds)
Cbc0010I After 637000 nodes, 22137 on tree, -59.162893 best solution, best possible -59.385522 (466.14 seconds)
Cbc0010I After 638000 nodes, 22014 on tree, -59.162893 best solution, best possible -59.379896 (467.26 seconds)
Cbc0010I After 639000 nodes, 21721 on tree, -59.162893 best solution, best possible -59.379896 (468.03 seconds)
Cbc0010I After 640000 nodes, 21433 on tree, -59.162893 best solution, best possible -59.379896 (468.86 seconds)
Cbc0010I After 641000 nodes, 20980 on tree, -59.162893 best solution, best possible -59.379896 (469.27 seconds)
Cbc0010I After 642000 nodes, 20850 on tree, -59.162893 best solution, best possible -59.373709 (470.39 seconds)
Cbc0010I After 643000 nodes, 20566 on tree, -59.162893 best solution, best possible -59.373709 (471.17 seconds)
Cbc0010I After 644000 nodes, 20276 on tree, -59.162893 best solution, best possible -59.373709 (471.94 seconds)
Cbc0010I After 645000 nodes, 19861 on tree, -59.162893 best solution, best possible -59.373709 (472.34 seconds)
Cbc0010I After 646000 nodes, 19729 on tree, -59.162893 best solution, best possible -59.367414 (473.44 seconds)
Cbc0010I After 647000 nodes, 19430 on tree, -59.162893 best solution, best possible -59.367414 (474.18 seconds)
Cbc0010I After 648000 nodes, 19133 on tree, -59.162893 best solution, best possible -59.367414 (474.95 seconds)
Cbc0010I After 649000 nodes, 18691 on tree, -59.162893 best solution, best possible -59.367414 (475.34 seconds)
Cbc0010I After 650000 nodes, 18527 on tree, -59.162893 best solution, best possible -59.360928 (476.39 seconds)
Cbc0010I After 651000 nodes, 18202 on tree, -59.162893 best solution, best possible -59.360921 (477.11 seconds)
Cbc0010I After 652000 nodes, 17878 on tree, -59.162893 best solution, best possible -59.360921 (477.83 seconds)
Cbc0010I After 653000 nodes, 17421 on tree, -59.162893 best solution, best possible -59.360921 (478.22 seconds)
Cbc0010I After 654000 nodes, 17239 on tree, -59.162893 best solution, best possible -59.354903 (479.29 seconds)
Cbc0010I After 655000 nodes, 16906 on tree, -59.162893 best solution, best possible -59.354903 (480.03 seconds)
Cbc0010I After 656000 nodes, 16573 on tree, -59.162893 best solution, best possible -59.354903 (480.76 seconds)
Cbc0010I After 657000 nodes, 16133 on tree, -59.162893 best solution, best possible -59.354903 (481.18 seconds)
Cbc0010I After 658000 nodes, 15947 on tree, -59.162893 best solution, best possible -59.348832 (482.22 seconds)
Cbc0010I After 659000 nodes, 15631 on tree, -59.162893 best solution, best possible -59.348832 (482.94 seconds)
Cbc0010I After 660000 nodes, 15288 on tree, -59.162893 best solution, best possible -59.348832 (483.64 seconds)
Cbc0010I After 661000 nodes, 14834 on tree, -59.162893 best solution, best possible -59.348832 (484.05 seconds)
Cbc0010I After 662000 nodes, 14620 on tree, -59.162893 best solution, best possible -59.342576 (485.02 seconds)
Cbc0010I After 663000 nodes, 14262 on tree, -59.162893 best solution, best possible -59.342576 (485.72 seconds)
Cbc0010I After 664000 nodes, 13918 on tree, -59.162893 best solution, best possible -59.342576 (486.41 seconds)
Cbc0010I After 665000 nodes, 13475 on tree, -59.162893 best solution, best possible -59.342576 (486.78 seconds)
Cbc0010I After 666000 nodes, 13246 on tree, -59.162893 best solution, best possible -59.335929 (487.76 seconds)
Cbc0010I After 667000 nodes, 12881 on tree, -59.162893 best solution, best possible -59.335929 (488.44 seconds)
Cbc0010I After 668000 nodes, 12533 on tree, -59.162893 best solution, best possible -59.33589 (489.17 seconds)
Cbc0010I After 669000 nodes, 12078 on tree, -59.162893 best solution, best possible -59.33589 (489.53 seconds)
Cbc0010I After 670000 nodes, 11823 on tree, -59.162893 best solution, best possible -59.328075 (490.45 seconds)
Cbc0010I After 671000 nodes, 11478 on tree, -59.162893 best solution, best possible -59.328075 (491.11 seconds)
Cbc0010I After 672000 nodes, 11105 on tree, -59.162893 best solution, best possible -59.328075 (491.81 seconds)
Cbc0010I After 673000 nodes, 10674 on tree, -59.162893 best solution, best possible -59.328075 (492.18 seconds)
Cbc0010I After 674000 nodes, 10412 on tree, -59.162893 best solution, best possible -59.319286 (493.10 seconds)
Cbc0010I After 675000 nodes, 10062 on tree, -59.162893 best solution, best possible -59.319286 (493.76 seconds)
Cbc0010I After 676000 nodes, 9697 on tree, -59.162893 best solution, best possible -59.319286 (494.43 seconds)
Cbc0010I After 677000 nodes, 9432 on tree, -59.162893 best solution, best possible -59.309814 (495.35 seconds)
Cbc0010I After 678000 nodes, 9032 on tree, -59.162893 best solution, best possible -59.309814 (495.94 seconds)
Cbc0010I After 679000 nodes, 8725 on tree, -59.162893 best solution, best possible -59.300317 (496.78 seconds)
Cbc0010I After 680000 nodes, 8370 on tree, -59.162893 best solution, best possible -59.29182 (497.58 seconds)
Cbc0010I After 681000 nodes, 8012 on tree, -59.162893 best solution, best possible -59.284289 (498.34 seconds)
Cbc0010I After 682000 nodes, 7594 on tree, -59.162893 best solution, best possible -59.284289 (498.86 seconds)
Cbc0010I After 683000 nodes, 7216 on tree, -59.162893 best solution, best possible -59.276579 (499.55 seconds)
Cbc0010I After 684000 nodes, 6817 on tree, -59.162893 best solution, best possible -59.269059 (500.21 seconds)
Cbc0010I After 685000 nodes, 6396 on tree, -59.162893 best solution, best possible -59.260711 (500.85 seconds)
Cbc0010I After 686000 nodes, 5958 on tree, -59.162893 best solution, best possible -59.260711 (501.32 seconds)
Cbc0010I After 687000 nodes, 5534 on tree, -59.162893 best solution, best possible -59.252517 (501.93 seconds)
Cbc0010I After 688000 nodes, 5105 on tree, -59.162893 best solution, best possible -59.244435 (502.49 seconds)
Cbc0010I After 689000 nodes, 4659 on tree, -59.162893 best solution, best possible -59.237413 (503.02 seconds)
Cbc0010I After 690000 nodes, 4198 on tree, -59.162893 best solution, best possible -59.237413 (503.43 seconds)
Cbc0010I After 691000 nodes, 3738 on tree, -59.162893 best solution, best possible -59.228227 (503.91 seconds)
Cbc0010I After 692000 nodes, 3273 on tree, -59.162893 best solution, best possible -59.219141 (504.37 seconds)
Cbc0010I After 693000 nodes, 2811 on tree, -59.162893 best solution, best possible -59.211194 (504.80 seconds)
Cbc0010I After 694000 nodes, 2335 on tree, -59.162893 best solution, best possible -59.211194 (505.12 seconds)
Cbc0010I After 695000 nodes, 1882 on tree, -59.162893 best solution, best possible -59.199981 (505.51 seconds)
Cbc0010I After 696000 nodes, 1413 on tree, -59.162893 best solution, best possible -59.188874 (505.86 seconds)
Cbc0010I After 697000 nodes, 936 on tree, -59.162893 best solution, best possible -59.180196 (506.16 seconds)
Cbc0010I After 698000 nodes, 458 on tree, -59.162893 best solution, best possible -59.180196 (506.41 seconds)
Cbc0001I Search completed - best objective -59.16289328783717, took 11208277 iterations and 913208 nodes (506.69 seconds)
Cbc0032I Strong branching done 2382116 times (18748734 iterations), fathomed 163381 nodes and fixed 462627 variables
Cbc0041I Maximum depth 54, 2490509 variables fixed on reduced cost (complete fathoming 327 times, 214244 nodes taking 2192213 iterations)
Cuts at root node changed objective from -63.5382 to -61.1129
Probing was tried 100 times and created 0 cuts of which 3 were active after adding rounds of cuts (0.023 seconds)
Gomory was tried 184477 times and created 149711 cuts of which 0 were active after adding rounds of cuts (13.019 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 50 cuts of which 0 were active after adding rounds of cuts (0.053 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.055 seconds)
TwoMirCuts was tried 100 times and created 92 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                59.16289329
Enumerated nodes:               913208
Total iterations:               11208277
Time (CPU seconds):             468.82
Time (Wallclock seconds):       506.70

Option for printingOptions changed from normal to all
Total time (CPU seconds):       468.83   (Wallclock seconds):       506.71

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/3e149e48c2c34187972aebb5ef5525b7-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/3e149e48c2c34187972aebb5ef5525b7-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 16.9671 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -16.9299 iterations 6
Cbc0038I Solution found of -14.0819
Cbc0038I Cleaned solution of -14.0819
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -14.0819 to -14.2677 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.5376
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -16.9299 iterations 0
Cbc0038I Pass   3: suminf.    0.47320 (1) obj. -14.5376 iterations 5
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -14.8839 iterations 6
Cbc0038I Pass   5: suminf.    0.32796 (1) obj. -14.5376 iterations 3
Cbc0038I Pass   6: suminf.    0.20000 (1) obj. -14.9718 iterations 6
Cbc0038I Pass   7: suminf.    0.30676 (1) obj. -14.5376 iterations 3
Cbc0038I Pass   8: suminf.    0.69524 (2) obj. -14.5376 iterations 4
Cbc0038I Pass   9: suminf.    0.40000 (2) obj. -14.8152 iterations 7
Cbc0038I Pass  10: suminf.    0.63635 (2) obj. -14.5376 iterations 5
Cbc0038I Pass  11: suminf.    0.60035 (2) obj. -14.5376 iterations 2
Cbc0038I Pass  12: suminf.    0.09751 (1) obj. -14.5376 iterations 2
Cbc0038I Pass  13: suminf.    0.20000 (1) obj. -15.1096 iterations 7
Cbc0038I Pass  14: suminf.    0.15025 (1) obj. -14.5376 iterations 5
Cbc0038I Pass  15: suminf.    0.47717 (2) obj. -14.5376 iterations 4
Cbc0038I Pass  16: suminf.    0.44742 (2) obj. -14.5376 iterations 2
Cbc0038I Pass  17: suminf.    0.00000 (0) obj. -14.5763 iterations 9
Cbc0038I Solution found of -14.5763
Cbc0038I Cleaned solution of -14.5763
Cbc0038I Rounding solution of -14.5766 is better than previous of -14.5763

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 14 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -15.0547
Cbc0038I Pass  18: suminf.    0.80000 (4) obj. -16.9299 iterations 0
Cbc0038I Pass  19: suminf.    0.42282 (2) obj. -15.0547 iterations 9
Cbc0038I Pass  20: suminf.    0.37879 (2) obj. -15.0547 iterations 3
Cbc0038I Pass  21: suminf.    0.20740 (2) obj. -15.0547 iterations 6
Cbc0038I Pass  22: suminf.    1.72511 (6) obj. -15.0547 iterations 11
Cbc0038I Pass  23: suminf.    0.40618 (1) obj. -15.0547 iterations 2
Cbc0038I Pass  24: suminf.    0.60000 (2) obj. -15.3766 iterations 17
Cbc0038I Pass  25: suminf.    0.31760 (2) obj. -15.0547 iterations 10
Cbc0038I Pass  26: suminf.    0.27357 (2) obj. -15.0547 iterations 3
Cbc0038I Pass  27: suminf.    0.20000 (1) obj. -15.1093 iterations 9
Cbc0038I Pass  28: suminf.    0.26206 (1) obj. -15.0547 iterations 4
Cbc0038I Pass  29: suminf.    0.40618 (1) obj. -15.0547 iterations 13
Cbc0038I Pass  30: suminf.    1.72511 (6) obj. -15.0547 iterations 5
Cbc0038I Pass  31: suminf.    0.40618 (1) obj. -15.0547 iterations 3
Cbc0038I Pass  32: suminf.    0.48718 (2) obj. -15.0547 iterations 7
Cbc0038I Pass  33: suminf.    0.44084 (2) obj. -15.0547 iterations 2
Cbc0038I Pass  34: suminf.    0.59807 (2) obj. -15.0547 iterations 3
Cbc0038I Pass  35: suminf.    0.40618 (1) obj. -15.0547 iterations 1
Cbc0038I Pass  36: suminf.    1.72511 (6) obj. -15.0547 iterations 5
Cbc0038I Pass  37: suminf.    0.40618 (1) obj. -15.0547 iterations 3
Cbc0038I Pass  38: suminf.    0.40525 (2) obj. -15.0547 iterations 3
Cbc0038I Pass  39: suminf.    0.96703 (3) obj. -15.0547 iterations 9
Cbc0038I Pass  40: suminf.    0.80000 (3) obj. -16.1543 iterations 11
Cbc0038I Pass  41: suminf.    0.68323 (2) obj. -15.0547 iterations 8
Cbc0038I Pass  42: suminf.    0.61365 (2) obj. -15.0547 iterations 2
Cbc0038I Pass  43: suminf.    0.20000 (1) obj. -15.1096 iterations 10
Cbc0038I Pass  44: suminf.    0.26234 (1) obj. -15.0547 iterations 5
Cbc0038I Pass  45: suminf.    0.27863 (1) obj. -15.0547 iterations 4
Cbc0038I Pass  46: suminf.    0.40618 (1) obj. -15.0547 iterations 7
Cbc0038I Pass  47: suminf.    1.72511 (6) obj. -15.0547 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 18 rows 29 columns
Cbc0038I Mini branch and bound improved solution from -14.5763 to -14.5867 (0.02 seconds)
Cbc0038I Round again with cutoff of -15.6284
Cbc0038I Pass  47: suminf.    0.80000 (4) obj. -16.9299 iterations 0
Cbc0038I Pass  48: suminf.    0.45510 (3) obj. -15.6284 iterations 8
Cbc0038I Pass  49: suminf.    0.40000 (3) obj. -15.6284 iterations 4
Cbc0038I Pass  50: suminf.    0.61768 (2) obj. -15.6284 iterations 8
Cbc0038I Pass  51: suminf.    0.40000 (2) obj. -15.8078 iterations 6
Cbc0038I Pass  52: suminf.    0.62282 (2) obj. -15.6284 iterations 5
Cbc0038I Pass  53: suminf.    1.02600 (3) obj. -15.6284 iterations 9
Cbc0038I Pass  54: suminf.    0.40000 (2) obj. -15.7691 iterations 6
Cbc0038I Pass  55: suminf.    0.57470 (2) obj. -15.6284 iterations 3
Cbc0038I Pass  56: suminf.    0.80711 (3) obj. -15.6284 iterations 7
Cbc0038I Pass  57: suminf.    0.79103 (3) obj. -15.6284 iterations 5
Cbc0038I Pass  58: suminf.    0.95370 (3) obj. -15.6284 iterations 6
Cbc0038I Pass  59: suminf.    0.62379 (2) obj. -15.6284 iterations 2
Cbc0038I Pass  60: suminf.    0.40000 (2) obj. -15.8078 iterations 9
Cbc0038I Pass  61: suminf.    0.62282 (2) obj. -15.6284 iterations 5
Cbc0038I Pass  62: suminf.    1.46584 (5) obj. -15.6284 iterations 14
Cbc0038I Pass  63: suminf.    0.67134 (3) obj. -15.6284 iterations 4
Cbc0038I Pass  64: suminf.    1.06127 (3) obj. -15.6284 iterations 9
Cbc0038I Pass  65: suminf.    1.06660 (3) obj. -15.6284 iterations 4
Cbc0038I Pass  66: suminf.    0.60385 (2) obj. -15.6284 iterations 4
Cbc0038I Pass  67: suminf.    1.06114 (3) obj. -15.6284 iterations 4
Cbc0038I Pass  68: suminf.    0.60231 (6) obj. -15.6284 iterations 9
Cbc0038I Pass  69: suminf.    0.40000 (2) obj. -15.7691 iterations 5
Cbc0038I Pass  70: suminf.    0.57470 (2) obj. -15.6284 iterations 4
Cbc0038I Pass  71: suminf.    0.75642 (3) obj. -15.6284 iterations 3
Cbc0038I Pass  72: suminf.    0.67573 (3) obj. -15.6284 iterations 3
Cbc0038I Pass  73: suminf.    0.78305 (3) obj. -15.6284 iterations 5
Cbc0038I Pass  74: suminf.    0.95370 (3) obj. -15.6284 iterations 6
Cbc0038I Pass  75: suminf.    0.62379 (2) obj. -15.6284 iterations 2
Cbc0038I Pass  76: suminf.    0.40000 (2) obj. -15.8078 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 18 rows 27 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -14.5867 - took 0.03 seconds
Cbc0012I Integer solution of -14.586744 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 9 rows 11 columns
Cbc0031I 7 added rows had average density of 32.285714
Cbc0013I At root node, 7 cuts changed objective from -16.967065 to -15.485954 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 312 row cuts average 38.1 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 47 row cuts average 23.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -14.586744 best solution, best possible -15.485954 (0.10 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 13 rows 15 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 11 rows 14 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 14 rows 17 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 19 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 19 columns
Cbc0001I Search completed - best objective -14.58674408681689, took 9283 iterations and 434 nodes (0.34 seconds)
Cbc0032I Strong branching done 2806 times (11479 iterations), fathomed 123 nodes and fixed 65 variables
Cbc0035I Maximum depth 14, 675 variables fixed on reduced cost
Cuts at root node changed objective from -16.9671 to -15.486
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 611 times and created 1511 cuts of which 0 were active after adding rounds of cuts (0.036 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
TwoMirCuts was tried 611 times and created 125 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                14.58674409
Enumerated nodes:               434
Total iterations:               9283
Time (CPU seconds):             0.34
Time (Wallclock seconds):       0.34

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.34   (Wallclock seconds):       0.34

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/8359aff002854693b82656cac2b3321e-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/8359aff002854693b82656cac2b3321e-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 191 COLUMNS
At line 1125 RHS
At line 1312 BOUNDS
At line 1490 ENDATA
Problem MODEL has 186 rows, 177 columns and 467 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 45.6516 - 0.00 seconds
Cgl0004I processed model has 64 rows, 111 columns (111 integer (55 of which binary)) and 278 elements
Cbc0038I Initial state - 6 integers unsatisfied sum - 1.125
Cbc0038I Pass   1: suminf.    0.62500 (5) obj. -45.4083 iterations 12
Cbc0038I Solution found of -41.9219
Cbc0038I Cleaned solution of -41.9219
Cbc0038I Before mini branch and bound, 89 integers at bound fixed and 0 continuous of which 1 were internal integer and 0 internal continuous
Cbc0038I Full problem 64 rows 111 columns, reduced to 12 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -41.9219 to -43.212 (0.00 seconds)
Cbc0038I Round again with cutoff of -43.4559
Cbc0038I Pass   2: suminf.    0.62500 (5) obj. -45.4083 iterations 0
Cbc0038I Pass   3: suminf.    0.38385 (2) obj. -43.4559 iterations 13
Cbc0038I Pass   4: suminf.    0.25000 (2) obj. -43.6085 iterations 10
Cbc0038I Pass   5: suminf.    0.59737 (2) obj. -43.4559 iterations 8
Cbc0038I Pass   6: suminf.    0.25000 (2) obj. -43.7818 iterations 12
Cbc0038I Pass   7: suminf.    0.60265 (2) obj. -43.4559 iterations 6
Cbc0038I Pass   8: suminf.    0.33970 (2) obj. -43.4559 iterations 9
Cbc0038I Pass   9: suminf.    0.12500 (1) obj. -43.6089 iterations 11
Cbc0038I Pass  10: suminf.    0.28862 (1) obj. -43.4559 iterations 4
Cbc0038I Pass  11: suminf.    0.64448 (3) obj. -43.4559 iterations 17
Cbc0038I Pass  12: suminf.    0.60718 (3) obj. -43.4559 iterations 3
Cbc0038I Pass  13: suminf.    0.34628 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  14: suminf.    0.34628 (2) obj. -43.4559 iterations 0
Cbc0038I Pass  15: suminf.    0.41743 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  16: suminf.    0.89804 (6) obj. -43.4559 iterations 11
Cbc0038I Pass  17: suminf.    2.17738 (6) obj. -43.4559 iterations 5
Cbc0038I Pass  18: suminf.    0.41294 (2) obj. -43.4559 iterations 1
Cbc0038I Pass  19: suminf.    0.41294 (2) obj. -43.4559 iterations 0
Cbc0038I Pass  20: suminf.    0.47684 (2) obj. -43.4559 iterations 2
Cbc0038I Pass  21: suminf.    0.61884 (3) obj. -43.4559 iterations 8
Cbc0038I Pass  22: suminf.    0.60718 (3) obj. -43.4559 iterations 6
Cbc0038I Pass  23: suminf.    0.34628 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  24: suminf.    0.34628 (2) obj. -43.4559 iterations 0
Cbc0038I Pass  25: suminf.    0.41743 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  26: suminf.    0.72429 (2) obj. -43.4559 iterations 11
Cbc0038I Pass  27: suminf.    0.62690 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  28: suminf.    0.29346 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  29: suminf.    0.18086 (2) obj. -43.4559 iterations 6
Cbc0038I Pass  30: suminf.    0.27001 (2) obj. -43.4559 iterations 3
Cbc0038I Pass  31: suminf.    0.74847 (4) obj. -43.4559 iterations 19
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 65 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 111 columns, reduced to 28 rows 46 columns
Cbc0038I Mini branch and bound improved solution from -43.212 to -43.3304 (0.02 seconds)
Cbc0038I Round again with cutoff of -43.8951
Cbc0038I Pass  31: suminf.    0.62500 (5) obj. -45.4083 iterations 0
Cbc0038I Pass  32: suminf.    0.58658 (3) obj. -43.8951 iterations 16
Cbc0038I Pass  33: suminf.    0.46258 (3) obj. -43.8951 iterations 5
Cbc0038I Pass  34: suminf.    0.44501 (2) obj. -43.8951 iterations 9
Cbc0038I Pass  35: suminf.    0.50541 (2) obj. -43.8951 iterations 9
Cbc0038I Pass  36: suminf.    0.50513 (2) obj. -43.8951 iterations 6
Cbc0038I Pass  37: suminf.    0.50513 (2) obj. -43.8951 iterations 2
Cbc0038I Pass  38: suminf.    0.62544 (3) obj. -43.8951 iterations 22
Cbc0038I Pass  39: suminf.    0.25000 (2) obj. -44.1693 iterations 6
Cbc0038I Pass  40: suminf.    0.54685 (2) obj. -43.8951 iterations 4
Cbc0038I Pass  41: suminf.    0.31226 (3) obj. -43.8951 iterations 10
Cbc0038I Pass  42: suminf.    0.87846 (7) obj. -43.8951 iterations 5
Cbc0038I Pass  43: suminf.    0.25949 (2) obj. -43.8951 iterations 1
Cbc0038I Pass  44: suminf.    0.20765 (2) obj. -43.8951 iterations 8
Cbc0038I Pass  45: suminf.    0.12500 (1) obj. -43.9506 iterations 3
Cbc0038I Pass  46: suminf.    0.18440 (1) obj. -43.8951 iterations 3
Cbc0038I Pass  47: suminf.    2.52171 (7) obj. -43.8951 iterations 21
Cbc0038I Pass  48: suminf.    0.26018 (3) obj. -43.8951 iterations 5
Cbc0038I Pass  49: suminf.    0.53908 (2) obj. -43.8951 iterations 10
Cbc0038I Pass  50: suminf.    0.12500 (2) obj. -43.8951 iterations 4
Cbc0038I Pass  51: suminf.    0.12743 (1) obj. -43.8951 iterations 2
Cbc0038I Pass  52: suminf.    0.50916 (2) obj. -43.8951 iterations 11
Cbc0038I Pass  53: suminf.    0.25000 (2) obj. -44.0922 iterations 17
Cbc0038I Pass  54: suminf.    0.56869 (2) obj. -43.8951 iterations 10
Cbc0038I Pass  55: suminf.    0.52886 (2) obj. -43.8951 iterations 1
Cbc0038I Pass  56: suminf.    0.44501 (2) obj. -43.8951 iterations 5
Cbc0038I Pass  57: suminf.    0.50541 (2) obj. -43.8951 iterations 4
Cbc0038I Pass  58: suminf.    0.73025 (3) obj. -43.8951 iterations 4
Cbc0038I Pass  59: suminf.    0.71864 (3) obj. -43.8951 iterations 1
Cbc0038I Pass  60: suminf.    0.44501 (2) obj. -43.8951 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 55 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 111 columns, reduced to 33 rows 54 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -43.3304 - took 0.05 seconds
Cbc0012I Integer solution of -43.330419 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0012I Integer solution of -43.415038 found by DiveCoefficient after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 64 rows 111 columns, reduced to 6 rows 9 columns
Cbc0031I 16 added rows had average density of 80.25
Cbc0013I At root node, 16 cuts changed objective from -45.651564 to -44.591094 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 25 row cuts average 17.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1164 row cuts average 106.0 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 29 row cuts average 26.5 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 64 row cuts average 71.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 65 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -43.415038 best solution, best possible -44.591094 (0.33 seconds)
Cbc0038I Full problem 64 rows 111 columns, reduced to 15 rows 19 columns
Cbc0038I Full problem 64 rows 111 columns, reduced to 11 rows 14 columns
Cbc0038I Full problem 64 rows 111 columns, reduced to 8 rows 9 columns
Cbc0038I Full problem 64 rows 111 columns, reduced to 21 rows 27 columns
Cbc0038I Full problem 64 rows 111 columns, reduced to 24 rows 31 columns
Cbc0038I Full problem 64 rows 111 columns, reduced to 15 rows 20 columns
Cbc0001I Search completed - best objective -43.41503841429937, took 68489 iterations and 6634 nodes (1.59 seconds)
Cbc0032I Strong branching done 6492 times (50408 iterations), fathomed 182 nodes and fixed 651 variables
Cbc0041I Maximum depth 25, 3383 variables fixed on reduced cost (complete fathoming 70 times, 5756 nodes taking 50787 iterations)
Cuts at root node changed objective from -45.6516 to -44.5911
Probing was tried 100 times and created 25 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Gomory was tried 402 times and created 1523 cuts of which 0 were active after adding rounds of cuts (0.075 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 29 cuts of which 0 were active after adding rounds of cuts (0.022 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
TwoMirCuts was tried 100 times and created 64 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 100 times and created 65 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)

Result - Optimal solution found

Objective value:                43.41503841
Enumerated nodes:               6634
Total iterations:               68489
Time (CPU seconds):             1.53
Time (Wallclock seconds):       1.60

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.53   (Wallclock seconds):       1.60

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/321d1dc7c0a34792b72a10897a453d72-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/321d1dc7c0a34792b72a10897a453d72-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 16.2237 - 0.00 seconds
Cgl0004I processed model has 25 rows, 39 columns (39 integer (19 of which binary)) and 98 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (3) obj. -16.0986 iterations 11
Cbc0038I Solution found of -14.1613
Cbc0038I Cleaned solution of -14.1613
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous of which 2 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 39 columns, reduced to 5 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -14.1613 to -14.7014 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.8536
Cbc0038I Pass   2: suminf.    0.80000 (3) obj. -16.0986 iterations 0
Cbc0038I Pass   3: suminf.    0.53501 (2) obj. -14.8536 iterations 11
Cbc0038I Pass   4: suminf.    0.42793 (2) obj. -14.8536 iterations 2
Cbc0038I Pass   5: suminf.    0.20000 (1) obj. -15.1669 iterations 9
Cbc0038I Pass   6: suminf.    0.48034 (1) obj. -14.8536 iterations 2
Cbc0038I Pass   7: suminf.    0.13512 (1) obj. -14.8536 iterations 3
Cbc0038I Pass   8: suminf.    0.13512 (1) obj. -14.8536 iterations 1
Cbc0038I Pass   9: suminf.    0.68194 (7) obj. -14.8536 iterations 8
Cbc0038I Pass  10: suminf.    0.32791 (2) obj. -14.8536 iterations 3
Cbc0038I Pass  11: suminf.    0.80000 (2) obj. -15.4497 iterations 6
Cbc0038I Pass  12: suminf.    0.42914 (1) obj. -14.8536 iterations 3
Cbc0038I Pass  13: suminf.    0.40000 (1) obj. -14.8756 iterations 9
Cbc0038I Pass  14: suminf.    0.42307 (1) obj. -14.8536 iterations 2
Cbc0038I Pass  15: suminf.    0.97299 (4) obj. -14.8536 iterations 4
Cbc0038I Pass  16: suminf.    0.97299 (4) obj. -14.8536 iterations 1
Cbc0038I Pass  17: suminf.    0.80000 (2) obj. -15.4497 iterations 10
Cbc0038I Pass  18: suminf.    0.42914 (1) obj. -14.8536 iterations 3
Cbc0038I Pass  19: suminf.    0.40000 (1) obj. -14.8756 iterations 8
Cbc0038I Pass  20: suminf.    0.42307 (1) obj. -14.8536 iterations 2
Cbc0038I Pass  21: suminf.    1.03671 (3) obj. -14.8536 iterations 5
Cbc0038I Pass  22: suminf.    1.33768 (6) obj. -14.8536 iterations 3
Cbc0038I Pass  23: suminf.    0.73912 (2) obj. -14.8536 iterations 3
Cbc0038I Pass  24: suminf.    0.65299 (2) obj. -14.8536 iterations 1
Cbc0038I Solution found of -15.0249
Cbc0038I Cleaned solution of -15.0249
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 39 columns, reduced to 15 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -15.2647
Cbc0038I Pass  25: suminf.    0.80000 (3) obj. -16.0986 iterations 0
Cbc0038I Pass  26: suminf.    0.83130 (2) obj. -15.2647 iterations 11
Cbc0038I Pass  27: suminf.    0.60000 (2) obj. -15.4785 iterations 8
Cbc0038I Pass  28: suminf.    0.82560 (2) obj. -15.2647 iterations 5
Cbc0038I Pass  29: suminf.    0.46547 (2) obj. -15.2647 iterations 5
Cbc0038I Pass  30: suminf.    1.73577 (6) obj. -15.2647 iterations 3
Cbc0038I Pass  31: suminf.    0.52781 (2) obj. -15.2647 iterations 5
Cbc0038I Pass  32: suminf.    0.52781 (2) obj. -15.2647 iterations 0
Cbc0038I Pass  33: suminf.    0.60000 (2) obj. -15.7923 iterations 7
Cbc0038I Pass  34: suminf.    0.52429 (2) obj. -15.2647 iterations 4
Cbc0038I Pass  35: suminf.    0.83677 (7) obj. -15.2647 iterations 2
Cbc0038I Pass  36: suminf.    0.53874 (2) obj. -15.2647 iterations 3
Cbc0038I Pass  37: suminf.    0.53874 (2) obj. -15.2647 iterations 0
Cbc0038I Pass  38: suminf.    0.60000 (2) obj. -15.7923 iterations 6
Cbc0038I Pass  39: suminf.    0.52429 (2) obj. -15.2647 iterations 4
Cbc0038I Pass  40: suminf.    0.83677 (7) obj. -15.2647 iterations 2
Cbc0038I Pass  41: suminf.    0.53874 (2) obj. -15.2647 iterations 3
Cbc0038I Pass  42: suminf.    0.53874 (2) obj. -15.2647 iterations 0
Cbc0038I Pass  43: suminf.    0.60000 (2) obj. -15.7923 iterations 6
Cbc0038I Pass  44: suminf.    0.52429 (2) obj. -15.2647 iterations 4
Cbc0038I Pass  45: suminf.    0.83677 (7) obj. -15.2647 iterations 2
Cbc0038I Pass  46: suminf.    0.53874 (2) obj. -15.2647 iterations 3
Cbc0038I Pass  47: suminf.    0.53874 (2) obj. -15.2647 iterations 0
Cbc0038I Pass  48: suminf.    0.60000 (2) obj. -15.7923 iterations 6
Cbc0038I Pass  49: suminf.    0.52429 (2) obj. -15.2647 iterations 4
Cbc0038I Pass  50: suminf.    0.83677 (7) obj. -15.2647 iterations 2
Cbc0038I Pass  51: suminf.    0.53874 (2) obj. -15.2647 iterations 3
Cbc0038I Pass  52: suminf.    0.53874 (2) obj. -15.2647 iterations 0
Cbc0038I Pass  53: suminf.    0.60000 (2) obj. -15.7923 iterations 6
Cbc0038I Pass  54: suminf.    0.52429 (2) obj. -15.2647 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 39 columns, reduced to 11 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -15.0249 - took 0.01 seconds
Cbc0012I Integer solution of -15.024886 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 25 rows 39 columns, reduced to 6 rows 7 columns
Cbc0031I 6 added rows had average density of 23.333333
Cbc0013I At root node, 6 cuts changed objective from -16.223716 to -15.198686 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 6.5 elements, 3 column cuts (3 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 511 row cuts average 28.5 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 10 row cuts average 27.1 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 41 row cuts average 28.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -15.024886 best solution, best possible -15.198686 (0.07 seconds)
Cbc0001I Search completed - best objective -15.02488631755113, took 1406 iterations and 10 nodes (0.08 seconds)
Cbc0032I Strong branching done 96 times (417 iterations), fathomed 2 nodes and fixed 2 variables
Cbc0035I Maximum depth 3, 27 variables fixed on reduced cost
Cuts at root node changed objective from -16.2237 to -15.1987
Probing was tried 100 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 128 times and created 602 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Knapsack was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 128 times and created 90 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                15.02488632
Enumerated nodes:               10
Total iterations:               1406
Time (CPU seconds):             0.07
Time (Wallclock seconds):       0.08

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.08

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/5e33842fb3a54d3d973f59ef0e955b1c-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/5e33842fb3a54d3d973f59ef0e955b1c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 15.7603 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -15.6535 iterations 5
Cbc0038I Solution found of -13.7163
Cbc0038I Cleaned solution of -13.7163
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -13.7163 to -14.2502 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.4013
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -15.6535 iterations 0
Cbc0038I Pass   3: suminf.    0.27236 (1) obj. -14.4013 iterations 5
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -14.4684 iterations 4
Cbc0038I Pass   5: suminf.    0.27092 (1) obj. -14.4013 iterations 2
Cbc0038I Pass   6: suminf.    0.29202 (2) obj. -14.4013 iterations 2
Cbc0038I Pass   7: suminf.    1.83507 (5) obj. -14.4013 iterations 11
Cbc0038I Pass   8: suminf.    0.20000 (1) obj. -14.5692 iterations 4
Cbc0038I Pass   9: suminf.    0.37744 (1) obj. -14.4013 iterations 2
Cbc0038I Pass  10: suminf.    0.48802 (2) obj. -14.4013 iterations 2
Cbc0038I Pass  11: suminf.    0.47719 (1) obj. -14.4013 iterations 12
Cbc0038I Pass  12: suminf.    0.40000 (1) obj. -14.4478 iterations 3
Cbc0038I Pass  13: suminf.    0.47462 (1) obj. -14.4013 iterations 1
Cbc0038I Pass  14: suminf.    0.88352 (2) obj. -14.4013 iterations 7
Cbc0038I Pass  15: suminf.    0.88352 (2) obj. -14.4013 iterations 0
Cbc0038I Pass  16: suminf.    0.60000 (2) obj. -14.8561 iterations 8
Cbc0038I Pass  17: suminf.    0.32472 (1) obj. -14.4013 iterations 2
Cbc0038I Pass  18: suminf.    0.20000 (1) obj. -14.5193 iterations 4
Cbc0038I Pass  19: suminf.    0.32223 (1) obj. -14.4013 iterations 3
Cbc0038I Pass  20: suminf.    0.20000 (1) obj. -14.5193 iterations 4
Cbc0038I Pass  21: suminf.    0.40241 (5) obj. -14.4013 iterations 4
Cbc0038I Pass  22: suminf.    0.31771 (1) obj. -14.4013 iterations 9
Cbc0038I Pass  23: suminf.    0.20000 (1) obj. -14.4101 iterations 6
Cbc0038I Pass  24: suminf.    0.20932 (1) obj. -14.4013 iterations 3
Cbc0038I Pass  25: suminf.    0.66203 (2) obj. -14.4013 iterations 7
Cbc0038I Pass  26: suminf.    0.66203 (2) obj. -14.4013 iterations 1
Cbc0038I Pass  27: suminf.    0.60000 (2) obj. -14.7094 iterations 6
Cbc0038I Pass  28: suminf.    1.98670 (5) obj. -14.4013 iterations 9
Cbc0038I Pass  29: suminf.    0.20000 (1) obj. -14.5692 iterations 4
Cbc0038I Pass  30: suminf.    0.37744 (1) obj. -14.4013 iterations 3
Cbc0038I Pass  31: suminf.    0.75690 (2) obj. -14.4013 iterations 9
Cbc0038I Rounding solution of -14.3511 is better than previous of -14.2502

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 20 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -14.6731
Cbc0038I Pass  31: suminf.    0.80000 (4) obj. -15.6535 iterations 0
Cbc0038I Pass  32: suminf.    0.56287 (2) obj. -14.6731 iterations 6
Cbc0038I Pass  33: suminf.    0.37261 (2) obj. -14.6731 iterations 3
Cbc0038I Pass  34: suminf.    0.20000 (1) obj. -14.6869 iterations 9
Cbc0038I Pass  35: suminf.    0.22212 (1) obj. -14.6731 iterations 1
Cbc0038I Pass  36: suminf.    0.42442 (2) obj. -14.6731 iterations 8
Cbc0038I Pass  37: suminf.    0.20000 (1) obj. -14.7345 iterations 2
Cbc0038I Pass  38: suminf.    0.26488 (1) obj. -14.6731 iterations 1
Cbc0038I Pass  39: suminf.    0.40203 (1) obj. -14.6731 iterations 2
Cbc0038I Pass  40: suminf.    0.24036 (1) obj. -14.6731 iterations 5
Cbc0038I Pass  41: suminf.    1.75883 (6) obj. -14.6731 iterations 2
Cbc0038I Pass  42: suminf.    0.24036 (1) obj. -14.6731 iterations 2
Cbc0038I Pass  43: suminf.    0.24673 (1) obj. -14.6731 iterations 3
Cbc0038I Pass  44: suminf.    0.20000 (1) obj. -14.6869 iterations 4
Cbc0038I Pass  45: suminf.    0.22212 (1) obj. -14.6731 iterations 2
Cbc0038I Pass  46: suminf.    0.24673 (1) obj. -14.6731 iterations 2
Cbc0038I Pass  47: suminf.    0.40000 (2) obj. -14.9638 iterations 9
Cbc0038I Pass  48: suminf.    0.22212 (1) obj. -14.6731 iterations 3
Cbc0038I Pass  49: suminf.    0.24673 (1) obj. -14.6731 iterations 2
Cbc0038I Pass  50: suminf.    0.24673 (1) obj. -14.6731 iterations 1
Cbc0038I Pass  51: suminf.    1.07698 (4) obj. -14.6731 iterations 12
Cbc0038I Pass  52: suminf.    0.70222 (4) obj. -14.6731 iterations 3
Cbc0038I Pass  53: suminf.    0.43771 (1) obj. -14.6731 iterations 4
Cbc0038I Pass  54: suminf.    0.20000 (1) obj. -14.7345 iterations 2
Cbc0038I Pass  55: suminf.    0.26488 (1) obj. -14.6731 iterations 1
Cbc0038I Pass  56: suminf.    0.57682 (3) obj. -14.6731 iterations 5
Cbc0038I Pass  57: suminf.    0.85337 (3) obj. -14.6731 iterations 3
Cbc0038I Pass  58: suminf.    0.57682 (3) obj. -14.6731 iterations 4
Cbc0038I Pass  59: suminf.    0.23106 (2) obj. -14.6731 iterations 4
Cbc0038I Pass  60: suminf.    0.97866 (5) obj. -14.6731 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 14 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -14.3511 - took 0.01 seconds
Cbc0012I Integer solution of -14.35105 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 3 columns
Cbc0031I 8 added rows had average density of 18.875
Cbc0013I At root node, 8 cuts changed objective from -15.760328 to -14.543575 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 4 column cuts (4 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 679 row cuts average 33.5 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 6.7 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 2 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 29 row cuts average 21.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -14.35105 best solution, best possible -14.543575 (0.08 seconds)
Cbc0001I Search completed - best objective -14.35105030983707, took 1552 iterations and 12 nodes (0.09 seconds)
Cbc0032I Strong branching done 116 times (519 iterations), fathomed 3 nodes and fixed 4 variables
Cbc0035I Maximum depth 4, 23 variables fixed on reduced cost
Cuts at root node changed objective from -15.7603 to -14.5436
Probing was tried 100 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 124 times and created 708 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Knapsack was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 124 times and created 46 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                14.35105031
Enumerated nodes:               12
Total iterations:               1552
Time (CPU seconds):             0.09
Time (Wallclock seconds):       0.09

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.09

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/c4da6dd993374d7db5016adbcdf975bc-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/c4da6dd993374d7db5016adbcdf975bc-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 51 COLUMNS
At line 265 RHS
At line 312 BOUNDS
At line 354 ENDATA
Problem MODEL has 46 rows, 41 columns and 107 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 9.32713 - 0.00 seconds
Cgl0004I processed model has 16 rows, 24 columns (24 integer (12 of which binary)) and 60 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.75
Cbc0038I Pass   1: suminf.    0.75000 (3) obj. -9.24814 iterations 5
Cbc0038I Solution found of -7.89395
Cbc0038I Cleaned solution of -7.89395
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -7.89395 to -8.20991 (0.00 seconds)
Cbc0038I Round again with cutoff of -8.32164
Cbc0038I Pass   2: suminf.    0.75000 (3) obj. -9.24814 iterations 0
Cbc0038I Pass   3: suminf.    0.44878 (1) obj. -8.32164 iterations 4
Cbc0038I Pass   4: suminf.    0.25000 (1) obj. -8.43772 iterations 2
Cbc0038I Pass   5: suminf.    0.37502 (1) obj. -8.32164 iterations 2
Cbc0038I Pass   6: suminf.    0.59418 (2) obj. -8.32164 iterations 4
Cbc0038I Pass   7: suminf.    0.45870 (2) obj. -8.32164 iterations 2
Cbc0038I Pass   8: suminf.    0.59303 (2) obj. -8.32164 iterations 2
Cbc0038I Pass   9: suminf.    0.45870 (2) obj. -8.32164 iterations 2
Cbc0038I Pass  10: suminf.    0.93520 (2) obj. -8.32164 iterations 2
Cbc0038I Pass  11: suminf.    0.75519 (2) obj. -8.32164 iterations 9
Cbc0038I Pass  12: suminf.    0.49730 (1) obj. -8.32164 iterations 1
Cbc0038I Pass  13: suminf.    0.25000 (1) obj. -8.54167 iterations 5
Cbc0038I Pass  14: suminf.    0.47726 (1) obj. -8.32164 iterations 3
Cbc0038I Pass  15: suminf.    0.47726 (1) obj. -8.32164 iterations 0
Cbc0038I Pass  16: suminf.    0.64869 (3) obj. -8.32164 iterations 4
Cbc0038I Pass  17: suminf.    0.64869 (3) obj. -8.32164 iterations 1
Cbc0038I Pass  18: suminf.    0.19472 (1) obj. -8.32164 iterations 3
Cbc0038I Pass  19: suminf.    0.58170 (2) obj. -8.32164 iterations 3
Cbc0038I Pass  20: suminf.    0.25000 (1) obj. -8.43772 iterations 6
Cbc0038I Pass  21: suminf.    0.37502 (1) obj. -8.32164 iterations 4
Cbc0038I Pass  22: suminf.    0.97086 (3) obj. -8.32164 iterations 6
Cbc0038I Pass  23: suminf.    0.46920 (2) obj. -8.32164 iterations 3
Cbc0038I Pass  24: suminf.    0.25000 (1) obj. -8.42857 iterations 8
Cbc0038I Pass  25: suminf.    0.36516 (1) obj. -8.32164 iterations 4
Cbc0038I Pass  26: suminf.    0.50000 (2) obj. -8.68054 iterations 7
Cbc0038I Pass  27: suminf.    0.53744 (2) obj. -8.32164 iterations 4
Cbc0038I Pass  28: suminf.    0.37237 (2) obj. -8.32164 iterations 2
Cbc0038I Pass  29: suminf.    0.53485 (2) obj. -8.32164 iterations 1
Cbc0038I Pass  30: suminf.    0.25000 (1) obj. -8.41458 iterations 5
Cbc0038I Pass  31: suminf.    0.34599 (1) obj. -8.32164 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 13 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -8.20991 - took 0.00 seconds
Cbc0012I Integer solution of -8.2099085 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0031I 9 added rows had average density of 12
Cbc0013I At root node, 39 cuts changed objective from -9.3271342 to -8.1538376 in 29 passes
Cbc0014I Cut generator 0 (Probing) - 77 row cuts average 5.6 elements, 9 column cuts (9 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 286 row cuts average 21.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 5 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 45 row cuts average 20.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 21 row cuts average 5.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective -8.20990846306092, took 369 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Cuts at root node changed objective from -9.32713 to -8.15384
Probing was tried 29 times and created 86 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 29 times and created 286 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Knapsack was tried 29 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 29 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 29 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
FlowCover was tried 29 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 29 times and created 45 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 29 times and created 21 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                8.20990846
Enumerated nodes:               0
Total iterations:               369
Time (CPU seconds):             0.02
Time (Wallclock seconds):       0.03

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.03

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/1b60d9d82efa4b7d82db144e621cc807-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/1b60d9d82efa4b7d82db144e621cc807-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 16.1 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -16.0334 iterations 8
Cbc0038I Solution found of -13.7312
Cbc0038I Cleaned solution of -13.7312
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -13.7312 to -14.0643 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.2679
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -16.0334 iterations 0
Cbc0038I Pass   3: suminf.    0.37884 (1) obj. -14.2679 iterations 4
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -14.4129 iterations 6
Cbc0038I Pass   5: suminf.    0.35915 (1) obj. -14.2679 iterations 2
Cbc0038I Pass   6: suminf.    0.42678 (1) obj. -14.2679 iterations 3
Cbc0038I Pass   7: suminf.    0.20000 (1) obj. -14.3925 iterations 7
Cbc0038I Pass   8: suminf.    0.32961 (1) obj. -14.2679 iterations 3
Cbc0038I Pass   9: suminf.    0.31004 (2) obj. -14.2679 iterations 4
Cbc0038I Pass  10: suminf.    0.22489 (2) obj. -14.2679 iterations 2
Cbc0038I Pass  11: suminf.    0.40000 (1) obj. -14.3276 iterations 9
Cbc0038I Pass  12: suminf.    0.46207 (1) obj. -14.2679 iterations 2
Cbc0038I Pass  13: suminf.    0.49743 (2) obj. -14.2679 iterations 6
Cbc0038I Pass  14: suminf.    1.52926 (6) obj. -14.2679 iterations 3
Cbc0038I Pass  15: suminf.    0.34261 (1) obj. -14.2679 iterations 3
Cbc0038I Pass  16: suminf.    0.34261 (1) obj. -14.2679 iterations 0
Cbc0038I Pass  17: suminf.    0.20000 (1) obj. -14.5637 iterations 6
Cbc0038I Pass  18: suminf.    0.49228 (1) obj. -14.2679 iterations 3
Cbc0038I Pass  19: suminf.    0.35241 (4) obj. -14.2679 iterations 11
Cbc0038I Pass  20: suminf.    0.00000 (0) obj. -14.2869 iterations 3
Cbc0038I Solution found of -14.2869
Cbc0038I Cleaned solution of -14.2869
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -14.6496
Cbc0038I Pass  21: suminf.    0.80000 (4) obj. -16.0334 iterations 0
Cbc0038I Pass  22: suminf.    0.50597 (2) obj. -14.6496 iterations 8
Cbc0038I Pass  23: suminf.    0.44694 (2) obj. -14.6496 iterations 2
Cbc0038I Pass  24: suminf.    0.30186 (2) obj. -14.6496 iterations 7
Cbc0038I Pass  25: suminf.    1.20545 (6) obj. -14.6496 iterations 9
Cbc0038I Pass  26: suminf.    0.44615 (1) obj. -14.6496 iterations 3
Cbc0038I Pass  27: suminf.    0.20000 (1) obj. -14.755 iterations 7
Cbc0038I Pass  28: suminf.    0.31570 (1) obj. -14.6496 iterations 2
Cbc0038I Pass  29: suminf.    1.45353 (5) obj. -14.6496 iterations 1
Cbc0038I Pass  30: suminf.    0.43035 (2) obj. -14.6496 iterations 8
Cbc0038I Pass  31: suminf.    0.43035 (2) obj. -14.6496 iterations 1
Cbc0038I Pass  32: suminf.    0.51048 (2) obj. -14.6496 iterations 2
Cbc0038I Pass  33: suminf.    0.43035 (2) obj. -14.6496 iterations 2
Cbc0038I Pass  34: suminf.    0.55245 (2) obj. -14.6496 iterations 4
Cbc0038I Pass  35: suminf.    0.55245 (2) obj. -14.6496 iterations 3
Cbc0038I Pass  36: suminf.    1.06227 (3) obj. -14.6496 iterations 10
Cbc0038I Pass  37: suminf.    0.83029 (2) obj. -14.6496 iterations 3
Cbc0038I Pass  38: suminf.    0.21055 (2) obj. -14.6496 iterations 5
Cbc0038I Pass  39: suminf.    0.20000 (1) obj. -14.755 iterations 8
Cbc0038I Pass  40: suminf.    0.31570 (1) obj. -14.6496 iterations 4
Cbc0038I Pass  41: suminf.    0.45728 (2) obj. -14.6496 iterations 15
Cbc0038I Pass  42: suminf.    0.35007 (2) obj. -14.6496 iterations 3
Cbc0038I Pass  43: suminf.    0.43035 (2) obj. -14.6496 iterations 5
Cbc0038I Pass  44: suminf.    0.67459 (3) obj. -14.6496 iterations 14
Cbc0038I Pass  45: suminf.    0.59020 (3) obj. -14.6496 iterations 4
Cbc0038I Pass  46: suminf.    0.80000 (2) obj. -14.8564 iterations 13
Cbc0038I Pass  47: suminf.    0.61027 (2) obj. -14.6496 iterations 4
Cbc0038I Pass  48: suminf.    0.24191 (2) obj. -14.6496 iterations 10
Cbc0038I Pass  49: suminf.    1.45732 (6) obj. -14.6496 iterations 3
Cbc0038I Pass  50: suminf.    0.44241 (1) obj. -14.6496 iterations 4
Cbc0038I Rounding solution of -14.2924 is better than previous of -14.2869

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 19 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -15.0847
Cbc0038I Pass  50: suminf.    0.80000 (4) obj. -16.0334 iterations 0
Cbc0038I Pass  51: suminf.    0.49789 (3) obj. -15.0847 iterations 10
Cbc0038I Pass  52: suminf.    1.12472 (6) obj. -15.0847 iterations 6
Cbc0038I Pass  53: suminf.    0.57282 (2) obj. -15.0847 iterations 8
Cbc0038I Pass  54: suminf.    0.40000 (2) obj. -15.0904 iterations 10
Cbc0038I Pass  55: suminf.    0.40623 (2) obj. -15.0847 iterations 4
Cbc0038I Pass  56: suminf.    0.65043 (3) obj. -15.0847 iterations 10
Cbc0038I Pass  57: suminf.    2.35381 (7) obj. -15.0847 iterations 6
Cbc0038I Pass  58: suminf.    1.22265 (3) obj. -15.0847 iterations 5
Cbc0038I Pass  59: suminf.    1.68578 (4) obj. -15.0847 iterations 2
Cbc0038I Pass  60: suminf.    1.72913 (7) obj. -15.0847 iterations 8
Cbc0038I Pass  61: suminf.    0.69742 (2) obj. -15.0847 iterations 3
Cbc0038I Pass  62: suminf.    0.69742 (2) obj. -15.0847 iterations 2
Cbc0038I Pass  63: suminf.    2.35381 (7) obj. -15.0847 iterations 4
Cbc0038I Pass  64: suminf.    0.79079 (3) obj. -15.0847 iterations 4
Cbc0038I Pass  65: suminf.    2.35381 (7) obj. -15.0847 iterations 3
Cbc0038I Pass  66: suminf.    1.22265 (3) obj. -15.0847 iterations 5
Cbc0038I Pass  67: suminf.    1.68578 (4) obj. -15.0847 iterations 2
Cbc0038I Pass  68: suminf.    1.72913 (7) obj. -15.0847 iterations 8
Cbc0038I Pass  69: suminf.    0.69742 (2) obj. -15.0847 iterations 3
Cbc0038I Pass  70: suminf.    0.68463 (2) obj. -15.0847 iterations 6
Cbc0038I Pass  71: suminf.    2.35381 (7) obj. -15.0847 iterations 3
Cbc0038I Pass  72: suminf.    1.22265 (3) obj. -15.0847 iterations 5
Cbc0038I Pass  73: suminf.    1.68578 (4) obj. -15.0847 iterations 2
Cbc0038I Pass  74: suminf.    1.72913 (7) obj. -15.0847 iterations 8
Cbc0038I Pass  75: suminf.    0.69742 (2) obj. -15.0847 iterations 3
Cbc0038I Pass  76: suminf.    1.28112 (3) obj. -15.0847 iterations 7
Cbc0038I Pass  77: suminf.    0.67948 (2) obj. -15.0847 iterations 3
Cbc0038I Pass  78: suminf.    0.68977 (3) obj. -15.0847 iterations 6
Cbc0038I Pass  79: suminf.    2.35381 (7) obj. -15.0847 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 16 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -14.2924 - took 0.03 seconds
Cbc0012I Integer solution of -14.29239 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 4 rows 6 columns
Cbc0031I 6 added rows had average density of 31.333333
Cbc0013I At root node, 6 cuts changed objective from -16.100026 to -14.970628 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 536 row cuts average 39.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 43 row cuts average 26.1 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -14.29239 best solution, best possible -14.970628 (0.10 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 13 rows 16 columns
Cbc0001I Search completed - best objective -14.29239014536165, took 2782 iterations and 76 nodes (0.15 seconds)
Cbc0032I Strong branching done 728 times (3251 iterations), fathomed 27 nodes and fixed 7 variables
Cbc0035I Maximum depth 11, 164 variables fixed on reduced cost
Cuts at root node changed objective from -16.1 to -14.9706
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 207 times and created 791 cuts of which 0 were active after adding rounds of cuts (0.018 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
TwoMirCuts was tried 100 times and created 43 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                14.29239015
Enumerated nodes:               76
Total iterations:               2782
Time (CPU seconds):             0.15
Time (Wallclock seconds):       0.15

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/25994109c0b243fb9f55f19c8d9ec526-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/25994109c0b243fb9f55f19c8d9ec526-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 16.989 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -16.9391 iterations 4
Cbc0038I Solution found of -14.2121
Cbc0038I Cleaned solution of -14.2121
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -14.2121 to -14.462 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.7147
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -16.9391 iterations 0
Cbc0038I Pass   3: suminf.    0.46291 (1) obj. -14.7147 iterations 5
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -14.9967 iterations 6
Cbc0038I Pass   5: suminf.    0.35600 (1) obj. -14.7147 iterations 3
Cbc0038I Pass   6: suminf.    0.20000 (1) obj. -15.1221 iterations 5
Cbc0038I Pass   7: suminf.    0.33731 (1) obj. -14.7147 iterations 2
Cbc0038I Pass   8: suminf.    0.35600 (1) obj. -14.7147 iterations 2
Cbc0038I Pass   9: suminf.    0.27938 (1) obj. -14.7147 iterations 11
Cbc0038I Pass  10: suminf.    0.27938 (1) obj. -14.7147 iterations 0
Cbc0038I Pass  11: suminf.    0.40000 (1) obj. -14.9348 iterations 8
Cbc0038I Pass  12: suminf.    0.34857 (1) obj. -14.7147 iterations 3
Cbc0038I Pass  13: suminf.    0.54309 (2) obj. -14.7147 iterations 3
Cbc0038I Pass  14: suminf.    0.54309 (2) obj. -14.7147 iterations 1
Cbc0038I Pass  15: suminf.    0.80000 (2) obj. -15.4336 iterations 12
Cbc0038I Pass  16: suminf.    0.27938 (1) obj. -14.7147 iterations 3
Cbc0038I Pass  17: suminf.    0.40000 (1) obj. -14.9348 iterations 10
Cbc0038I Pass  18: suminf.    0.34857 (1) obj. -14.7147 iterations 3
Cbc0038I Pass  19: suminf.    0.42868 (1) obj. -14.7147 iterations 12
Cbc0038I Pass  20: suminf.    0.20000 (1) obj. -14.9149 iterations 4
Cbc0038I Pass  21: suminf.    0.42868 (1) obj. -14.7147 iterations 4
Cbc0038I Pass  22: suminf.    0.42868 (1) obj. -14.7147 iterations 3
Cbc0038I Pass  23: suminf.    0.44740 (1) obj. -14.7147 iterations 6
Cbc0038I Pass  24: suminf.    0.44740 (1) obj. -14.7147 iterations 0
Cbc0038I Pass  25: suminf.    0.40000 (1) obj. -14.8615 iterations 9
Cbc0038I Pass  26: suminf.    0.43327 (1) obj. -14.7147 iterations 3
Cbc0038I Pass  27: suminf.    0.53870 (2) obj. -14.7147 iterations 4
Cbc0038I Pass  28: suminf.    0.20000 (1) obj. -15.0344 iterations 4
Cbc0038I Pass  29: suminf.    0.32351 (1) obj. -14.7147 iterations 4
Cbc0038I Pass  30: suminf.    0.20000 (1) obj. -15.1343 iterations 4
Cbc0038I Pass  31: suminf.    0.77305 (3) obj. -14.7147 iterations 11
Cbc0038I Rounding solution of -14.4935 is better than previous of -14.462

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -14.4935 to -14.5634 (0.01 seconds)
Cbc0038I Round again with cutoff of -15.1695
Cbc0038I Pass  31: suminf.    0.80000 (4) obj. -16.9391 iterations 0
Cbc0038I Pass  32: suminf.    0.43048 (2) obj. -15.1695 iterations 9
Cbc0038I Pass  33: suminf.    0.38363 (2) obj. -15.1695 iterations 1
Cbc0038I Pass  34: suminf.    0.20002 (2) obj. -15.1695 iterations 5
Cbc0038I Pass  35: suminf.    0.21358 (2) obj. -15.1695 iterations 8
Cbc0038I Pass  36: suminf.    0.20435 (2) obj. -15.1695 iterations 2
Cbc0038I Pass  37: suminf.    0.57751 (2) obj. -15.1695 iterations 8
Cbc0038I Pass  38: suminf.    0.20000 (1) obj. -15.1901 iterations 4
Cbc0038I Pass  39: suminf.    0.22337 (1) obj. -15.1695 iterations 2
Cbc0038I Pass  40: suminf.    0.21707 (1) obj. -15.1695 iterations 2
Cbc0038I Pass  41: suminf.    0.93478 (3) obj. -15.1695 iterations 7
Cbc0038I Pass  42: suminf.    0.54840 (3) obj. -15.1695 iterations 2
Cbc0038I Pass  43: suminf.    0.22675 (1) obj. -15.1695 iterations 4
Cbc0038I Pass  44: suminf.    0.20000 (1) obj. -15.192 iterations 3
Cbc0038I Pass  45: suminf.    0.22547 (1) obj. -15.1695 iterations 1
Cbc0038I Pass  46: suminf.    0.39362 (2) obj. -15.1695 iterations 17
Cbc0038I Pass  47: suminf.    0.34192 (2) obj. -15.1695 iterations 2
Cbc0038I Pass  48: suminf.    0.20435 (2) obj. -15.1695 iterations 6
Cbc0038I Pass  49: suminf.    0.57751 (2) obj. -15.1695 iterations 9
Cbc0038I Pass  50: suminf.    0.20000 (1) obj. -15.1901 iterations 4
Cbc0038I Pass  51: suminf.    0.22337 (1) obj. -15.1695 iterations 2
Cbc0038I Pass  52: suminf.    0.64437 (2) obj. -15.1695 iterations 7
Cbc0038I Pass  53: suminf.    0.59408 (2) obj. -15.1695 iterations 5
Cbc0038I Pass  54: suminf.    0.59408 (2) obj. -15.1695 iterations 2
Cbc0038I Pass  55: suminf.    0.95243 (3) obj. -15.1695 iterations 3
Cbc0038I Pass  56: suminf.    0.54840 (3) obj. -15.1695 iterations 3
Cbc0038I Pass  57: suminf.    0.22675 (1) obj. -15.1695 iterations 4
Cbc0038I Pass  58: suminf.    0.20000 (1) obj. -15.192 iterations 3
Cbc0038I Pass  59: suminf.    0.22547 (1) obj. -15.1695 iterations 1
Cbc0038I Pass  60: suminf.    0.23292 (1) obj. -15.1695 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 17 rows 27 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -14.5634 - took 0.02 seconds
Cbc0012I Integer solution of -14.5634 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 2 rows 3 columns
Cbc0031I 11 added rows had average density of 34.181818
Cbc0013I At root node, 11 cuts changed objective from -16.989046 to -15.459654 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 411 row cuts average 38.7 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 50 row cuts average 27.5 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -14.5634 best solution, best possible -15.459654 (0.10 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 16 rows 21 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 14 rows 17 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 18 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 13 rows 16 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 13 rows 15 columns
Cbc0038I Full problem 25 rows 40 columns, reduced to 10 rows 13 columns
Cbc0001I Search completed - best objective -14.56339990720159, took 9578 iterations and 550 nodes (0.38 seconds)
Cbc0032I Strong branching done 3278 times (13253 iterations), fathomed 136 nodes and fixed 80 variables
Cbc0041I Maximum depth 16, 737 variables fixed on reduced cost (complete fathoming 2 times, 2 nodes taking 1 iterations)
Cuts at root node changed objective from -16.989 to -15.4597
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 605 times and created 1468 cuts of which 0 were active after adding rounds of cuts (0.040 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
TwoMirCuts was tried 605 times and created 144 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                14.56339991
Enumerated nodes:               550
Total iterations:               9578
Time (CPU seconds):             0.38
Time (Wallclock seconds):       0.38

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.38   (Wallclock seconds):       0.38

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/75647e6051924cf5b74134d095f31537-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/75647e6051924cf5b74134d095f31537-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 51 COLUMNS
At line 265 RHS
At line 312 BOUNDS
At line 354 ENDATA
Problem MODEL has 46 rows, 41 columns and 107 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 8.79565 - 0.00 seconds
Cgl0004I processed model has 16 rows, 24 columns (24 integer (12 of which binary)) and 60 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.75
Cbc0038I Pass   1: suminf.    0.75000 (3) obj. -8.79565 iterations 0
Cbc0038I Solution found of -8.05156
Cbc0038I Cleaned solution of -8.05156
Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -8.12598
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.75000 (3) obj. -8.79565 iterations 0
Cbc0038I Pass   3: suminf.    0.12675 (1) obj. -8.12598 iterations 3
Cbc0038I Pass   4: suminf.    0.25000 (1) obj. -8.46027 iterations 2
Cbc0038I Pass   5: suminf.    0.28162 (1) obj. -8.12598 iterations 1
Cbc0038I Pass   6: suminf.    0.85256 (2) obj. -8.12598 iterations 3
Cbc0038I Pass   7: suminf.    0.52785 (2) obj. -8.12598 iterations 2
Cbc0038I Pass   8: suminf.    0.88600 (2) obj. -8.12598 iterations 3
Cbc0038I Pass   9: suminf.    0.52785 (2) obj. -8.12598 iterations 2
Cbc0038I Pass  10: suminf.    0.56413 (2) obj. -8.12598 iterations 1
Cbc0038I Pass  11: suminf.    1.57330 (5) obj. -8.12598 iterations 2
Cbc0038I Pass  12: suminf.    0.20885 (1) obj. -8.12598 iterations 2
Cbc0038I Pass  13: suminf.    0.20885 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  14: suminf.    0.25000 (1) obj. -8.46027 iterations 3
Cbc0038I Pass  15: suminf.    0.28162 (1) obj. -8.12598 iterations 1
Cbc0038I Pass  16: suminf.    0.71824 (2) obj. -8.12598 iterations 1
Cbc0038I Pass  17: suminf.    0.12675 (1) obj. -8.12598 iterations 4
Cbc0038I Pass  18: suminf.    0.12675 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  19: suminf.    0.12675 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  20: suminf.    0.12675 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  21: suminf.    0.12675 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  22: suminf.    0.40328 (1) obj. -8.12598 iterations 4
Cbc0038I Pass  23: suminf.    0.25000 (1) obj. -8.1953 iterations 2
Cbc0038I Pass  24: suminf.    0.96390 (3) obj. -8.12598 iterations 1
Cbc0038I Pass  25: suminf.    0.50000 (2) obj. -8.63566 iterations 4
Cbc0038I Pass  26: suminf.    0.96390 (3) obj. -8.12598 iterations 2
Cbc0038I Pass  27: suminf.    0.12675 (1) obj. -8.12598 iterations 3
Cbc0038I Pass  28: suminf.    0.12675 (1) obj. -8.12598 iterations 0
Cbc0038I Pass  29: suminf.    0.67521 (2) obj. -8.12598 iterations 5
Cbc0038I Pass  30: suminf.    0.32216 (2) obj. -8.12598 iterations 1
Cbc0038I Pass  31: suminf.    0.25000 (1) obj. -8.46027 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 24 columns, reduced to 12 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I After 0.00 seconds - Feasibility pump exiting with objective of -8.05156 - took 0.00 seconds
Cbc0012I Integer solution of -8.0515572 found by feasibility pump after 0 iterations and 0 nodes (0.00 seconds)
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 2 added rows had average density of 7
Cbc0013I At root node, 2 cuts changed objective from -8.7956507 to -8.3985717 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 11 column cuts (11 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 9.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 3 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 3 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective -8.051557198167002, took 10 iterations and 0 nodes (0.00 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Cuts at root node changed objective from -8.79565 to -8.39857
Probing was tried 2 times and created 12 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Gomory was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
ZeroHalf was tried 1 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                8.05155720
Enumerated nodes:               0
Total iterations:               10
Time (CPU seconds):             0.00
Time (Wallclock seconds):       0.00

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.00   (Wallclock seconds):       0.01

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/aaf11c27adfa43ba8fd3b11317faf6b7-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/aaf11c27adfa43ba8fd3b11317faf6b7-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 77 COLUMNS
At line 423 RHS
At line 496 BOUNDS
At line 563 ENDATA
Problem MODEL has 72 rows, 66 columns and 173 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 17.1685 - 0.00 seconds
Cgl0004I processed model has 25 rows, 40 columns (40 integer (20 of which binary)) and 100 elements
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.8
Cbc0038I Pass   1: suminf.    0.80000 (4) obj. -17.1142 iterations 7
Cbc0038I Solution found of -14.4722
Cbc0038I Cleaned solution of -14.4722
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous of which 4 were internal integer and 0 internal continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound improved solution from -14.4722 to -14.744 (0.00 seconds)
Cbc0038I Round again with cutoff of -14.9865
Cbc0038I Pass   2: suminf.    0.80000 (4) obj. -17.1142 iterations 0
Cbc0038I Pass   3: suminf.    0.46079 (1) obj. -14.9865 iterations 4
Cbc0038I Pass   4: suminf.    0.20000 (1) obj. -15.2296 iterations 3
Cbc0038I Pass   5: suminf.    0.44772 (1) obj. -14.9865 iterations 1
Cbc0038I Pass   6: suminf.    0.46568 (2) obj. -14.9865 iterations 6
Cbc0038I Pass   7: suminf.    0.64484 (2) obj. -14.9865 iterations 6
Cbc0038I Pass   8: suminf.    0.64484 (2) obj. -14.9865 iterations 0
Cbc0038I Pass   9: suminf.    0.20000 (1) obj. -15.0112 iterations 4
Cbc0038I Pass  10: suminf.    0.22515 (1) obj. -14.9865 iterations 2
Cbc0038I Pass  11: suminf.    0.23040 (1) obj. -14.9865 iterations 3
Cbc0038I Pass  12: suminf.    1.92946 (4) obj. -14.9865 iterations 10
Cbc0038I Pass  13: suminf.    1.92946 (4) obj. -14.9865 iterations 1
Cbc0038I Pass  14: suminf.    0.00000 (0) obj. -15.3841 iterations 2
Cbc0038I Solution found of -15.3841
Cbc0038I Cleaned solution of -15.3841
Cbc0038I Before mini branch and bound, 19 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 15 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -15.741
Cbc0038I Pass  15: suminf.    0.80000 (4) obj. -17.1142 iterations 0
Cbc0038I Pass  16: suminf.    0.62742 (2) obj. -15.741 iterations 4
Cbc0038I Pass  17: suminf.    0.40000 (2) obj. -16.069 iterations 5
Cbc0038I Pass  18: suminf.    0.26773 (1) obj. -15.741 iterations 3
Cbc0038I Pass  19: suminf.    0.20000 (1) obj. -15.7762 iterations 3
Cbc0038I Pass  20: suminf.    0.23588 (1) obj. -15.741 iterations 2
Cbc0038I Pass  21: suminf.    0.26699 (2) obj. -15.741 iterations 4
Cbc0038I Pass  22: suminf.    1.45405 (5) obj. -15.741 iterations 2
Cbc0038I Pass  23: suminf.    0.59980 (2) obj. -15.741 iterations 7
Cbc0038I Pass  24: suminf.    0.59980 (2) obj. -15.741 iterations 0
Cbc0038I Pass  25: suminf.    0.60000 (2) obj. -16.2982 iterations 7
Cbc0038I Pass  26: suminf.    0.41585 (1) obj. -15.741 iterations 3
Cbc0038I Pass  27: suminf.    0.40000 (1) obj. -15.7566 iterations 5
Cbc0038I Pass  28: suminf.    0.55519 (2) obj. -15.741 iterations 7
Cbc0038I Pass  29: suminf.    0.45875 (2) obj. -15.741 iterations 1
Cbc0038I Pass  30: suminf.    0.20000 (1) obj. -15.8483 iterations 8
Cbc0038I Pass  31: suminf.    0.31321 (1) obj. -15.741 iterations 1
Cbc0038I Pass  32: suminf.    0.36296 (1) obj. -15.741 iterations 3
Cbc0038I Pass  33: suminf.    0.59980 (2) obj. -15.741 iterations 3
Cbc0038I Pass  34: suminf.    0.59980 (2) obj. -15.741 iterations 1
Cbc0038I Pass  35: suminf.    0.60000 (2) obj. -16.2982 iterations 5
Cbc0038I Pass  36: suminf.    0.41585 (1) obj. -15.741 iterations 3
Cbc0038I Pass  37: suminf.    0.40000 (1) obj. -15.7566 iterations 5
Cbc0038I Pass  38: suminf.    0.70427 (5) obj. -15.741 iterations 6
Cbc0038I Pass  39: suminf.    0.40000 (1) obj. -15.7566 iterations 5
Cbc0038I Pass  40: suminf.    0.64406 (2) obj. -15.741 iterations 14
Cbc0038I Pass  41: suminf.    0.56204 (2) obj. -15.741 iterations 4
Cbc0038I Pass  42: suminf.    0.20000 (1) obj. -15.8483 iterations 7
Cbc0038I Pass  43: suminf.    0.31321 (1) obj. -15.741 iterations 1
Cbc0038I Pass  44: suminf.    0.65971 (2) obj. -15.741 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 40 columns, reduced to 17 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -15.3841 - took 0.01 seconds
Cbc0012I Integer solution of -15.384096 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 6 rows 7 columns
Cbc0031I 8 added rows had average density of 38.5
Cbc0013I At root node, 8 cuts changed objective from -17.168532 to -16.026162 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 501 row cuts average 38.4 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 4 row cuts average 23.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 51 row cuts average 25.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -15.384096 best solution, best possible -16.026162 (0.09 seconds)
Cbc0038I Full problem 25 rows 40 columns, reduced to 4 rows 5 columns
Cbc0001I Search completed - best objective -15.38409639708728, took 3953 iterations and 74 nodes (0.18 seconds)
Cbc0032I Strong branching done 834 times (4201 iterations), fathomed 17 nodes and fixed 21 variables
Cbc0035I Maximum depth 10, 205 variables fixed on reduced cost
Cuts at root node changed objective from -17.1685 to -16.0262
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Gomory was tried 322 times and created 1101 cuts of which 0 were active after adding rounds of cuts (0.026 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
TwoMirCuts was tried 322 times and created 105 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                15.38409640
Enumerated nodes:               74
Total iterations:               3953
Time (CPU seconds):             0.18
Time (Wallclock seconds):       0.18

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.18

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/29fa8b765bee4bc8bf15bb4aa978c096-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/29fa8b765bee4bc8bf15bb4aa978c096-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 147 COLUMNS
At line 853 RHS
At line 996 BOUNDS
At line 1131 ENDATA
Problem MODEL has 142 rows, 134 columns and 353 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 36.2594 - 0.00 seconds
Cgl0004I processed model has 49 rows, 83 columns (83 integer (41 of which binary)) and 208 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.857143
Cbc0038I Pass   1: suminf.    0.85714 (5) obj. -36.2495 iterations 22
Cbc0038I Solution found of -32.7163
Cbc0038I Cleaned solution of -32.7163
Cbc0038I Before mini branch and bound, 76 integers at bound fixed and 0 continuous of which 6 were internal integer and 0 internal continuous
Cbc0038I Full problem 49 rows 83 columns, reduced to 2 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -32.7163 to -32.7856 (0.00 seconds)
Cbc0038I Round again with cutoff of -33.1329
Cbc0038I Pass   2: suminf.    0.85714 (5) obj. -36.2495 iterations 0
Cbc0038I Pass   3: suminf.    0.44129 (1) obj. -33.1329 iterations 5
Cbc0038I Pass   4: suminf.    0.14286 (1) obj. -33.5216 iterations 12
Cbc0038I Pass   5: suminf.    0.45720 (1) obj. -33.1329 iterations 1
Cbc0038I Pass   6: suminf.    0.63378 (2) obj. -33.1329 iterations 31
Cbc0038I Pass   7: suminf.    0.14286 (1) obj. -33.5695 iterations 5
Cbc0038I Pass   8: suminf.    0.40109 (1) obj. -33.1329 iterations 1
Cbc0038I Pass   9: suminf.    0.20954 (2) obj. -33.1329 iterations 10
Cbc0038I Pass  10: suminf.    0.18013 (2) obj. -33.1329 iterations 2
Cbc0038I Pass  11: suminf.    0.00000 (0) obj. -33.3167 iterations 9
Cbc0038I Solution found of -33.3167
Cbc0038I Cleaned solution of -33.3167
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 83 columns, reduced to 20 rows 32 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -33.9052
Cbc0038I Pass  12: suminf.    0.85714 (5) obj. -36.2495 iterations 0
Cbc0038I Pass  13: suminf.    0.58550 (2) obj. -33.9052 iterations 14
Cbc0038I Pass  14: suminf.    0.54418 (2) obj. -33.9052 iterations 1
Cbc0038I Pass  15: suminf.    0.86391 (2) obj. -33.9052 iterations 12
Cbc0038I Pass  16: suminf.    0.15172 (2) obj. -33.9052 iterations 12
Cbc0038I Pass  17: suminf.    0.32689 (2) obj. -33.9052 iterations 11
Cbc0038I Pass  18: suminf.    0.57387 (2) obj. -33.9052 iterations 22
Cbc0038I Pass  19: suminf.    0.14286 (1) obj. -33.9571 iterations 6
Cbc0038I Pass  20: suminf.    0.19628 (1) obj. -33.9052 iterations 1
Cbc0038I Pass  21: suminf.    0.45441 (2) obj. -33.9052 iterations 11
Cbc0038I Pass  22: suminf.    0.14286 (1) obj. -33.9084 iterations 9
Cbc0038I Pass  23: suminf.    0.14616 (1) obj. -33.9052 iterations 3
Cbc0038I Pass  24: suminf.    1.73056 (6) obj. -33.9052 iterations 23
Cbc0038I Pass  25: suminf.    0.20055 (2) obj. -33.9052 iterations 3
Cbc0038I Pass  26: suminf.    0.57387 (2) obj. -33.9052 iterations 11
Cbc0038I Pass  27: suminf.    0.14286 (1) obj. -33.9571 iterations 9
Cbc0038I Pass  28: suminf.    0.19628 (1) obj. -33.9052 iterations 3
Cbc0038I Pass  29: suminf.    1.30170 (6) obj. -33.9052 iterations 20
Cbc0038I Pass  30: suminf.    0.26522 (2) obj. -33.9052 iterations 14
Cbc0038I Pass  31: suminf.    0.46521 (2) obj. -33.9052 iterations 8
Cbc0038I Pass  32: suminf.    0.14286 (1) obj. -33.9281 iterations 8
Cbc0038I Pass  33: suminf.    0.16973 (1) obj. -33.9052 iterations 4
Cbc0038I Pass  34: suminf.    0.72384 (2) obj. -33.9052 iterations 18
Cbc0038I Pass  35: suminf.    0.14747 (2) obj. -33.9052 iterations 14
Cbc0038I Pass  36: suminf.    0.49292 (2) obj. -33.9052 iterations 11
Cbc0038I Pass  37: suminf.    0.72858 (2) obj. -33.9052 iterations 7
Cbc0038I Pass  38: suminf.    0.50349 (5) obj. -33.9052 iterations 11
Cbc0038I Pass  39: suminf.    0.43528 (2) obj. -33.9052 iterations 3
Cbc0038I Pass  40: suminf.    0.62381 (7) obj. -33.9052 iterations 8
Cbc0038I Pass  41: suminf.    0.51390 (2) obj. -33.9052 iterations 6
Cbc0038I Rounding solution of -33.3999 is better than previous of -33.3167

Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 83 columns, reduced to 28 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -34.6115
Cbc0038I Pass  41: suminf.    0.85714 (5) obj. -36.2495 iterations 0
Cbc0038I Pass  42: suminf.    0.85882 (3) obj. -34.6115 iterations 22
Cbc0038I Pass  43: suminf.    0.57143 (3) obj. -34.8189 iterations 18
Cbc0038I Pass  44: suminf.    0.81553 (3) obj. -34.6115 iterations 13
Cbc0038I Pass  45: suminf.    0.61312 (3) obj. -34.6115 iterations 21
Cbc0038I Pass  46: suminf.    0.53665 (3) obj. -34.6115 iterations 6
Cbc0038I Pass  47: suminf.    1.10127 (4) obj. -34.6115 iterations 13
Cbc0038I Pass  48: suminf.    0.71429 (3) obj. -34.8122 iterations 30
Cbc0038I Pass  49: suminf.    0.95044 (3) obj. -34.6115 iterations 10
Cbc0038I Pass  50: suminf.    1.48305 (5) obj. -34.6115 iterations 21
Cbc0038I Pass  51: suminf.    0.99776 (4) obj. -34.6115 iterations 13
Cbc0038I Pass  52: suminf.    0.95344 (3) obj. -34.6115 iterations 17
Cbc0038I Pass  53: suminf.    0.97330 (4) obj. -34.6115 iterations 15
Cbc0038I Pass  54: suminf.    0.97330 (4) obj. -34.6115 iterations 0
Cbc0038I Pass  55: suminf.    0.71429 (3) obj. -34.8611 iterations 21
Cbc0038I Pass  56: suminf.    0.42813 (3) obj. -34.6115 iterations 6
Cbc0038I Pass  57: suminf.    0.85100 (3) obj. -34.6115 iterations 13
Cbc0038I Pass  58: suminf.    0.32700 (3) obj. -34.6115 iterations 9
Cbc0038I Pass  59: suminf.    0.97330 (4) obj. -34.6115 iterations 13
Cbc0038I Pass  60: suminf.    0.97330 (4) obj. -34.6115 iterations 0
Cbc0038I Pass  61: suminf.    0.71429 (3) obj. -34.8611 iterations 21
Cbc0038I Pass  62: suminf.    0.42813 (3) obj. -34.6115 iterations 6
Cbc0038I Pass  63: suminf.    0.85100 (3) obj. -34.6115 iterations 13
Cbc0038I Pass  64: suminf.    0.32700 (3) obj. -34.6115 iterations 9
Cbc0038I Pass  65: suminf.    0.97330 (4) obj. -34.6115 iterations 13
Cbc0038I Pass  66: suminf.    0.97330 (4) obj. -34.6115 iterations 0
Cbc0038I Pass  67: suminf.    0.71429 (3) obj. -34.8611 iterations 21
Cbc0038I Pass  68: suminf.    0.42813 (3) obj. -34.6115 iterations 6
Cbc0038I Pass  69: suminf.    0.85100 (3) obj. -34.6115 iterations 13
Cbc0038I Pass  70: suminf.    0.32700 (3) obj. -34.6115 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 42 integers at bound fixed and 0 continuous
Cbc0038I Full problem 49 rows 83 columns, reduced to 27 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -33.3999 - took 0.05 seconds
Cbc0012I Integer solution of -33.399863 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 49 rows 83 columns, reduced to 11 rows 14 columns
Cbc0031I 14 added rows had average density of 66.571429
Cbc0013I At root node, 14 cuts changed objective from -36.259352 to -34.335793 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 495 row cuts average 77.2 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 49 row cuts average 49.6 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -33.399863 best solution, best possible -34.335793 (0.21 seconds)
Cbc0038I Full problem 49 rows 83 columns, reduced to 21 rows 26 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 17 rows 22 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 19 rows 25 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 19 rows 25 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 7 rows 11 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 13 rows 17 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 23 rows 31 columns
Cbc0010I After 1000 nodes, 31 on tree, -33.399863 best solution, best possible -34.335793 (2.08 seconds)
Cbc0038I Full problem 49 rows 83 columns, reduced to 15 rows 21 columns
Cbc0038I Full problem 49 rows 83 columns, reduced to 13 rows 17 columns
Cbc0010I After 2000 nodes, 12 on tree, -33.399863 best solution, best possible -34.335793 (3.07 seconds)
Cbc0038I Full problem 49 rows 83 columns, reduced to 16 rows 20 columns
Cbc0010I After 3000 nodes, 6 on tree, -33.399863 best solution, best possible -33.902079 (3.62 seconds)
Cbc0001I Search completed - best objective -33.39986338838926, took 350825 iterations and 53605 nodes (3.66 seconds)
Cbc0032I Strong branching done 16088 times (96368 iterations), fathomed 620 nodes and fixed 1203 variables
Cbc0041I Maximum depth 28, 7103 variables fixed on reduced cost (complete fathoming 564 times, 50553 nodes taking 315692 iterations)
Cuts at root node changed objective from -36.2594 to -34.3358
Probing was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Gomory was tried 718 times and created 985 cuts of which 0 were active after adding rounds of cuts (0.064 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
TwoMirCuts was tried 718 times and created 128 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                33.39986339
Enumerated nodes:               53605
Total iterations:               350825
Time (CPU seconds):             3.61
Time (Wallclock seconds):       3.66

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.61   (Wallclock seconds):       3.66

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/dae9a31161854d169c9b4bfaa6701600-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/dae9a31161854d169c9b4bfaa6701600-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 109 COLUMNS
At line 619 RHS
At line 724 BOUNDS
At line 822 ENDATA
Problem MODEL has 104 rows, 97 columns and 255 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 24.7059 - 0.00 seconds
Cgl0004I processed model has 36 rows, 60 columns (60 integer (30 of which binary)) and 150 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    0.83333 (5) obj. -24.6091 iterations 8
Cbc0038I Solution found of -21.1295
Cbc0038I Cleaned solution of -21.1295
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous of which 3 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 3 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -21.1295 to -22.1264 (0.00 seconds)
Cbc0038I Round again with cutoff of -22.3843
Cbc0038I Pass   2: suminf.    0.83333 (5) obj. -24.6091 iterations 0
Cbc0038I Pass   3: suminf.    0.65365 (2) obj. -22.3843 iterations 12
Cbc0038I Pass   4: suminf.    0.33333 (2) obj. -22.6848 iterations 7
Cbc0038I Pass   5: suminf.    0.65997 (2) obj. -22.3843 iterations 3
Cbc0038I Pass   6: suminf.    0.48115 (2) obj. -22.3843 iterations 10
Cbc0038I Pass   7: suminf.    0.38731 (2) obj. -22.3843 iterations 1
Cbc0038I Pass   8: suminf.    0.16667 (1) obj. -22.5454 iterations 11
Cbc0038I Pass   9: suminf.    0.35227 (1) obj. -22.3843 iterations 3
Cbc0038I Pass  10: suminf.    0.91511 (3) obj. -22.3843 iterations 7
Cbc0038I Pass  11: suminf.    0.87530 (3) obj. -22.3843 iterations 2
Cbc0038I Pass  12: suminf.    0.66667 (2) obj. -22.3843 iterations 6
Cbc0038I Pass  13: suminf.    0.02238 (1) obj. -22.3843 iterations 3
Cbc0038I Solution found of -22.4052
Cbc0038I Cleaned solution of -22.4052
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 17 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -22.8654
Cbc0038I Pass  14: suminf.    0.83333 (5) obj. -24.6091 iterations 0
Cbc0038I Pass  15: suminf.    0.54444 (3) obj. -22.8654 iterations 14
Cbc0038I Pass  16: suminf.    0.42077 (3) obj. -22.8654 iterations 4
Cbc0038I Pass  17: suminf.    0.58617 (2) obj. -22.8654 iterations 7
Cbc0038I Pass  18: suminf.    0.36071 (2) obj. -22.8654 iterations 5
Cbc0038I Pass  19: suminf.    0.16667 (1) obj. -22.9686 iterations 10
Cbc0038I Pass  20: suminf.    0.27891 (1) obj. -22.8654 iterations 2
Cbc0038I Pass  21: suminf.    1.90271 (5) obj. -22.8654 iterations 3
Cbc0038I Pass  22: suminf.    0.16667 (1) obj. -23.1347 iterations 4
Cbc0038I Pass  23: suminf.    0.45954 (1) obj. -22.8654 iterations 2
Cbc0038I Pass  24: suminf.    0.39486 (2) obj. -22.8654 iterations 7
Cbc0038I Pass  25: suminf.    0.33333 (2) obj. -22.9107 iterations 8
Cbc0038I Pass  26: suminf.    0.38557 (2) obj. -22.8654 iterations 4
Cbc0038I Pass  27: suminf.    0.60938 (2) obj. -22.8654 iterations 11
Cbc0038I Pass  28: suminf.    0.16667 (1) obj. -23.1763 iterations 7
Cbc0038I Pass  29: suminf.    0.47513 (1) obj. -22.8654 iterations 2
Cbc0038I Pass  30: suminf.    0.18243 (2) obj. -22.8654 iterations 12
Cbc0038I Pass  31: suminf.    0.16667 (1) obj. -22.8764 iterations 4
Cbc0038I Pass  32: suminf.    0.34884 (1) obj. -22.8654 iterations 4
Cbc0038I Pass  33: suminf.    0.16667 (1) obj. -23.0101 iterations 6
Cbc0038I Pass  34: suminf.    0.33346 (1) obj. -22.8654 iterations 2
Cbc0038I Pass  35: suminf.    0.22740 (2) obj. -22.8654 iterations 10
Cbc0038I Pass  36: suminf.    0.16667 (1) obj. -22.9026 iterations 5
Cbc0038I Pass  37: suminf.    0.20955 (1) obj. -22.8654 iterations 2
Cbc0038I Pass  38: suminf.    1.05109 (4) obj. -22.8654 iterations 13
Cbc0038I Pass  39: suminf.    0.50000 (2) obj. -23.0078 iterations 11
Cbc0038I Pass  40: suminf.    0.66164 (2) obj. -22.8654 iterations 6
Cbc0038I Pass  41: suminf.    0.79252 (3) obj. -22.8654 iterations 11
Cbc0038I Pass  42: suminf.    0.33333 (2) obj. -23.2007 iterations 6
Cbc0038I Pass  43: suminf.    0.61358 (2) obj. -22.8654 iterations 4
Cbc0038I Rounding solution of -22.4912 is better than previous of -22.4052

Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 39 columns
Cbc0038I Mini branch and bound improved solution from -22.4912 to -22.5236 (0.03 seconds)
Cbc0038I Round again with cutoff of -23.4175
Cbc0038I Pass  43: suminf.    0.83333 (5) obj. -24.6091 iterations 0
Cbc0038I Pass  44: suminf.    0.51791 (4) obj. -23.4175 iterations 14
Cbc0038I Pass  45: suminf.    0.50000 (4) obj. -23.4175 iterations 9
Cbc0038I Pass  46: suminf.    0.68084 (3) obj. -23.4175 iterations 6
Cbc0038I Pass  47: suminf.    0.53609 (3) obj. -23.4175 iterations 5
Cbc0038I Pass  48: suminf.    0.56326 (2) obj. -23.4175 iterations 9
Cbc0038I Pass  49: suminf.    0.33333 (2) obj. -23.5199 iterations 12
Cbc0038I Pass  50: suminf.    0.48812 (2) obj. -23.4175 iterations 6
Cbc0038I Pass  51: suminf.    1.02676 (3) obj. -23.4175 iterations 6
Cbc0038I Pass  52: suminf.    1.16893 (5) obj. -23.4175 iterations 11
Cbc0038I Pass  53: suminf.    0.50005 (2) obj. -23.4175 iterations 7
Cbc0038I Pass  54: suminf.    0.33333 (2) obj. -23.4783 iterations 6
Cbc0038I Pass  55: suminf.    0.40339 (2) obj. -23.4175 iterations 4
Cbc0038I Pass  56: suminf.    1.75493 (6) obj. -23.4175 iterations 13
Cbc0038I Pass  57: suminf.    0.33333 (2) obj. -23.6445 iterations 10
Cbc0038I Pass  58: suminf.    0.59480 (2) obj. -23.4175 iterations 4
Cbc0038I Pass  59: suminf.    0.37431 (3) obj. -23.4175 iterations 7
Cbc0038I Pass  60: suminf.    1.65460 (7) obj. -23.4175 iterations 6
Cbc0038I Pass  61: suminf.    0.34589 (2) obj. -23.4175 iterations 3
Cbc0038I Pass  62: suminf.    0.38746 (2) obj. -23.4175 iterations 5
Cbc0038I Pass  63: suminf.    0.56756 (2) obj. -23.4175 iterations 15
Cbc0038I Pass  64: suminf.    0.52284 (2) obj. -23.4175 iterations 3
Cbc0038I Pass  65: suminf.    0.49759 (2) obj. -23.4175 iterations 3
Cbc0038I Pass  66: suminf.    0.43038 (3) obj. -23.4175 iterations 10
Cbc0038I Pass  67: suminf.    0.33333 (2) obj. -23.4744 iterations 11
Cbc0038I Pass  68: suminf.    0.39889 (2) obj. -23.4175 iterations 4
Cbc0038I Pass  69: suminf.    1.18132 (5) obj. -23.4175 iterations 2
Cbc0038I Pass  70: suminf.    0.48679 (2) obj. -23.4175 iterations 4
Cbc0038I Pass  71: suminf.    0.53187 (3) obj. -23.4175 iterations 4
Cbc0038I Pass  72: suminf.    0.49759 (2) obj. -23.4175 iterations 4
Cbc0038I Rounding solution of -22.6665 is better than previous of -22.5236

Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -23.8041
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 5
Cbc0038I Pass  72: suminf.    0.83333 (5) obj. -24.6091 iterations 0
Cbc0038I Pass  73: suminf.    0.98977 (4) obj. -23.8041 iterations 14
Cbc0038I Pass  74: suminf.    0.66667 (4) obj. -24.0632 iterations 12
Cbc0038I Pass  75: suminf.    0.98731 (4) obj. -23.8041 iterations 9
Cbc0038I Pass  76: suminf.    0.82881 (4) obj. -23.8041 iterations 7
Cbc0038I Pass  77: suminf.    0.56545 (3) obj. -23.8041 iterations 11
Cbc0038I Pass  78: suminf.    0.50000 (3) obj. -23.883 iterations 6
Cbc0038I Pass  79: suminf.    0.78262 (3) obj. -23.8041 iterations 6
Cbc0038I Pass  80: suminf.    0.69671 (3) obj. -23.8041 iterations 3
Cbc0038I Pass  81: suminf.    0.62183 (3) obj. -23.8041 iterations 7
Cbc0038I Pass  82: suminf.    0.62183 (3) obj. -23.8041 iterations 1
Cbc0038I Pass  83: suminf.    0.48323 (3) obj. -23.8041 iterations 4
Cbc0038I Pass  84: suminf.    0.48323 (3) obj. -23.8041 iterations 2
Cbc0038I Pass  85: suminf.    1.01073 (4) obj. -23.8041 iterations 11
Cbc0038I Pass  86: suminf.    1.62426 (7) obj. -23.8041 iterations 5
Cbc0038I Pass  87: suminf.    0.60904 (3) obj. -23.8041 iterations 6
Cbc0038I Pass  88: suminf.    0.95054 (4) obj. -23.8041 iterations 9
Cbc0038I Pass  89: suminf.    0.92301 (4) obj. -23.8041 iterations 5
Cbc0038I Pass  90: suminf.    0.92301 (4) obj. -23.8041 iterations 2
Cbc0038I Pass  91: suminf.    0.91565 (4) obj. -23.8041 iterations 9
Cbc0038I Pass  92: suminf.    0.64921 (3) obj. -23.8041 iterations 9
Cbc0038I Pass  93: suminf.    0.48323 (3) obj. -23.8041 iterations 4
Cbc0038I Pass  94: suminf.    0.48323 (3) obj. -23.8041 iterations 0
Cbc0038I Pass  95: suminf.    0.62183 (3) obj. -23.8041 iterations 3
Cbc0038I Pass  96: suminf.    0.62183 (3) obj. -23.8041 iterations 1
Cbc0038I Pass  97: suminf.    0.48323 (3) obj. -23.8041 iterations 4
Cbc0038I Pass  98: suminf.    1.15380 (4) obj. -23.8041 iterations 14
Cbc0038I Pass  99: suminf.    0.77857 (3) obj. -23.8041 iterations 4
Cbc0038I Pass 100: suminf.    0.76675 (3) obj. -23.8041 iterations 5
Cbc0038I Pass 101: suminf.    0.50000 (3) obj. -24.0653 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 22 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -22.6665 - took 0.05 seconds
Cbc0012I Integer solution of -22.666526 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 6 rows 9 columns
Cbc0031I 13 added rows had average density of 50.769231
Cbc0013I At root node, 13 cuts changed objective from -24.705938 to -23.775864 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 44 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1061 row cuts average 58.8 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 15 row cuts average 18.9 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 54 row cuts average 47.2 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (ZeroHalf) - 112 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -22.666526 best solution, best possible -23.775864 (0.20 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 12 rows 17 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 20 rows 25 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 6 rows 7 columns
Cbc0001I Search completed - best objective -22.66652554273626, took 6871 iterations and 224 nodes (0.47 seconds)
Cbc0032I Strong branching done 2342 times (15349 iterations), fathomed 69 nodes and fixed 165 variables
Cbc0035I Maximum depth 14, 509 variables fixed on reduced cost
Cuts at root node changed objective from -24.7059 to -23.7759
Probing was tried 100 times and created 44 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 323 times and created 1607 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 100 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
TwoMirCuts was tried 100 times and created 54 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 324 times and created 301 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)

Result - Optimal solution found

Objective value:                22.66652554
Enumerated nodes:               224
Total iterations:               6871
Time (CPU seconds):             0.46
Time (Wallclock seconds):       0.47

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.46   (Wallclock seconds):       0.47

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/ff71f7fb595d49c8bda3ee6233dfc5a5-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/ff71f7fb595d49c8bda3ee6233dfc5a5-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 109 COLUMNS
At line 619 RHS
At line 724 BOUNDS
At line 822 ENDATA
Problem MODEL has 104 rows, 97 columns and 255 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 25.2284 - 0.00 seconds
Cgl0004I processed model has 36 rows, 60 columns (60 integer (30 of which binary)) and 150 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.833333
Cbc0038I Pass   1: suminf.    0.83333 (5) obj. -25.14 iterations 12
Cbc0038I Solution found of -21.6607
Cbc0038I Cleaned solution of -21.6607
Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous of which 5 were internal integer and 0 internal continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 4 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -21.6607 to -22.191 (0.00 seconds)
Cbc0038I Round again with cutoff of -22.4947
Cbc0038I Pass   2: suminf.    0.83333 (5) obj. -25.14 iterations 0
Cbc0038I Pass   3: suminf.    0.20505 (2) obj. -22.4947 iterations 12
Cbc0038I Pass   4: suminf.    0.16667 (1) obj. -22.5119 iterations 3
Cbc0038I Pass   5: suminf.    0.45855 (1) obj. -22.4947 iterations 3
Cbc0038I Pass   6: suminf.    0.16667 (1) obj. -22.7979 iterations 5
Cbc0038I Pass   7: suminf.    0.40476 (1) obj. -22.4947 iterations 4
Cbc0038I Pass   8: suminf.    0.33333 (1) obj. -22.7041 iterations 13
Cbc0038I Pass   9: suminf.    0.44082 (1) obj. -22.4947 iterations 3
Cbc0038I Pass  10: suminf.    0.32045 (1) obj. -22.4947 iterations 8
Cbc0038I Pass  11: suminf.    0.32045 (1) obj. -22.4947 iterations 0
Cbc0038I Pass  12: suminf.    0.33333 (1) obj. -22.7697 iterations 7
Cbc0038I Pass  13: suminf.    0.37013 (1) obj. -22.4947 iterations 4
Cbc0038I Pass  14: suminf.    0.80521 (2) obj. -22.4947 iterations 26
Cbc0038I Pass  15: suminf.    0.57300 (2) obj. -22.4947 iterations 2
Cbc0038I Pass  16: suminf.    0.41649 (1) obj. -22.4947 iterations 1
Cbc0038I Pass  17: suminf.    0.16667 (1) obj. -22.8227 iterations 6
Cbc0038I Pass  18: suminf.    1.61625 (5) obj. -22.4947 iterations 13
Cbc0038I Pass  19: suminf.    0.33965 (2) obj. -22.4947 iterations 4
Cbc0038I Pass  20: suminf.    0.00000 (0) obj. -22.5951 iterations 9
Cbc0038I Solution found of -22.5951
Cbc0038I Cleaned solution of -22.5951
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 24 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -23.1217
Cbc0038I Pass  21: suminf.    0.83333 (5) obj. -25.14 iterations 0
Cbc0038I Pass  22: suminf.    0.46624 (2) obj. -23.1217 iterations 12
Cbc0038I Pass  23: suminf.    0.33333 (2) obj. -23.3279 iterations 5
Cbc0038I Pass  24: suminf.    0.79750 (2) obj. -23.1217 iterations 12
Cbc0038I Pass  25: suminf.    0.70655 (2) obj. -23.1217 iterations 2
Cbc0038I Pass  26: suminf.    0.62484 (5) obj. -23.1217 iterations 11
Cbc0038I Pass  27: suminf.    0.32883 (1) obj. -23.1217 iterations 4
Cbc0038I Pass  28: suminf.    0.16667 (1) obj. -23.2493 iterations 10
Cbc0038I Pass  29: suminf.    0.32883 (1) obj. -23.1217 iterations 4
Cbc0038I Pass  30: suminf.    0.56440 (2) obj. -23.1217 iterations 6
Cbc0038I Pass  31: suminf.    0.56440 (2) obj. -23.1217 iterations 0
Cbc0038I Pass  32: suminf.    0.16667 (1) obj. -23.2782 iterations 7
Cbc0038I Pass  33: suminf.    0.36548 (1) obj. -23.1217 iterations 5
Cbc0038I Pass  34: suminf.    0.51933 (2) obj. -23.1217 iterations 10
Cbc0038I Pass  35: suminf.    0.42856 (2) obj. -23.1217 iterations 3
Cbc0038I Pass  36: suminf.    1.06385 (4) obj. -23.1217 iterations 14
Cbc0038I Pass  37: suminf.    0.89286 (4) obj. -23.1217 iterations 4
Cbc0038I Pass  38: suminf.    0.16667 (1) obj. -23.1388 iterations 10
Cbc0038I Pass  39: suminf.    0.18835 (1) obj. -23.1217 iterations 5
Cbc0038I Pass  40: suminf.    0.54745 (3) obj. -23.1217 iterations 18
Cbc0038I Pass  41: suminf.    0.45628 (3) obj. -23.1217 iterations 4
Cbc0038I Pass  42: suminf.    0.43080 (1) obj. -23.1217 iterations 5
Cbc0038I Pass  43: suminf.    0.16667 (1) obj. -23.2412 iterations 8
Cbc0038I Pass  44: suminf.    0.29551 (1) obj. -23.1217 iterations 5
Cbc0038I Pass  45: suminf.    0.32205 (1) obj. -23.1217 iterations 8
Cbc0038I Pass  46: suminf.    0.21480 (2) obj. -23.1217 iterations 11
Cbc0038I Pass  47: suminf.    0.16938 (2) obj. -23.1217 iterations 3
Cbc0038I Pass  48: suminf.    0.19483 (2) obj. -23.1217 iterations 6
Cbc0038I Pass  49: suminf.    0.37182 (5) obj. -23.1217 iterations 9
Cbc0038I Pass  50: suminf.    0.32324 (1) obj. -23.1217 iterations 7
Cbc0038I Rounding solution of -22.7597 is better than previous of -22.5951

Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 23 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -23.7537
Cbc0038I Pass  50: suminf.    0.83333 (5) obj. -25.14 iterations 0
Cbc0038I Pass  51: suminf.    0.75224 (3) obj. -23.7537 iterations 11
Cbc0038I Pass  52: suminf.    0.50000 (3) obj. -23.9908 iterations 11
Cbc0038I Pass  53: suminf.    0.82048 (3) obj. -23.7537 iterations 8
Cbc0038I Pass  54: suminf.    0.73117 (3) obj. -23.7537 iterations 5
Cbc0038I Pass  55: suminf.    0.48026 (3) obj. -23.7537 iterations 16
Cbc0038I Pass  56: suminf.    0.45121 (3) obj. -23.7537 iterations 3
Cbc0038I Pass  57: suminf.    0.56110 (3) obj. -23.7537 iterations 12
Cbc0038I Pass  58: suminf.    1.33592 (6) obj. -23.7537 iterations 7
Cbc0038I Pass  59: suminf.    0.36140 (2) obj. -23.7537 iterations 3
Cbc0038I Pass  60: suminf.    0.35524 (3) obj. -23.7537 iterations 7
Cbc0038I Pass  61: suminf.    0.50697 (3) obj. -23.7537 iterations 11
Cbc0038I Pass  62: suminf.    0.46496 (3) obj. -23.7537 iterations 4
Cbc0038I Pass  63: suminf.    0.56110 (3) obj. -23.7537 iterations 8
Cbc0038I Pass  64: suminf.    0.35227 (3) obj. -23.7537 iterations 8
Cbc0038I Pass  65: suminf.    0.35288 (2) obj. -23.7537 iterations 8
Cbc0038I Pass  66: suminf.    0.33703 (3) obj. -23.7537 iterations 12
Cbc0038I Pass  67: suminf.    1.05974 (3) obj. -23.7537 iterations 13
Cbc0038I Pass  68: suminf.    1.03843 (3) obj. -23.7537 iterations 5
Cbc0038I Pass  69: suminf.    1.11533 (7) obj. -23.7537 iterations 5
Cbc0038I Pass  70: suminf.    1.33592 (6) obj. -23.7537 iterations 8
Cbc0038I Pass  71: suminf.    0.36140 (2) obj. -23.7537 iterations 4
Cbc0038I Pass  72: suminf.    0.63855 (3) obj. -23.7537 iterations 6
Cbc0038I Pass  73: suminf.    1.32702 (6) obj. -23.7537 iterations 2
Cbc0038I Pass  74: suminf.    1.47193 (5) obj. -23.7537 iterations 10
Cbc0038I Pass  75: suminf.    0.66667 (3) obj. -24.0879 iterations 11
Cbc0038I Pass  76: suminf.    0.37371 (3) obj. -23.7537 iterations 6
Cbc0038I Pass  77: suminf.    0.42667 (3) obj. -23.7537 iterations 10
Cbc0038I Pass  78: suminf.    0.33333 (2) obj. -23.7596 iterations 7
Cbc0038I Pass  79: suminf.    0.34083 (2) obj. -23.7537 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 60 columns, reduced to 23 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -22.7597 - took 0.06 seconds
Cbc0012I Integer solution of -22.759726 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 8 rows 10 columns
Cbc0031I 14 added rows had average density of 40.428571
Cbc0013I At root node, 14 cuts changed objective from -25.22838 to -24.258426 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 37 row cuts average 6.9 elements, 0 column cuts (2 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 851 row cuts average 58.3 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 15 row cuts average 20.4 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 56 row cuts average 46.9 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 110 row cuts average 8.1 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -22.759726 best solution, best possible -24.258426 (0.20 seconds)
Cbc0038I Full problem 36 rows 60 columns, reduced to 19 rows 26 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 11 rows 14 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 6 rows 6 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 13 rows 15 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 13 rows 19 columns
Cbc0038I Full problem 36 rows 60 columns, reduced to 19 rows 21 columns
Cbc0001I Search completed - best objective -22.75972582027295, took 24163 iterations and 2772 nodes (0.99 seconds)
Cbc0032I Strong branching done 7024 times (45927 iterations), fathomed 227 nodes and fixed 393 variables
Cbc0041I Maximum depth 16, 1839 variables fixed on reduced cost (complete fathoming 56 times, 1990 nodes taking 7175 iterations)
Cuts at root node changed objective from -25.2284 to -24.2584
Probing was tried 100 times and created 37 cuts of which 2 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 662 times and created 2055 cuts of which 0 were active after adding rounds of cuts (0.064 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 15 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.014 seconds)
TwoMirCuts was tried 662 times and created 162 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
ZeroHalf was tried 662 times and created 601 cuts of which 0 were active after adding rounds of cuts (0.045 seconds)

Result - Optimal solution found

Objective value:                22.75972582
Enumerated nodes:               2772
Total iterations:               24163
Time (CPU seconds):             0.97
Time (Wallclock seconds):       0.99

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.97   (Wallclock seconds):       0.99

Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /cluster/raid/home/zhivar.sourati/anaconda3/envs/explagraph/lib/python3.8/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/67f41e122a1f431c8aba586f262282d0-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/67f41e122a1f431c8aba586f262282d0-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 191 COLUMNS
At line 1125 RHS
At line 1312 BOUNDS
At line 1490 ENDATA
Problem MODEL has 186 rows, 177 columns and 467 elements
Coin0008I MODEL read with 0 errors
Option for timeMode changed from cpu to elapsed
Continuous objective value is 49.6784 - 0.00 seconds
Cgl0004I processed model has 64 rows, 112 columns (112 integer (56 of which binary)) and 280 elements
Cbc0038I Initial state - 7 integers unsatisfied sum - 0.875
Cbc0038I Pass   1: suminf.    0.87500 (7) obj. -49.6633 iterations 36
Cbc0038I Solution found of -44.4619
Cbc0038I Cleaned solution of -44.4619
Cbc0038I Before mini branch and bound, 101 integers at bound fixed and 0 continuous of which 7 were internal integer and 0 internal continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 4 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -44.4619 to -44.5822 (0.00 seconds)
Cbc0038I Round again with cutoff of -45.0918
Cbc0038I Pass   2: suminf.    0.87500 (7) obj. -49.6633 iterations 0
Cbc0038I Pass   3: suminf.    0.30055 (1) obj. -45.0918 iterations 7
Cbc0038I Pass   4: suminf.    0.12500 (1) obj. -45.2455 iterations 14
Cbc0038I Pass   5: suminf.    0.28921 (1) obj. -45.0918 iterations 1
Cbc0038I Pass   6: suminf.    0.64823 (3) obj. -45.0918 iterations 37
Cbc0038I Pass   7: suminf.    0.59502 (3) obj. -45.0918 iterations 6
Cbc0038I Pass   8: suminf.    0.14990 (2) obj. -45.0918 iterations 11
Cbc0038I Pass   9: suminf.    0.14990 (2) obj. -45.0918 iterations 0
Cbc0038I Pass  10: suminf.    1.82247 (6) obj. -45.0918 iterations 14
Cbc0038I Pass  11: suminf.    0.13413 (1) obj. -45.0918 iterations 3
Cbc0038I Pass  12: suminf.    0.29521 (1) obj. -45.0918 iterations 16
Cbc0038I Pass  13: suminf.    0.29521 (1) obj. -45.0918 iterations 1
Cbc0038I Pass  14: suminf.    0.25000 (1) obj. -45.4474 iterations 20
Cbc0038I Pass  15: suminf.    0.37013 (1) obj. -45.0918 iterations 3
Cbc0038I Pass  16: suminf.    0.29027 (2) obj. -45.0918 iterations 19
Cbc0038I Pass  17: suminf.    0.28983 (2) obj. -45.0918 iterations 3
Cbc0038I Pass  18: suminf.    0.31146 (2) obj. -45.0918 iterations 5
Cbc0038I Pass  19: suminf.    0.64725 (3) obj. -45.0918 iterations 21
Cbc0038I Pass  20: suminf.    0.61139 (3) obj. -45.0918 iterations 5
Cbc0038I Pass  21: suminf.    0.19461 (2) obj. -45.0918 iterations 5
Cbc0038I Pass  22: suminf.    0.19461 (2) obj. -45.0918 iterations 0
Cbc0038I Pass  23: suminf.    0.21913 (2) obj. -45.0918 iterations 2
Cbc0038I Pass  24: suminf.    0.47148 (3) obj. -45.0918 iterations 6
Cbc0038I Pass  25: suminf.    0.45500 (3) obj. -45.0918 iterations 3
Cbc0038I Pass  26: suminf.    0.38397 (3) obj. -45.0918 iterations 15
Cbc0038I Pass  27: suminf.    0.38397 (3) obj. -45.0918 iterations 2
Cbc0038I Pass  28: suminf.    0.31870 (3) obj. -45.0918 iterations 7
Cbc0038I Pass  29: suminf.    0.31870 (3) obj. -45.0918 iterations 1
Cbc0038I Pass  30: suminf.    0.20340 (1) obj. -45.0918 iterations 4
Cbc0038I Pass  31: suminf.    0.12500 (1) obj. -45.1392 iterations 3
Cbc0038I Rounding solution of -45.1997 is better than previous of -44.5822

Cbc0038I Before mini branch and bound, 65 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 29 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -46.0954
Cbc0038I Pass  31: suminf.    0.87500 (7) obj. -49.6633 iterations 0
Cbc0038I Pass  32: suminf.    0.31035 (3) obj. -46.0954 iterations 27
Cbc0038I Pass  33: suminf.    0.26726 (3) obj. -46.0954 iterations 3
Cbc0038I Pass  34: suminf.    0.49843 (2) obj. -46.0954 iterations 11
Cbc0038I Pass  35: suminf.    0.25000 (2) obj. -46.2591 iterations 14
Cbc0038I Pass  36: suminf.    0.42159 (2) obj. -46.0954 iterations 4
Cbc0038I Pass  37: suminf.    1.80089 (8) obj. -46.0954 iterations 45
Cbc0038I Pass  38: suminf.    0.99108 (4) obj. -46.0954 iterations 13
Cbc0038I Pass  39: suminf.    0.89096 (4) obj. -46.0954 iterations 32
Cbc0038I Pass  40: suminf.    0.69039 (3) obj. -46.0954 iterations 13
Cbc0038I Pass  41: suminf.    0.37500 (3) obj. -46.3269 iterations 15
Cbc0038I Pass  42: suminf.    0.65262 (3) obj. -46.0954 iterations 7
Cbc0038I Pass  43: suminf.    1.75962 (6) obj. -46.0954 iterations 9
Cbc0038I Pass  44: suminf.    0.25000 (2) obj. -46.4447 iterations 5
Cbc0038I Pass  45: suminf.    0.58099 (2) obj. -46.0954 iterations 3
Cbc0038I Pass  46: suminf.    0.56185 (2) obj. -46.0954 iterations 1
Cbc0038I Pass  47: suminf.    0.54809 (2) obj. -46.0954 iterations 2
Cbc0038I Pass  48: suminf.    1.31430 (5) obj. -46.0954 iterations 11
Cbc0038I Pass  49: suminf.    1.43345 (5) obj. -46.0954 iterations 5
Cbc0038I Pass  50: suminf.    0.35532 (2) obj. -46.0954 iterations 13
Cbc0038I Pass  51: suminf.    0.35532 (2) obj. -46.0954 iterations 0
Cbc0038I Pass  52: suminf.    0.37495 (2) obj. -46.0954 iterations 3
Cbc0038I Pass  53: suminf.    0.84037 (3) obj. -46.0954 iterations 14
Cbc0038I Pass  54: suminf.    0.37500 (3) obj. -46.4815 iterations 9
Cbc0038I Pass  55: suminf.    0.64735 (3) obj. -46.0954 iterations 6
Cbc0038I Pass  56: suminf.    0.60967 (3) obj. -46.0954 iterations 3
Cbc0038I Pass  57: suminf.    0.49677 (3) obj. -46.0954 iterations 6
Cbc0038I Pass  58: suminf.    0.49677 (3) obj. -46.0954 iterations 1
Cbc0038I Pass  59: suminf.    0.50301 (3) obj. -46.0954 iterations 13
Cbc0038I Pass  60: suminf.    0.71520 (3) obj. -46.0954 iterations 14
Cbc0038I Rounding solution of -45.2148 is better than previous of -45.1997

Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 35 rows 58 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -47.1703
Cbc0038I Pass  60: suminf.    0.87500 (7) obj. -49.6633 iterations 0
Cbc0038I Pass  61: suminf.    0.78879 (4) obj. -47.1703 iterations 28
Cbc0038I Pass  62: suminf.    0.72052 (4) obj. -47.1703 iterations 7
Cbc0038I Pass  63: suminf.    0.48809 (4) obj. -47.1703 iterations 25
Cbc0038I Pass  64: suminf.    0.46925 (4) obj. -47.1703 iterations 1
Cbc0038I Pass  65: suminf.    0.56998 (4) obj. -47.1703 iterations 23
Cbc0038I Pass  66: suminf.    0.56998 (4) obj. -47.1703 iterations 8
Cbc0038I Pass  67: suminf.    0.50067 (3) obj. -47.1703 iterations 14
Cbc0038I Pass  68: suminf.    0.37500 (3) obj. -47.2304 iterations 4
Cbc0038I Pass  69: suminf.    0.44710 (3) obj. -47.1703 iterations 6
Cbc0038I Pass  70: suminf.    1.00250 (5) obj. -47.1703 iterations 13
Cbc0038I Pass  71: suminf.    0.66368 (5) obj. -47.1703 iterations 13
Cbc0038I Pass  72: suminf.    0.37500 (3) obj. -47.2085 iterations 13
Cbc0038I Pass  73: suminf.    0.42082 (3) obj. -47.1703 iterations 10
Cbc0038I Pass  74: suminf.    0.97604 (5) obj. -47.1703 iterations 10
Cbc0038I Pass  75: suminf.    0.91982 (5) obj. -47.1703 iterations 15
Cbc0038I Pass  76: suminf.    0.66577 (7) obj. -47.1703 iterations 12
Cbc0038I Pass  77: suminf.    0.93205 (4) obj. -47.1703 iterations 13
Cbc0038I Pass  78: suminf.    0.91950 (5) obj. -47.1703 iterations 6
Cbc0038I Pass  79: suminf.    1.24004 (5) obj. -47.1703 iterations 14
Cbc0038I Pass  80: suminf.    1.02131 (5) obj. -47.1703 iterations 9
Cbc0038I Pass  81: suminf.    0.37500 (3) obj. -47.2085 iterations 14
Cbc0038I Pass  82: suminf.    0.42082 (3) obj. -47.1703 iterations 9
Cbc0038I Pass  83: suminf.    0.46176 (4) obj. -47.1703 iterations 10
Cbc0038I Pass  84: suminf.    0.37500 (3) obj. -47.2288 iterations 14
Cbc0038I Pass  85: suminf.    0.44522 (3) obj. -47.1703 iterations 9
Cbc0038I Pass  86: suminf.    0.76315 (4) obj. -47.1703 iterations 11
Cbc0038I Pass  87: suminf.    0.55200 (4) obj. -47.1703 iterations 29
Cbc0038I Pass  88: suminf.    0.49323 (4) obj. -47.1703 iterations 11
Cbc0038I Pass  89: suminf.    0.41165 (3) obj. -47.1703 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 64 rows 112 columns, reduced to 34 rows 61 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -45.2148 - took 0.07 seconds
Cbc0012I Integer solution of -45.214846 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 12 rows 16 columns
Cbc0031I 23 added rows had average density of 70.478261
Cbc0013I At root node, 23 cuts changed objective from -49.678366 to -48.005903 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 28 row cuts average 9.4 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1584 row cuts average 108.5 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 85 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 82 row cuts average 55.2 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 167 row cuts average 9.9 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -45.214846 best solution, best possible -48.005903 (0.43 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 26 rows 34 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 34 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 19 rows 25 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 34 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 21 rows 26 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 32 rows 42 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 36 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 21 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 20 rows 25 columns
Cbc0010I After 1000 nodes, 403 on tree, -45.214846 best solution, best possible -48.005903 (6.87 seconds)
Cbc0010I After 2000 nodes, 413 on tree, -45.214846 best solution, best possible -48.005903 (10.61 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 24 rows 31 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 20 columns
Cbc0038I Full problem 64 rows 112 columns, reduced to 19 rows 23 columns
Cbc0010I After 3000 nodes, 411 on tree, -45.214846 best solution, best possible -48.005903 (12.01 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 26 rows 33 columns
Cbc0010I After 4000 nodes, 408 on tree, -45.214846 best solution, best possible -48.005903 (13.45 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 35 columns
Cbc0010I After 5000 nodes, 410 on tree, -45.214846 best solution, best possible -48.005903 (14.40 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 20 rows 25 columns
Cbc0010I After 6000 nodes, 425 on tree, -45.214846 best solution, best possible -48.005903 (16.80 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 22 columns
Cbc0010I After 7000 nodes, 423 on tree, -45.214846 best solution, best possible -48.005903 (18.02 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 25 rows 33 columns
Cbc0010I After 8000 nodes, 422 on tree, -45.214846 best solution, best possible -48.005903 (18.97 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 18 rows 25 columns
Cbc0010I After 9000 nodes, 419 on tree, -45.214846 best solution, best possible -48.005903 (19.63 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 19 rows 26 columns
Cbc0010I After 10000 nodes, 433 on tree, -45.214846 best solution, best possible -48.005903 (21.08 seconds)
Cbc0010I After 11000 nodes, 427 on tree, -45.214846 best solution, best possible -48.005903 (21.88 seconds)
Cbc0010I After 12000 nodes, 908 on tree, -45.214846 best solution, best possible -46.940343 (25.33 seconds)
Cbc0010I After 13000 nodes, 1384 on tree, -45.214846 best solution, best possible -46.793218 (29.14 seconds)
Cbc0010I After 14000 nodes, 1233 on tree, -45.214846 best solution, best possible -46.793218 (37.03 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 18 rows 23 columns
Cbc0010I After 15000 nodes, 1731 on tree, -45.214846 best solution, best possible -46.706959 (38.67 seconds)
Cbc0010I After 16000 nodes, 2220 on tree, -45.214846 best solution, best possible -46.643824 (40.55 seconds)
Cbc0010I After 17000 nodes, 2698 on tree, -45.214846 best solution, best possible -46.59324 (42.68 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 20 rows 26 columns
Cbc0010I After 18000 nodes, 2516 on tree, -45.214846 best solution, best possible -46.59324 (48.82 seconds)
Cbc0010I After 19000 nodes, 3009 on tree, -45.214846 best solution, best possible -46.542973 (50.22 seconds)
Cbc0010I After 20000 nodes, 3493 on tree, -45.214846 best solution, best possible -46.503248 (51.83 seconds)
Cbc0010I After 21000 nodes, 3975 on tree, -45.214846 best solution, best possible -46.470409 (53.32 seconds)
Cbc0010I After 22000 nodes, 3776 on tree, -45.214846 best solution, best possible -46.470409 (58.92 seconds)
Cbc0010I After 23000 nodes, 4266 on tree, -45.214846 best solution, best possible -46.439281 (60.35 seconds)
Cbc0010I After 24000 nodes, 4757 on tree, -45.214846 best solution, best possible -46.412445 (61.59 seconds)
Cbc0010I After 25000 nodes, 5243 on tree, -45.214846 best solution, best possible -46.385926 (62.87 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 22 rows 29 columns
Cbc0010I After 26000 nodes, 5049 on tree, -45.214846 best solution, best possible -46.385926 (66.27 seconds)
Cbc0010I After 27000 nodes, 5539 on tree, -45.214846 best solution, best possible -46.361376 (67.62 seconds)
Cbc0010I After 28000 nodes, 6029 on tree, -45.214846 best solution, best possible -46.340331 (68.83 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 34 columns
Cbc0010I After 29000 nodes, 6512 on tree, -45.214846 best solution, best possible -46.32276 (70.13 seconds)
Cbc0010I After 30000 nodes, 6297 on tree, -45.214846 best solution, best possible -46.32276 (73.94 seconds)
Cbc0010I After 31000 nodes, 6791 on tree, -45.214846 best solution, best possible -46.30496 (75.19 seconds)
Cbc0010I After 32000 nodes, 7282 on tree, -45.214846 best solution, best possible -46.289654 (76.34 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 31 rows 40 columns
Cbc0010I After 33000 nodes, 7759 on tree, -45.214846 best solution, best possible -46.273971 (77.70 seconds)
Cbc0010I After 34000 nodes, 7541 on tree, -45.214846 best solution, best possible -46.273971 (81.59 seconds)
Cbc0010I After 35000 nodes, 8027 on tree, -45.214846 best solution, best possible -46.259863 (82.82 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 16 rows 20 columns
Cbc0010I After 36000 nodes, 8511 on tree, -45.214846 best solution, best possible -46.246036 (83.98 seconds)
Cbc0010I After 37000 nodes, 8998 on tree, -45.214846 best solution, best possible -46.233123 (85.07 seconds)
Cbc0010I After 38000 nodes, 8787 on tree, -45.214846 best solution, best possible -46.233123 (88.36 seconds)
Cbc0010I After 39000 nodes, 9272 on tree, -45.214846 best solution, best possible -46.220615 (89.60 seconds)
Cbc0038I Full problem 64 rows 112 columns, reduced to 28 rows 35 columns
Cbc0010I After 40000 nodes, 97